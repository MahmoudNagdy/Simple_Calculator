
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000068a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014a  00800060  000068a2  00006936  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008001aa  008001aa  00006a80  2**0
                  ALLOC
  3 .stab         000062b8  00000000  00000000  00006a80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000025e4  00000000  00000000  0000cd38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  0000f31c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000250  00000000  00000000  0000f51c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b10  00000000  00000000  0000f76c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001782  00000000  00000000  0001227c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014b1  00000000  00000000  000139fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  00014eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000317  00000000  00000000  000150d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a92  00000000  00000000  000153e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015e79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__vector_1>
       8:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__vector_2>
       c:	0c 94 dd 0f 	jmp	0x1fba	; 0x1fba <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__vector_10>
      2c:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 7e 15 	jmp	0x2afc	; 0x2afc <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f8 e6       	ldi	r31, 0x68	; 104
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3b       	cpi	r26, 0xBB	; 187
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 77 2e 	call	0x5cee	; 0x5cee <main>
      8a:	0c 94 4f 34 	jmp	0x689e	; 0x689e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6e 31 	jmp	0x62dc	; 0x62dc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e8       	ldi	r26, 0x86	; 134
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8a 31 	jmp	0x6314	; 0x6314 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7a 31 	jmp	0x62f4	; 0x62f4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 96 31 	jmp	0x632c	; 0x632c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7a 31 	jmp	0x62f4	; 0x62f4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 96 31 	jmp	0x632c	; 0x632c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6e 31 	jmp	0x62dc	; 0x62dc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e8       	ldi	r24, 0x86	; 134
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8a 31 	jmp	0x6314	; 0x6314 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 76 31 	jmp	0x62ec	; 0x62ec <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e8       	ldi	r22, 0x86	; 134
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 92 31 	jmp	0x6324	; 0x6324 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7a 31 	jmp	0x62f4	; 0x62f4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 96 31 	jmp	0x632c	; 0x632c <__epilogue_restores__+0x18>

000007ea <__nesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7a 31 	jmp	0x62f4	; 0x62f4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__nesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__nesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__nesf2+0x58>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 96 31 	jmp	0x632c	; 0x632c <__epilogue_restores__+0x18>

0000084a <__gtsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7a 31 	jmp	0x62f4	; 0x62f4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 96 31 	jmp	0x632c	; 0x632c <__epilogue_restores__+0x18>

000008aa <__gesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7a 31 	jmp	0x62f4	; 0x62f4 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__gesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__gesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__gesf2+0x58>
     900:	8f ef       	ldi	r24, 0xFF	; 255
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 96 31 	jmp	0x632c	; 0x632c <__epilogue_restores__+0x18>

0000090a <__ltsf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 7a 31 	jmp	0x62f4	; 0x62f4 <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__ltsf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__ltsf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__ltsf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 96 31 	jmp	0x632c	; 0x632c <__epilogue_restores__+0x18>

0000096a <__floatsisf>:
     96a:	a8 e0       	ldi	r26, 0x08	; 8
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 77 31 	jmp	0x62ee	; 0x62ee <__prologue_saves__+0x12>
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	da 01       	movw	r26, r20
     980:	c9 01       	movw	r24, r18
     982:	88 27       	eor	r24, r24
     984:	b7 fd       	sbrc	r27, 7
     986:	83 95       	inc	r24
     988:	99 27       	eor	r25, r25
     98a:	aa 27       	eor	r26, r26
     98c:	bb 27       	eor	r27, r27
     98e:	b8 2e       	mov	r11, r24
     990:	21 15       	cp	r18, r1
     992:	31 05       	cpc	r19, r1
     994:	41 05       	cpc	r20, r1
     996:	51 05       	cpc	r21, r1
     998:	19 f4       	brne	.+6      	; 0x9a0 <__floatsisf+0x36>
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	3a c0       	rjmp	.+116    	; 0xa14 <__floatsisf+0xaa>
     9a0:	88 23       	and	r24, r24
     9a2:	a9 f0       	breq	.+42     	; 0x9ce <__floatsisf+0x64>
     9a4:	20 30       	cpi	r18, 0x00	; 0
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	38 07       	cpc	r19, r24
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	48 07       	cpc	r20, r24
     9ae:	80 e8       	ldi	r24, 0x80	; 128
     9b0:	58 07       	cpc	r21, r24
     9b2:	29 f4       	brne	.+10     	; 0x9be <__floatsisf+0x54>
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	9f ec       	ldi	r25, 0xCF	; 207
     9bc:	30 c0       	rjmp	.+96     	; 0xa1e <__floatsisf+0xb4>
     9be:	ee 24       	eor	r14, r14
     9c0:	ff 24       	eor	r15, r15
     9c2:	87 01       	movw	r16, r14
     9c4:	e2 1a       	sub	r14, r18
     9c6:	f3 0a       	sbc	r15, r19
     9c8:	04 0b       	sbc	r16, r20
     9ca:	15 0b       	sbc	r17, r21
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <__floatsisf+0x68>
     9ce:	79 01       	movw	r14, r18
     9d0:	8a 01       	movw	r16, r20
     9d2:	8e e1       	ldi	r24, 0x1E	; 30
     9d4:	c8 2e       	mov	r12, r24
     9d6:	d1 2c       	mov	r13, r1
     9d8:	dc 82       	std	Y+4, r13	; 0x04
     9da:	cb 82       	std	Y+3, r12	; 0x03
     9dc:	ed 82       	std	Y+5, r14	; 0x05
     9de:	fe 82       	std	Y+6, r15	; 0x06
     9e0:	0f 83       	std	Y+7, r16	; 0x07
     9e2:	18 87       	std	Y+8, r17	; 0x08
     9e4:	c8 01       	movw	r24, r16
     9e6:	b7 01       	movw	r22, r14
     9e8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__clzsi2>
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	18 16       	cp	r1, r24
     9f0:	19 06       	cpc	r1, r25
     9f2:	84 f4       	brge	.+32     	; 0xa14 <__floatsisf+0xaa>
     9f4:	08 2e       	mov	r0, r24
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__floatsisf+0x96>
     9f8:	ee 0c       	add	r14, r14
     9fa:	ff 1c       	adc	r15, r15
     9fc:	00 1f       	adc	r16, r16
     9fe:	11 1f       	adc	r17, r17
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__floatsisf+0x8e>
     a04:	ed 82       	std	Y+5, r14	; 0x05
     a06:	fe 82       	std	Y+6, r15	; 0x06
     a08:	0f 83       	std	Y+7, r16	; 0x07
     a0a:	18 87       	std	Y+8, r17	; 0x08
     a0c:	c8 1a       	sub	r12, r24
     a0e:	d9 0a       	sbc	r13, r25
     a10:	dc 82       	std	Y+4, r13	; 0x04
     a12:	cb 82       	std	Y+3, r12	; 0x03
     a14:	ba 82       	std	Y+2, r11	; 0x02
     a16:	ce 01       	movw	r24, r28
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     a1e:	28 96       	adiw	r28, 0x08	; 8
     a20:	e9 e0       	ldi	r30, 0x09	; 9
     a22:	0c 94 93 31 	jmp	0x6326	; 0x6326 <__epilogue_restores__+0x12>

00000a26 <__fixsfsi>:
     a26:	ac e0       	ldi	r26, 0x0C	; 12
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	e9 e1       	ldi	r30, 0x19	; 25
     a2c:	f5 e0       	ldi	r31, 0x05	; 5
     a2e:	0c 94 7e 31 	jmp	0x62fc	; 0x62fc <__prologue_saves__+0x20>
     a32:	69 83       	std	Y+1, r22	; 0x01
     a34:	7a 83       	std	Y+2, r23	; 0x02
     a36:	8b 83       	std	Y+3, r24	; 0x03
     a38:	9c 83       	std	Y+4, r25	; 0x04
     a3a:	ce 01       	movw	r24, r28
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	be 01       	movw	r22, r28
     a40:	6b 5f       	subi	r22, 0xFB	; 251
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     a48:	8d 81       	ldd	r24, Y+5	; 0x05
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	61 f1       	breq	.+88     	; 0xaa6 <__fixsfsi+0x80>
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	50 f1       	brcs	.+84     	; 0xaa6 <__fixsfsi+0x80>
     a52:	84 30       	cpi	r24, 0x04	; 4
     a54:	21 f4       	brne	.+8      	; 0xa5e <__fixsfsi+0x38>
     a56:	8e 81       	ldd	r24, Y+6	; 0x06
     a58:	88 23       	and	r24, r24
     a5a:	51 f1       	breq	.+84     	; 0xab0 <__fixsfsi+0x8a>
     a5c:	2e c0       	rjmp	.+92     	; 0xaba <__fixsfsi+0x94>
     a5e:	2f 81       	ldd	r18, Y+7	; 0x07
     a60:	38 85       	ldd	r19, Y+8	; 0x08
     a62:	37 fd       	sbrc	r19, 7
     a64:	20 c0       	rjmp	.+64     	; 0xaa6 <__fixsfsi+0x80>
     a66:	6e 81       	ldd	r22, Y+6	; 0x06
     a68:	2f 31       	cpi	r18, 0x1F	; 31
     a6a:	31 05       	cpc	r19, r1
     a6c:	1c f0       	brlt	.+6      	; 0xa74 <__fixsfsi+0x4e>
     a6e:	66 23       	and	r22, r22
     a70:	f9 f0       	breq	.+62     	; 0xab0 <__fixsfsi+0x8a>
     a72:	23 c0       	rjmp	.+70     	; 0xaba <__fixsfsi+0x94>
     a74:	8e e1       	ldi	r24, 0x1E	; 30
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	82 1b       	sub	r24, r18
     a7a:	93 0b       	sbc	r25, r19
     a7c:	29 85       	ldd	r18, Y+9	; 0x09
     a7e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a80:	4b 85       	ldd	r20, Y+11	; 0x0b
     a82:	5c 85       	ldd	r21, Y+12	; 0x0c
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__fixsfsi+0x68>
     a86:	56 95       	lsr	r21
     a88:	47 95       	ror	r20
     a8a:	37 95       	ror	r19
     a8c:	27 95       	ror	r18
     a8e:	8a 95       	dec	r24
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__fixsfsi+0x60>
     a92:	66 23       	and	r22, r22
     a94:	b1 f0       	breq	.+44     	; 0xac2 <__fixsfsi+0x9c>
     a96:	50 95       	com	r21
     a98:	40 95       	com	r20
     a9a:	30 95       	com	r19
     a9c:	21 95       	neg	r18
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
     aa0:	4f 4f       	sbci	r20, 0xFF	; 255
     aa2:	5f 4f       	sbci	r21, 0xFF	; 255
     aa4:	0e c0       	rjmp	.+28     	; 0xac2 <__fixsfsi+0x9c>
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	09 c0       	rjmp	.+18     	; 0xac2 <__fixsfsi+0x9c>
     ab0:	2f ef       	ldi	r18, 0xFF	; 255
     ab2:	3f ef       	ldi	r19, 0xFF	; 255
     ab4:	4f ef       	ldi	r20, 0xFF	; 255
     ab6:	5f e7       	ldi	r21, 0x7F	; 127
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__fixsfsi+0x9c>
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	50 e8       	ldi	r21, 0x80	; 128
     ac2:	b9 01       	movw	r22, r18
     ac4:	ca 01       	movw	r24, r20
     ac6:	2c 96       	adiw	r28, 0x0c	; 12
     ac8:	e2 e0       	ldi	r30, 0x02	; 2
     aca:	0c 94 9a 31 	jmp	0x6334	; 0x6334 <__epilogue_restores__+0x20>

00000ace <__floatunsisf>:
     ace:	a8 e0       	ldi	r26, 0x08	; 8
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	ed e6       	ldi	r30, 0x6D	; 109
     ad4:	f5 e0       	ldi	r31, 0x05	; 5
     ad6:	0c 94 76 31 	jmp	0x62ec	; 0x62ec <__prologue_saves__+0x10>
     ada:	7b 01       	movw	r14, r22
     adc:	8c 01       	movw	r16, r24
     ade:	61 15       	cp	r22, r1
     ae0:	71 05       	cpc	r23, r1
     ae2:	81 05       	cpc	r24, r1
     ae4:	91 05       	cpc	r25, r1
     ae6:	19 f4       	brne	.+6      	; 0xaee <__floatunsisf+0x20>
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	89 83       	std	Y+1, r24	; 0x01
     aec:	60 c0       	rjmp	.+192    	; 0xbae <__floatunsisf+0xe0>
     aee:	83 e0       	ldi	r24, 0x03	; 3
     af0:	89 83       	std	Y+1, r24	; 0x01
     af2:	8e e1       	ldi	r24, 0x1E	; 30
     af4:	c8 2e       	mov	r12, r24
     af6:	d1 2c       	mov	r13, r1
     af8:	dc 82       	std	Y+4, r13	; 0x04
     afa:	cb 82       	std	Y+3, r12	; 0x03
     afc:	ed 82       	std	Y+5, r14	; 0x05
     afe:	fe 82       	std	Y+6, r15	; 0x06
     b00:	0f 83       	std	Y+7, r16	; 0x07
     b02:	18 87       	std	Y+8, r17	; 0x08
     b04:	c8 01       	movw	r24, r16
     b06:	b7 01       	movw	r22, r14
     b08:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__clzsi2>
     b0c:	fc 01       	movw	r30, r24
     b0e:	31 97       	sbiw	r30, 0x01	; 1
     b10:	f7 ff       	sbrs	r31, 7
     b12:	3b c0       	rjmp	.+118    	; 0xb8a <__floatunsisf+0xbc>
     b14:	22 27       	eor	r18, r18
     b16:	33 27       	eor	r19, r19
     b18:	2e 1b       	sub	r18, r30
     b1a:	3f 0b       	sbc	r19, r31
     b1c:	57 01       	movw	r10, r14
     b1e:	68 01       	movw	r12, r16
     b20:	02 2e       	mov	r0, r18
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <__floatunsisf+0x5e>
     b24:	d6 94       	lsr	r13
     b26:	c7 94       	ror	r12
     b28:	b7 94       	ror	r11
     b2a:	a7 94       	ror	r10
     b2c:	0a 94       	dec	r0
     b2e:	d2 f7       	brpl	.-12     	; 0xb24 <__floatunsisf+0x56>
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	04 c0       	rjmp	.+8      	; 0xb4a <__floatunsisf+0x7c>
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	aa 1f       	adc	r26, r26
     b48:	bb 1f       	adc	r27, r27
     b4a:	2a 95       	dec	r18
     b4c:	d2 f7       	brpl	.-12     	; 0xb42 <__floatunsisf+0x74>
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	a1 09       	sbc	r26, r1
     b52:	b1 09       	sbc	r27, r1
     b54:	8e 21       	and	r24, r14
     b56:	9f 21       	and	r25, r15
     b58:	a0 23       	and	r26, r16
     b5a:	b1 23       	and	r27, r17
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	a1 05       	cpc	r26, r1
     b60:	b1 05       	cpc	r27, r1
     b62:	21 f0       	breq	.+8      	; 0xb6c <__floatunsisf+0x9e>
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	4a 29       	or	r20, r10
     b6e:	5b 29       	or	r21, r11
     b70:	6c 29       	or	r22, r12
     b72:	7d 29       	or	r23, r13
     b74:	4d 83       	std	Y+5, r20	; 0x05
     b76:	5e 83       	std	Y+6, r21	; 0x06
     b78:	6f 83       	std	Y+7, r22	; 0x07
     b7a:	78 87       	std	Y+8, r23	; 0x08
     b7c:	8e e1       	ldi	r24, 0x1E	; 30
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	8e 1b       	sub	r24, r30
     b82:	9f 0b       	sbc	r25, r31
     b84:	9c 83       	std	Y+4, r25	; 0x04
     b86:	8b 83       	std	Y+3, r24	; 0x03
     b88:	12 c0       	rjmp	.+36     	; 0xbae <__floatunsisf+0xe0>
     b8a:	30 97       	sbiw	r30, 0x00	; 0
     b8c:	81 f0       	breq	.+32     	; 0xbae <__floatunsisf+0xe0>
     b8e:	0e 2e       	mov	r0, r30
     b90:	04 c0       	rjmp	.+8      	; 0xb9a <__floatunsisf+0xcc>
     b92:	ee 0c       	add	r14, r14
     b94:	ff 1c       	adc	r15, r15
     b96:	00 1f       	adc	r16, r16
     b98:	11 1f       	adc	r17, r17
     b9a:	0a 94       	dec	r0
     b9c:	d2 f7       	brpl	.-12     	; 0xb92 <__floatunsisf+0xc4>
     b9e:	ed 82       	std	Y+5, r14	; 0x05
     ba0:	fe 82       	std	Y+6, r15	; 0x06
     ba2:	0f 83       	std	Y+7, r16	; 0x07
     ba4:	18 87       	std	Y+8, r17	; 0x08
     ba6:	ce 1a       	sub	r12, r30
     ba8:	df 0a       	sbc	r13, r31
     baa:	dc 82       	std	Y+4, r13	; 0x04
     bac:	cb 82       	std	Y+3, r12	; 0x03
     bae:	1a 82       	std	Y+2, r1	; 0x02
     bb0:	ce 01       	movw	r24, r28
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     bb8:	28 96       	adiw	r28, 0x08	; 8
     bba:	ea e0       	ldi	r30, 0x0A	; 10
     bbc:	0c 94 92 31 	jmp	0x6324	; 0x6324 <__epilogue_restores__+0x10>

00000bc0 <__clzsi2>:
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	7b 01       	movw	r14, r22
     bca:	8c 01       	movw	r16, r24
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	e8 16       	cp	r14, r24
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	f8 06       	cpc	r15, r24
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	08 07       	cpc	r16, r24
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	18 07       	cpc	r17, r24
     bdc:	88 f4       	brcc	.+34     	; 0xc00 <__clzsi2+0x40>
     bde:	8f ef       	ldi	r24, 0xFF	; 255
     be0:	e8 16       	cp	r14, r24
     be2:	f1 04       	cpc	r15, r1
     be4:	01 05       	cpc	r16, r1
     be6:	11 05       	cpc	r17, r1
     be8:	31 f0       	breq	.+12     	; 0xbf6 <__clzsi2+0x36>
     bea:	28 f0       	brcs	.+10     	; 0xbf6 <__clzsi2+0x36>
     bec:	88 e0       	ldi	r24, 0x08	; 8
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	a0 e0       	ldi	r26, 0x00	; 0
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	17 c0       	rjmp	.+46     	; 0xc24 <__clzsi2+0x64>
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	a0 e0       	ldi	r26, 0x00	; 0
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	12 c0       	rjmp	.+36     	; 0xc24 <__clzsi2+0x64>
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	e8 16       	cp	r14, r24
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	f8 06       	cpc	r15, r24
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	08 07       	cpc	r16, r24
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	18 07       	cpc	r17, r24
     c10:	28 f0       	brcs	.+10     	; 0xc1c <__clzsi2+0x5c>
     c12:	88 e1       	ldi	r24, 0x18	; 24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	a0 e0       	ldi	r26, 0x00	; 0
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__clzsi2+0x64>
     c1c:	80 e1       	ldi	r24, 0x10	; 16
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	20 e2       	ldi	r18, 0x20	; 32
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	28 1b       	sub	r18, r24
     c2e:	39 0b       	sbc	r19, r25
     c30:	4a 0b       	sbc	r20, r26
     c32:	5b 0b       	sbc	r21, r27
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__clzsi2+0x7e>
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__clzsi2+0x76>
     c42:	f7 01       	movw	r30, r14
     c44:	e2 57       	subi	r30, 0x72	; 114
     c46:	ff 4f       	sbci	r31, 0xFF	; 255
     c48:	80 81       	ld	r24, Z
     c4a:	28 1b       	sub	r18, r24
     c4c:	31 09       	sbc	r19, r1
     c4e:	41 09       	sbc	r20, r1
     c50:	51 09       	sbc	r21, r1
     c52:	c9 01       	movw	r24, r18
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	08 95       	ret

00000c5e <__pack_f>:
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	fc 01       	movw	r30, r24
     c6a:	e4 80       	ldd	r14, Z+4	; 0x04
     c6c:	f5 80       	ldd	r15, Z+5	; 0x05
     c6e:	06 81       	ldd	r16, Z+6	; 0x06
     c70:	17 81       	ldd	r17, Z+7	; 0x07
     c72:	d1 80       	ldd	r13, Z+1	; 0x01
     c74:	80 81       	ld	r24, Z
     c76:	82 30       	cpi	r24, 0x02	; 2
     c78:	48 f4       	brcc	.+18     	; 0xc8c <__pack_f+0x2e>
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	a0 e1       	ldi	r26, 0x10	; 16
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 2a       	or	r14, r24
     c84:	f9 2a       	or	r15, r25
     c86:	0a 2b       	or	r16, r26
     c88:	1b 2b       	or	r17, r27
     c8a:	a5 c0       	rjmp	.+330    	; 0xdd6 <__pack_f+0x178>
     c8c:	84 30       	cpi	r24, 0x04	; 4
     c8e:	09 f4       	brne	.+2      	; 0xc92 <__pack_f+0x34>
     c90:	9f c0       	rjmp	.+318    	; 0xdd0 <__pack_f+0x172>
     c92:	82 30       	cpi	r24, 0x02	; 2
     c94:	21 f4       	brne	.+8      	; 0xc9e <__pack_f+0x40>
     c96:	ee 24       	eor	r14, r14
     c98:	ff 24       	eor	r15, r15
     c9a:	87 01       	movw	r16, r14
     c9c:	05 c0       	rjmp	.+10     	; 0xca8 <__pack_f+0x4a>
     c9e:	e1 14       	cp	r14, r1
     ca0:	f1 04       	cpc	r15, r1
     ca2:	01 05       	cpc	r16, r1
     ca4:	11 05       	cpc	r17, r1
     ca6:	19 f4       	brne	.+6      	; 0xcae <__pack_f+0x50>
     ca8:	e0 e0       	ldi	r30, 0x00	; 0
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	96 c0       	rjmp	.+300    	; 0xdda <__pack_f+0x17c>
     cae:	62 81       	ldd	r22, Z+2	; 0x02
     cb0:	73 81       	ldd	r23, Z+3	; 0x03
     cb2:	9f ef       	ldi	r25, 0xFF	; 255
     cb4:	62 38       	cpi	r22, 0x82	; 130
     cb6:	79 07       	cpc	r23, r25
     cb8:	0c f0       	brlt	.+2      	; 0xcbc <__pack_f+0x5e>
     cba:	5b c0       	rjmp	.+182    	; 0xd72 <__pack_f+0x114>
     cbc:	22 e8       	ldi	r18, 0x82	; 130
     cbe:	3f ef       	ldi	r19, 0xFF	; 255
     cc0:	26 1b       	sub	r18, r22
     cc2:	37 0b       	sbc	r19, r23
     cc4:	2a 31       	cpi	r18, 0x1A	; 26
     cc6:	31 05       	cpc	r19, r1
     cc8:	2c f0       	brlt	.+10     	; 0xcd4 <__pack_f+0x76>
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	2a c0       	rjmp	.+84     	; 0xd28 <__pack_f+0xca>
     cd4:	b8 01       	movw	r22, r16
     cd6:	a7 01       	movw	r20, r14
     cd8:	02 2e       	mov	r0, r18
     cda:	04 c0       	rjmp	.+8      	; 0xce4 <__pack_f+0x86>
     cdc:	76 95       	lsr	r23
     cde:	67 95       	ror	r22
     ce0:	57 95       	ror	r21
     ce2:	47 95       	ror	r20
     ce4:	0a 94       	dec	r0
     ce6:	d2 f7       	brpl	.-12     	; 0xcdc <__pack_f+0x7e>
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	a0 e0       	ldi	r26, 0x00	; 0
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <__pack_f+0x9c>
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	aa 1f       	adc	r26, r26
     cf8:	bb 1f       	adc	r27, r27
     cfa:	2a 95       	dec	r18
     cfc:	d2 f7       	brpl	.-12     	; 0xcf2 <__pack_f+0x94>
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	a1 09       	sbc	r26, r1
     d02:	b1 09       	sbc	r27, r1
     d04:	8e 21       	and	r24, r14
     d06:	9f 21       	and	r25, r15
     d08:	a0 23       	and	r26, r16
     d0a:	b1 23       	and	r27, r17
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	a1 05       	cpc	r26, r1
     d10:	b1 05       	cpc	r27, r1
     d12:	21 f0       	breq	.+8      	; 0xd1c <__pack_f+0xbe>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	a0 e0       	ldi	r26, 0x00	; 0
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	9a 01       	movw	r18, r20
     d1e:	ab 01       	movw	r20, r22
     d20:	28 2b       	or	r18, r24
     d22:	39 2b       	or	r19, r25
     d24:	4a 2b       	or	r20, r26
     d26:	5b 2b       	or	r21, r27
     d28:	da 01       	movw	r26, r20
     d2a:	c9 01       	movw	r24, r18
     d2c:	8f 77       	andi	r24, 0x7F	; 127
     d2e:	90 70       	andi	r25, 0x00	; 0
     d30:	a0 70       	andi	r26, 0x00	; 0
     d32:	b0 70       	andi	r27, 0x00	; 0
     d34:	80 34       	cpi	r24, 0x40	; 64
     d36:	91 05       	cpc	r25, r1
     d38:	a1 05       	cpc	r26, r1
     d3a:	b1 05       	cpc	r27, r1
     d3c:	39 f4       	brne	.+14     	; 0xd4c <__pack_f+0xee>
     d3e:	27 ff       	sbrs	r18, 7
     d40:	09 c0       	rjmp	.+18     	; 0xd54 <__pack_f+0xf6>
     d42:	20 5c       	subi	r18, 0xC0	; 192
     d44:	3f 4f       	sbci	r19, 0xFF	; 255
     d46:	4f 4f       	sbci	r20, 0xFF	; 255
     d48:	5f 4f       	sbci	r21, 0xFF	; 255
     d4a:	04 c0       	rjmp	.+8      	; 0xd54 <__pack_f+0xf6>
     d4c:	21 5c       	subi	r18, 0xC1	; 193
     d4e:	3f 4f       	sbci	r19, 0xFF	; 255
     d50:	4f 4f       	sbci	r20, 0xFF	; 255
     d52:	5f 4f       	sbci	r21, 0xFF	; 255
     d54:	e0 e0       	ldi	r30, 0x00	; 0
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	20 30       	cpi	r18, 0x00	; 0
     d5a:	a0 e0       	ldi	r26, 0x00	; 0
     d5c:	3a 07       	cpc	r19, r26
     d5e:	a0 e0       	ldi	r26, 0x00	; 0
     d60:	4a 07       	cpc	r20, r26
     d62:	a0 e4       	ldi	r26, 0x40	; 64
     d64:	5a 07       	cpc	r21, r26
     d66:	10 f0       	brcs	.+4      	; 0xd6c <__pack_f+0x10e>
     d68:	e1 e0       	ldi	r30, 0x01	; 1
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	79 01       	movw	r14, r18
     d6e:	8a 01       	movw	r16, r20
     d70:	27 c0       	rjmp	.+78     	; 0xdc0 <__pack_f+0x162>
     d72:	60 38       	cpi	r22, 0x80	; 128
     d74:	71 05       	cpc	r23, r1
     d76:	64 f5       	brge	.+88     	; 0xdd0 <__pack_f+0x172>
     d78:	fb 01       	movw	r30, r22
     d7a:	e1 58       	subi	r30, 0x81	; 129
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	d8 01       	movw	r26, r16
     d80:	c7 01       	movw	r24, r14
     d82:	8f 77       	andi	r24, 0x7F	; 127
     d84:	90 70       	andi	r25, 0x00	; 0
     d86:	a0 70       	andi	r26, 0x00	; 0
     d88:	b0 70       	andi	r27, 0x00	; 0
     d8a:	80 34       	cpi	r24, 0x40	; 64
     d8c:	91 05       	cpc	r25, r1
     d8e:	a1 05       	cpc	r26, r1
     d90:	b1 05       	cpc	r27, r1
     d92:	39 f4       	brne	.+14     	; 0xda2 <__pack_f+0x144>
     d94:	e7 fe       	sbrs	r14, 7
     d96:	0d c0       	rjmp	.+26     	; 0xdb2 <__pack_f+0x154>
     d98:	80 e4       	ldi	r24, 0x40	; 64
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	a0 e0       	ldi	r26, 0x00	; 0
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <__pack_f+0x14c>
     da2:	8f e3       	ldi	r24, 0x3F	; 63
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	a0 e0       	ldi	r26, 0x00	; 0
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e8 0e       	add	r14, r24
     dac:	f9 1e       	adc	r15, r25
     dae:	0a 1f       	adc	r16, r26
     db0:	1b 1f       	adc	r17, r27
     db2:	17 ff       	sbrs	r17, 7
     db4:	05 c0       	rjmp	.+10     	; 0xdc0 <__pack_f+0x162>
     db6:	16 95       	lsr	r17
     db8:	07 95       	ror	r16
     dba:	f7 94       	ror	r15
     dbc:	e7 94       	ror	r14
     dbe:	31 96       	adiw	r30, 0x01	; 1
     dc0:	87 e0       	ldi	r24, 0x07	; 7
     dc2:	16 95       	lsr	r17
     dc4:	07 95       	ror	r16
     dc6:	f7 94       	ror	r15
     dc8:	e7 94       	ror	r14
     dca:	8a 95       	dec	r24
     dcc:	d1 f7       	brne	.-12     	; 0xdc2 <__pack_f+0x164>
     dce:	05 c0       	rjmp	.+10     	; 0xdda <__pack_f+0x17c>
     dd0:	ee 24       	eor	r14, r14
     dd2:	ff 24       	eor	r15, r15
     dd4:	87 01       	movw	r16, r14
     dd6:	ef ef       	ldi	r30, 0xFF	; 255
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	6e 2f       	mov	r22, r30
     ddc:	67 95       	ror	r22
     dde:	66 27       	eor	r22, r22
     de0:	67 95       	ror	r22
     de2:	90 2f       	mov	r25, r16
     de4:	9f 77       	andi	r25, 0x7F	; 127
     de6:	d7 94       	ror	r13
     de8:	dd 24       	eor	r13, r13
     dea:	d7 94       	ror	r13
     dec:	8e 2f       	mov	r24, r30
     dee:	86 95       	lsr	r24
     df0:	49 2f       	mov	r20, r25
     df2:	46 2b       	or	r20, r22
     df4:	58 2f       	mov	r21, r24
     df6:	5d 29       	or	r21, r13
     df8:	b7 01       	movw	r22, r14
     dfa:	ca 01       	movw	r24, r20
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	08 95       	ret

00000e08 <__unpack_f>:
     e08:	fc 01       	movw	r30, r24
     e0a:	db 01       	movw	r26, r22
     e0c:	40 81       	ld	r20, Z
     e0e:	51 81       	ldd	r21, Z+1	; 0x01
     e10:	22 81       	ldd	r18, Z+2	; 0x02
     e12:	62 2f       	mov	r22, r18
     e14:	6f 77       	andi	r22, 0x7F	; 127
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	22 1f       	adc	r18, r18
     e1a:	22 27       	eor	r18, r18
     e1c:	22 1f       	adc	r18, r18
     e1e:	93 81       	ldd	r25, Z+3	; 0x03
     e20:	89 2f       	mov	r24, r25
     e22:	88 0f       	add	r24, r24
     e24:	82 2b       	or	r24, r18
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	99 1f       	adc	r25, r25
     e2c:	99 27       	eor	r25, r25
     e2e:	99 1f       	adc	r25, r25
     e30:	11 96       	adiw	r26, 0x01	; 1
     e32:	9c 93       	st	X, r25
     e34:	11 97       	sbiw	r26, 0x01	; 1
     e36:	21 15       	cp	r18, r1
     e38:	31 05       	cpc	r19, r1
     e3a:	a9 f5       	brne	.+106    	; 0xea6 <__unpack_f+0x9e>
     e3c:	41 15       	cp	r20, r1
     e3e:	51 05       	cpc	r21, r1
     e40:	61 05       	cpc	r22, r1
     e42:	71 05       	cpc	r23, r1
     e44:	11 f4       	brne	.+4      	; 0xe4a <__unpack_f+0x42>
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	37 c0       	rjmp	.+110    	; 0xeb8 <__unpack_f+0xb0>
     e4a:	82 e8       	ldi	r24, 0x82	; 130
     e4c:	9f ef       	ldi	r25, 0xFF	; 255
     e4e:	13 96       	adiw	r26, 0x03	; 3
     e50:	9c 93       	st	X, r25
     e52:	8e 93       	st	-X, r24
     e54:	12 97       	sbiw	r26, 0x02	; 2
     e56:	9a 01       	movw	r18, r20
     e58:	ab 01       	movw	r20, r22
     e5a:	67 e0       	ldi	r22, 0x07	; 7
     e5c:	22 0f       	add	r18, r18
     e5e:	33 1f       	adc	r19, r19
     e60:	44 1f       	adc	r20, r20
     e62:	55 1f       	adc	r21, r21
     e64:	6a 95       	dec	r22
     e66:	d1 f7       	brne	.-12     	; 0xe5c <__unpack_f+0x54>
     e68:	83 e0       	ldi	r24, 0x03	; 3
     e6a:	8c 93       	st	X, r24
     e6c:	0d c0       	rjmp	.+26     	; 0xe88 <__unpack_f+0x80>
     e6e:	22 0f       	add	r18, r18
     e70:	33 1f       	adc	r19, r19
     e72:	44 1f       	adc	r20, r20
     e74:	55 1f       	adc	r21, r21
     e76:	12 96       	adiw	r26, 0x02	; 2
     e78:	8d 91       	ld	r24, X+
     e7a:	9c 91       	ld	r25, X
     e7c:	13 97       	sbiw	r26, 0x03	; 3
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	13 96       	adiw	r26, 0x03	; 3
     e82:	9c 93       	st	X, r25
     e84:	8e 93       	st	-X, r24
     e86:	12 97       	sbiw	r26, 0x02	; 2
     e88:	20 30       	cpi	r18, 0x00	; 0
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	38 07       	cpc	r19, r24
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	48 07       	cpc	r20, r24
     e92:	80 e4       	ldi	r24, 0x40	; 64
     e94:	58 07       	cpc	r21, r24
     e96:	58 f3       	brcs	.-42     	; 0xe6e <__unpack_f+0x66>
     e98:	14 96       	adiw	r26, 0x04	; 4
     e9a:	2d 93       	st	X+, r18
     e9c:	3d 93       	st	X+, r19
     e9e:	4d 93       	st	X+, r20
     ea0:	5c 93       	st	X, r21
     ea2:	17 97       	sbiw	r26, 0x07	; 7
     ea4:	08 95       	ret
     ea6:	2f 3f       	cpi	r18, 0xFF	; 255
     ea8:	31 05       	cpc	r19, r1
     eaa:	79 f4       	brne	.+30     	; 0xeca <__unpack_f+0xc2>
     eac:	41 15       	cp	r20, r1
     eae:	51 05       	cpc	r21, r1
     eb0:	61 05       	cpc	r22, r1
     eb2:	71 05       	cpc	r23, r1
     eb4:	19 f4       	brne	.+6      	; 0xebc <__unpack_f+0xb4>
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	8c 93       	st	X, r24
     eba:	08 95       	ret
     ebc:	64 ff       	sbrs	r22, 4
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <__unpack_f+0xbe>
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	8c 93       	st	X, r24
     ec4:	12 c0       	rjmp	.+36     	; 0xeea <__unpack_f+0xe2>
     ec6:	1c 92       	st	X, r1
     ec8:	10 c0       	rjmp	.+32     	; 0xeea <__unpack_f+0xe2>
     eca:	2f 57       	subi	r18, 0x7F	; 127
     ecc:	30 40       	sbci	r19, 0x00	; 0
     ece:	13 96       	adiw	r26, 0x03	; 3
     ed0:	3c 93       	st	X, r19
     ed2:	2e 93       	st	-X, r18
     ed4:	12 97       	sbiw	r26, 0x02	; 2
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	8c 93       	st	X, r24
     eda:	87 e0       	ldi	r24, 0x07	; 7
     edc:	44 0f       	add	r20, r20
     ede:	55 1f       	adc	r21, r21
     ee0:	66 1f       	adc	r22, r22
     ee2:	77 1f       	adc	r23, r23
     ee4:	8a 95       	dec	r24
     ee6:	d1 f7       	brne	.-12     	; 0xedc <__unpack_f+0xd4>
     ee8:	70 64       	ori	r23, 0x40	; 64
     eea:	14 96       	adiw	r26, 0x04	; 4
     eec:	4d 93       	st	X+, r20
     eee:	5d 93       	st	X+, r21
     ef0:	6d 93       	st	X+, r22
     ef2:	7c 93       	st	X, r23
     ef4:	17 97       	sbiw	r26, 0x07	; 7
     ef6:	08 95       	ret

00000ef8 <__fpcmp_parts_f>:
     ef8:	1f 93       	push	r17
     efa:	dc 01       	movw	r26, r24
     efc:	fb 01       	movw	r30, r22
     efe:	9c 91       	ld	r25, X
     f00:	92 30       	cpi	r25, 0x02	; 2
     f02:	08 f4       	brcc	.+2      	; 0xf06 <__fpcmp_parts_f+0xe>
     f04:	47 c0       	rjmp	.+142    	; 0xf94 <__fpcmp_parts_f+0x9c>
     f06:	80 81       	ld	r24, Z
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	08 f4       	brcc	.+2      	; 0xf0e <__fpcmp_parts_f+0x16>
     f0c:	43 c0       	rjmp	.+134    	; 0xf94 <__fpcmp_parts_f+0x9c>
     f0e:	94 30       	cpi	r25, 0x04	; 4
     f10:	51 f4       	brne	.+20     	; 0xf26 <__fpcmp_parts_f+0x2e>
     f12:	11 96       	adiw	r26, 0x01	; 1
     f14:	1c 91       	ld	r17, X
     f16:	84 30       	cpi	r24, 0x04	; 4
     f18:	99 f5       	brne	.+102    	; 0xf80 <__fpcmp_parts_f+0x88>
     f1a:	81 81       	ldd	r24, Z+1	; 0x01
     f1c:	68 2f       	mov	r22, r24
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	61 1b       	sub	r22, r17
     f22:	71 09       	sbc	r23, r1
     f24:	3f c0       	rjmp	.+126    	; 0xfa4 <__fpcmp_parts_f+0xac>
     f26:	84 30       	cpi	r24, 0x04	; 4
     f28:	21 f0       	breq	.+8      	; 0xf32 <__fpcmp_parts_f+0x3a>
     f2a:	92 30       	cpi	r25, 0x02	; 2
     f2c:	31 f4       	brne	.+12     	; 0xf3a <__fpcmp_parts_f+0x42>
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	b9 f1       	breq	.+110    	; 0xfa0 <__fpcmp_parts_f+0xa8>
     f32:	81 81       	ldd	r24, Z+1	; 0x01
     f34:	88 23       	and	r24, r24
     f36:	89 f1       	breq	.+98     	; 0xf9a <__fpcmp_parts_f+0xa2>
     f38:	2d c0       	rjmp	.+90     	; 0xf94 <__fpcmp_parts_f+0x9c>
     f3a:	11 96       	adiw	r26, 0x01	; 1
     f3c:	1c 91       	ld	r17, X
     f3e:	11 97       	sbiw	r26, 0x01	; 1
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	f1 f0       	breq	.+60     	; 0xf80 <__fpcmp_parts_f+0x88>
     f44:	81 81       	ldd	r24, Z+1	; 0x01
     f46:	18 17       	cp	r17, r24
     f48:	d9 f4       	brne	.+54     	; 0xf80 <__fpcmp_parts_f+0x88>
     f4a:	12 96       	adiw	r26, 0x02	; 2
     f4c:	2d 91       	ld	r18, X+
     f4e:	3c 91       	ld	r19, X
     f50:	13 97       	sbiw	r26, 0x03	; 3
     f52:	82 81       	ldd	r24, Z+2	; 0x02
     f54:	93 81       	ldd	r25, Z+3	; 0x03
     f56:	82 17       	cp	r24, r18
     f58:	93 07       	cpc	r25, r19
     f5a:	94 f0       	brlt	.+36     	; 0xf80 <__fpcmp_parts_f+0x88>
     f5c:	28 17       	cp	r18, r24
     f5e:	39 07       	cpc	r19, r25
     f60:	bc f0       	brlt	.+46     	; 0xf90 <__fpcmp_parts_f+0x98>
     f62:	14 96       	adiw	r26, 0x04	; 4
     f64:	8d 91       	ld	r24, X+
     f66:	9d 91       	ld	r25, X+
     f68:	0d 90       	ld	r0, X+
     f6a:	bc 91       	ld	r27, X
     f6c:	a0 2d       	mov	r26, r0
     f6e:	24 81       	ldd	r18, Z+4	; 0x04
     f70:	35 81       	ldd	r19, Z+5	; 0x05
     f72:	46 81       	ldd	r20, Z+6	; 0x06
     f74:	57 81       	ldd	r21, Z+7	; 0x07
     f76:	28 17       	cp	r18, r24
     f78:	39 07       	cpc	r19, r25
     f7a:	4a 07       	cpc	r20, r26
     f7c:	5b 07       	cpc	r21, r27
     f7e:	18 f4       	brcc	.+6      	; 0xf86 <__fpcmp_parts_f+0x8e>
     f80:	11 23       	and	r17, r17
     f82:	41 f0       	breq	.+16     	; 0xf94 <__fpcmp_parts_f+0x9c>
     f84:	0a c0       	rjmp	.+20     	; 0xf9a <__fpcmp_parts_f+0xa2>
     f86:	82 17       	cp	r24, r18
     f88:	93 07       	cpc	r25, r19
     f8a:	a4 07       	cpc	r26, r20
     f8c:	b5 07       	cpc	r27, r21
     f8e:	40 f4       	brcc	.+16     	; 0xfa0 <__fpcmp_parts_f+0xa8>
     f90:	11 23       	and	r17, r17
     f92:	19 f0       	breq	.+6      	; 0xf9a <__fpcmp_parts_f+0xa2>
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	05 c0       	rjmp	.+10     	; 0xfa4 <__fpcmp_parts_f+0xac>
     f9a:	6f ef       	ldi	r22, 0xFF	; 255
     f9c:	7f ef       	ldi	r23, 0xFF	; 255
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <__fpcmp_parts_f+0xac>
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	cb 01       	movw	r24, r22
     fa6:	1f 91       	pop	r17
     fa8:	08 95       	ret

00000faa <WDT_voidEnable>:

#include "WDT_Config.h"
#include "WDT_Private.h"


void WDT_voidEnable(void){
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Enable_Pin);
     fb2:	a1 e4       	ldi	r26, 0x41	; 65
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e1 e4       	ldi	r30, 0x41	; 65
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	88 60       	ori	r24, 0x08	; 8
     fbe:	8c 93       	st	X, r24
	
	/* Select Prescaler */
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP0_Pin);
     fc0:	a1 e4       	ldi	r26, 0x41	; 65
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e1 e4       	ldi	r30, 0x41	; 65
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	81 60       	ori	r24, 0x01	; 1
     fcc:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP1_Pin);
     fce:	a1 e4       	ldi	r26, 0x41	; 65
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e1 e4       	ldi	r30, 0x41	; 65
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	82 60       	ori	r24, 0x02	; 2
     fda:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP2_Pin);
     fdc:	a1 e4       	ldi	r26, 0x41	; 65
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e1 e4       	ldi	r30, 0x41	; 65
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	84 60       	ori	r24, 0x04	; 4
     fe8:	8c 93       	st	X, r24
}
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <WDT_voidDisable>:

void WDT_voidDisable(void){
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Enable_Pin);
     ff8:	a1 e4       	ldi	r26, 0x41	; 65
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e1 e4       	ldi	r30, 0x41	; 65
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	88 60       	ori	r24, 0x08	; 8
    1004:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Disable_Pin);
    1006:	a1 e4       	ldi	r26, 0x41	; 65
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e1 e4       	ldi	r30, 0x41	; 65
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	80 61       	ori	r24, 0x10	; 16
    1012:	8c 93       	st	X, r24
	
	WDT_u8_WDTCR_REG = 0x00;
    1014:	e1 e4       	ldi	r30, 0x41	; 65
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	10 82       	st	Z, r1
}
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <TIMERS_voidTimer0Init>:

/* Global Pointer To Function for TIMER0 CTC */
static void(*TIMERS_pfTIMER0CTC)(void) = NULL;


void TIMERS_voidTimer0Init(void){
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
	#elif OC0_MODE == Non_Inverting
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM01);
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM00);
	#endif
	#elif TIMER_MODE == PWM_FAST
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM00_PIN);
    1028:	a3 e5       	ldi	r26, 0x53	; 83
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e3 e5       	ldi	r30, 0x53	; 83
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	80 64       	ori	r24, 0x40	; 64
    1034:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM01_PIN);
    1036:	a3 e5       	ldi	r26, 0x53	; 83
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e3 e5       	ldi	r30, 0x53	; 83
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	88 60       	ori	r24, 0x08	; 8
    1042:	8c 93       	st	X, r24
	#if OC0_MODE == Inverting
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM01);
    1044:	a3 e5       	ldi	r26, 0x53	; 83
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e3 e5       	ldi	r30, 0x53	; 83
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	80 62       	ori	r24, 0x20	; 32
    1050:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM00);
    1052:	a3 e5       	ldi	r26, 0x53	; 83
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e3 e5       	ldi	r30, 0x53	; 83
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	80 61       	ori	r24, 0x10	; 16
    105e:	8c 93       	st	X, r24
	#endif
	#endif
	
	
	/* Set Prescaler Value => clk / 8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS00_PIN);
    1060:	a3 e5       	ldi	r26, 0x53	; 83
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e3 e5       	ldi	r30, 0x53	; 83
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	8e 7f       	andi	r24, 0xFE	; 254
    106c:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS01_PIN);
    106e:	a3 e5       	ldi	r26, 0x53	; 83
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e3 e5       	ldi	r30, 0x53	; 83
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	82 60       	ori	r24, 0x02	; 2
    107a:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS02_PIN);
    107c:	a3 e5       	ldi	r26, 0x53	; 83
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e3 e5       	ldi	r30, 0x53	; 83
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	8b 7f       	andi	r24, 0xFB	; 251
    1088:	8c 93       	st	X, r24
}
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <TIMERS_voidTimer1Init>:

void TIMERS_voidTimer1Init(void){
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
	/* Select Timer1 Mode => PWM Fact(14) */
	SET_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_WGM11);
    1098:	af e4       	ldi	r26, 0x4F	; 79
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	ef e4       	ldi	r30, 0x4F	; 79
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	82 60       	ori	r24, 0x02	; 2
    10a4:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_WGM10);
    10a6:	af e4       	ldi	r26, 0x4F	; 79
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	ef e4       	ldi	r30, 0x4F	; 79
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	8e 7f       	andi	r24, 0xFE	; 254
    10b2:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMER1_WGM12);
    10b4:	ae e4       	ldi	r26, 0x4E	; 78
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	ee e4       	ldi	r30, 0x4E	; 78
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	88 60       	ori	r24, 0x08	; 8
    10c0:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMER1_WGM13);
    10c2:	ae e4       	ldi	r26, 0x4E	; 78
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	ee e4       	ldi	r30, 0x4E	; 78
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	80 61       	ori	r24, 0x10	; 16
    10ce:	8c 93       	st	X, r24
	
	/* Select HW Action on OCA1 pin => Non- Inverting */
	SET_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_COM1A1);
    10d0:	af e4       	ldi	r26, 0x4F	; 79
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	ef e4       	ldi	r30, 0x4F	; 79
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	80 68       	ori	r24, 0x80	; 128
    10dc:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_COM1A0);
    10de:	af e4       	ldi	r26, 0x4F	; 79
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	ef e4       	ldi	r30, 0x4F	; 79
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	8f 7b       	andi	r24, 0xBF	; 191
    10ea:	8c 93       	st	X, r24
	
	/* Set Top Value in ICR1 */
	TIMERS_u16_ICR1_REG = 19999;
    10ec:	e6 e4       	ldi	r30, 0x46	; 70
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	8f e1       	ldi	r24, 0x1F	; 31
    10f2:	9e e4       	ldi	r25, 0x4E	; 78
    10f4:	91 83       	std	Z+1, r25	; 0x01
    10f6:	80 83       	st	Z, r24
	
	/* Set Angle Of Servo Motor */
	TIMERS_u16_OCR1A_REG = Selected_Angle;
    10f8:	ea e4       	ldi	r30, 0x4A	; 74
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	8f ec       	ldi	r24, 0xCF	; 207
    10fe:	97 e0       	ldi	r25, 0x07	; 7
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	80 83       	st	Z, r24
	
	/* Set Prescaler Value => clk / 8 */
	CLR_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS00_PIN);
    1104:	ae e4       	ldi	r26, 0x4E	; 78
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	ee e4       	ldi	r30, 0x4E	; 78
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	8e 7f       	andi	r24, 0xFE	; 254
    1110:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS01_PIN);
    1112:	ae e4       	ldi	r26, 0x4E	; 78
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	ee e4       	ldi	r30, 0x4E	; 78
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	82 60       	ori	r24, 0x02	; 2
    111e:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS02_PIN);
    1120:	ae e4       	ldi	r26, 0x4E	; 78
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	ee e4       	ldi	r30, 0x4E	; 78
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	8b 7f       	andi	r24, 0xFB	; 251
    112c:	8c 93       	st	X, r24
}
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <TIMERS_u8TIMER0SetCallBack>:


u8 TIMERS_u8TIMER0SetCallBack(void(*Copy_pf)(void)){
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	00 d0       	rcall	.+0      	; 0x113a <TIMERS_u8TIMER0SetCallBack+0x6>
    113a:	0f 92       	push	r0
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	9b 83       	std	Y+3, r25	; 0x03
    1142:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	9b 81       	ldd	r25, Y+3	; 0x03
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	39 f0       	breq	.+14     	; 0x115e <TIMERS_u8TIMER0SetCallBack+0x2a>
		TIMERS_pfTIMER0OVF = Copy_pf;
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	9b 81       	ldd	r25, Y+3	; 0x03
    1154:	90 93 ab 01 	sts	0x01AB, r25
    1158:	80 93 aa 01 	sts	0x01AA, r24
    115c:	01 c0       	rjmp	.+2      	; 0x1160 <TIMERS_u8TIMER0SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    115e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1160:	89 81       	ldd	r24, Y+1	; 0x01
}
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <TIMERS_u8TIMER0CTCSetCallBack>:


u8 TIMERS_u8TIMER0CTCSetCallBack(void(*Copy_pf)(void)){
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	00 d0       	rcall	.+0      	; 0x1174 <TIMERS_u8TIMER0CTCSetCallBack+0x6>
    1174:	0f 92       	push	r0
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	9b 83       	std	Y+3, r25	; 0x03
    117c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	9b 81       	ldd	r25, Y+3	; 0x03
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	39 f0       	breq	.+14     	; 0x1198 <TIMERS_u8TIMER0CTCSetCallBack+0x2a>
		TIMERS_pfTIMER0CTC = Copy_pf;
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	9b 81       	ldd	r25, Y+3	; 0x03
    118e:	90 93 ad 01 	sts	0x01AD, r25
    1192:	80 93 ac 01 	sts	0x01AC, r24
    1196:	01 c0       	rjmp	.+2      	; 0x119a <TIMERS_u8TIMER0CTCSetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    1198:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    119a:	89 81       	ldd	r24, Y+1	; 0x01
}
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <TIMERS_voidTIMER0SetCompareMatchValue>:


void TIMERS_voidTIMER0SetCompareMatchValue(u8 Copy_u8OCR0Value){
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	0f 92       	push	r0
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	89 83       	std	Y+1, r24	; 0x01

	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
    11b4:	ec e5       	ldi	r30, 0x5C	; 92
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	80 83       	st	Z, r24
	
}
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <TIMERS_voidTIMER0SetPreload>:

void TIMERS_voidTIMER0SetPreload(u8 Copy_u8PreloadValue){
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	0f 92       	push	r0
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u8_TCNT0_REG = Copy_u8PreloadValue;
    11d0:	e2 e5       	ldi	r30, 0x52	; 82
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	80 83       	st	Z, r24
}
    11d8:	0f 90       	pop	r0
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <TIMERS_voidTIMER1SetCompareMatchValueA>:

void TIMERS_voidTIMER1SetCompareMatchValueA(u16 Copy_u8OCR1Value){
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <TIMERS_voidTIMER1SetCompareMatchValueA+0x6>
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	9a 83       	std	Y+2, r25	; 0x02
    11ec:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG = Copy_u8OCR1Value;
    11ee:	ea e4       	ldi	r30, 0x4A	; 74
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	91 83       	std	Z+1, r25	; 0x01
    11f8:	80 83       	st	Z, r24
}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <TIMERS_voidTIMER1SetTimerValue>:

void TIMERS_voidTIMER1SetTimerValue(u16 Copy_u8OCR1Value){
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	00 d0       	rcall	.+0      	; 0x120a <TIMERS_voidTIMER1SetTimerValue+0x6>
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	9a 83       	std	Y+2, r25	; 0x02
    1210:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_TCNT1_REG = Copy_u8OCR1Value;
    1212:	ec e4       	ldi	r30, 0x4C	; 76
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	9a 81       	ldd	r25, Y+2	; 0x02
    121a:	91 83       	std	Z+1, r25	; 0x01
    121c:	80 83       	st	Z, r24
}
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <TIMERS_u16TIMER1ReadTimerValue>:

u16 TIMERS_u16TIMER1ReadTimerValue(void){
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
	return TIMERS_u16_TCNT1_REG;
    1230:	ec e4       	ldi	r30, 0x4C	; 76
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	91 81       	ldd	r25, Z+1	; 0x01
}
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <__vector_11>:

/********************** ISR Of Timer0 Overflow ************************/

void __vector_11(void)		__attribute__((signal));

void __vector_11(void){
    123e:	1f 92       	push	r1
    1240:	0f 92       	push	r0
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	0f 92       	push	r0
    1246:	11 24       	eor	r1, r1
    1248:	2f 93       	push	r18
    124a:	3f 93       	push	r19
    124c:	4f 93       	push	r20
    124e:	5f 93       	push	r21
    1250:	6f 93       	push	r22
    1252:	7f 93       	push	r23
    1254:	8f 93       	push	r24
    1256:	9f 93       	push	r25
    1258:	af 93       	push	r26
    125a:	bf 93       	push	r27
    125c:	ef 93       	push	r30
    125e:	ff 93       	push	r31
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    1268:	80 91 ae 01 	lds	r24, 0x01AE
    126c:	90 91 af 01 	lds	r25, 0x01AF
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	90 93 af 01 	sts	0x01AF, r25
    1276:	80 93 ae 01 	sts	0x01AE, r24
	if(Local_u16CounterOVF == 3907){
    127a:	80 91 ae 01 	lds	r24, 0x01AE
    127e:	90 91 af 01 	lds	r25, 0x01AF
    1282:	2f e0       	ldi	r18, 0x0F	; 15
    1284:	83 34       	cpi	r24, 0x43	; 67
    1286:	92 07       	cpc	r25, r18
    1288:	99 f4       	brne	.+38     	; 0x12b0 <__vector_11+0x72>
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
    128a:	e2 e5       	ldi	r30, 0x52	; 82
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 ec       	ldi	r24, 0xC0	; 192
    1290:	80 83       	st	Z, r24
		
		/* Clear Overflow Counter */
		Local_u16CounterOVF = 0;
    1292:	10 92 af 01 	sts	0x01AF, r1
    1296:	10 92 ae 01 	sts	0x01AE, r1
		
		/* Call App Function */
		if(TIMERS_pfTIMER0OVF != NULL){
    129a:	80 91 aa 01 	lds	r24, 0x01AA
    129e:	90 91 ab 01 	lds	r25, 0x01AB
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	29 f0       	breq	.+10     	; 0x12b0 <__vector_11+0x72>
			TIMERS_pfTIMER0OVF();
    12a6:	e0 91 aa 01 	lds	r30, 0x01AA
    12aa:	f0 91 ab 01 	lds	r31, 0x01AB
    12ae:	09 95       	icall
		}
	}
}
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	ff 91       	pop	r31
    12b6:	ef 91       	pop	r30
    12b8:	bf 91       	pop	r27
    12ba:	af 91       	pop	r26
    12bc:	9f 91       	pop	r25
    12be:	8f 91       	pop	r24
    12c0:	7f 91       	pop	r23
    12c2:	6f 91       	pop	r22
    12c4:	5f 91       	pop	r21
    12c6:	4f 91       	pop	r20
    12c8:	3f 91       	pop	r19
    12ca:	2f 91       	pop	r18
    12cc:	0f 90       	pop	r0
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	0f 90       	pop	r0
    12d2:	1f 90       	pop	r1
    12d4:	18 95       	reti

000012d6 <__vector_10>:

/********************** ISR Of Timer0 CTC ************************/

void __vector_10(void)		__attribute__((signal));

void __vector_10(void){
    12d6:	1f 92       	push	r1
    12d8:	0f 92       	push	r0
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	0f 92       	push	r0
    12de:	11 24       	eor	r1, r1
    12e0:	2f 93       	push	r18
    12e2:	3f 93       	push	r19
    12e4:	4f 93       	push	r20
    12e6:	5f 93       	push	r21
    12e8:	6f 93       	push	r22
    12ea:	7f 93       	push	r23
    12ec:	8f 93       	push	r24
    12ee:	9f 93       	push	r25
    12f0:	af 93       	push	r26
    12f2:	bf 93       	push	r27
    12f4:	ef 93       	push	r30
    12f6:	ff 93       	push	r31
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    1300:	80 91 b0 01 	lds	r24, 0x01B0
    1304:	90 91 b1 01 	lds	r25, 0x01B1
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	90 93 b1 01 	sts	0x01B1, r25
    130e:	80 93 b0 01 	sts	0x01B0, r24
	if(Local_u16CounterCTC == 10000){
    1312:	80 91 b0 01 	lds	r24, 0x01B0
    1316:	90 91 b1 01 	lds	r25, 0x01B1
    131a:	27 e2       	ldi	r18, 0x27	; 39
    131c:	80 31       	cpi	r24, 0x10	; 16
    131e:	92 07       	cpc	r25, r18
    1320:	79 f4       	brne	.+30     	; 0x1340 <__vector_10+0x6a>
		Local_u16CounterCTC = 0;
    1322:	10 92 b1 01 	sts	0x01B1, r1
    1326:	10 92 b0 01 	sts	0x01B0, r1
		/* Call App Function */
		if(TIMERS_pfTIMER0CTC != NULL){
    132a:	80 91 ac 01 	lds	r24, 0x01AC
    132e:	90 91 ad 01 	lds	r25, 0x01AD
    1332:	00 97       	sbiw	r24, 0x00	; 0
    1334:	29 f0       	breq	.+10     	; 0x1340 <__vector_10+0x6a>
			TIMERS_pfTIMER0CTC();
    1336:	e0 91 ac 01 	lds	r30, 0x01AC
    133a:	f0 91 ad 01 	lds	r31, 0x01AD
    133e:	09 95       	icall
		}
	}
}
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	ff 91       	pop	r31
    1346:	ef 91       	pop	r30
    1348:	bf 91       	pop	r27
    134a:	af 91       	pop	r26
    134c:	9f 91       	pop	r25
    134e:	8f 91       	pop	r24
    1350:	7f 91       	pop	r23
    1352:	6f 91       	pop	r22
    1354:	5f 91       	pop	r21
    1356:	4f 91       	pop	r20
    1358:	3f 91       	pop	r19
    135a:	2f 91       	pop	r18
    135c:	0f 90       	pop	r0
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	0f 90       	pop	r0
    1362:	1f 90       	pop	r1
    1364:	18 95       	reti

00001366 <Switch_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";
#include "Switch_Private.h";
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <Switch_Init+0x6>
    136c:	00 d0       	rcall	.+0      	; 0x136e <Switch_Init+0x8>
    136e:	0f 92       	push	r0
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	9c 83       	std	Y+4, r25	; 0x04
    1376:	8b 83       	std	Y+3, r24	; 0x03
    1378:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < Switchf_Num; i++){
    137a:	1a 82       	std	Y+2, r1	; 0x02
    137c:	19 82       	std	Y+1, r1	; 0x01
    137e:	50 c0       	rjmp	.+160    	; 0x1420 <Switch_Init+0xba>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
    1380:	29 81       	ldd	r18, Y+1	; 0x01
    1382:	3a 81       	ldd	r19, Y+2	; 0x02
    1384:	c9 01       	movw	r24, r18
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	28 0f       	add	r18, r24
    138c:	39 1f       	adc	r19, r25
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	fc 01       	movw	r30, r24
    1394:	e2 0f       	add	r30, r18
    1396:	f3 1f       	adc	r31, r19
    1398:	40 81       	ld	r20, Z
    139a:	29 81       	ldd	r18, Y+1	; 0x01
    139c:	3a 81       	ldd	r19, Y+2	; 0x02
    139e:	c9 01       	movw	r24, r18
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	28 0f       	add	r18, r24
    13a6:	39 1f       	adc	r19, r25
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	fc 01       	movw	r30, r24
    13ae:	e2 0f       	add	r30, r18
    13b0:	f3 1f       	adc	r31, r19
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	84 2f       	mov	r24, r20
    13b6:	69 2f       	mov	r22, r25
    13b8:	40 e0       	ldi	r20, 0x00	; 0
    13ba:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
    13be:	29 81       	ldd	r18, Y+1	; 0x01
    13c0:	3a 81       	ldd	r19, Y+2	; 0x02
    13c2:	c9 01       	movw	r24, r18
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	28 0f       	add	r18, r24
    13ca:	39 1f       	adc	r19, r25
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	9c 81       	ldd	r25, Y+4	; 0x04
    13d0:	fc 01       	movw	r30, r24
    13d2:	e2 0f       	add	r30, r18
    13d4:	f3 1f       	adc	r31, r19
    13d6:	50 81       	ld	r21, Z
    13d8:	29 81       	ldd	r18, Y+1	; 0x01
    13da:	3a 81       	ldd	r19, Y+2	; 0x02
    13dc:	c9 01       	movw	r24, r18
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	28 0f       	add	r18, r24
    13e4:	39 1f       	adc	r19, r25
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	fc 01       	movw	r30, r24
    13ec:	e2 0f       	add	r30, r18
    13ee:	f3 1f       	adc	r31, r19
    13f0:	41 81       	ldd	r20, Z+1	; 0x01
    13f2:	29 81       	ldd	r18, Y+1	; 0x01
    13f4:	3a 81       	ldd	r19, Y+2	; 0x02
    13f6:	c9 01       	movw	r24, r18
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	28 0f       	add	r18, r24
    13fe:	39 1f       	adc	r19, r25
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	9c 81       	ldd	r25, Y+4	; 0x04
    1404:	fc 01       	movw	r30, r24
    1406:	e2 0f       	add	r30, r18
    1408:	f3 1f       	adc	r31, r19
    140a:	92 81       	ldd	r25, Z+2	; 0x02
    140c:	85 2f       	mov	r24, r21
    140e:	64 2f       	mov	r22, r20
    1410:	49 2f       	mov	r20, r25
    1412:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){

	for(int i = 0; i < Switchf_Num; i++){
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	9a 81       	ldd	r25, Y+2	; 0x02
    141a:	01 96       	adiw	r24, 0x01	; 1
    141c:	9a 83       	std	Y+2, r25	; 0x02
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	8d 81       	ldd	r24, Y+5	; 0x05
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	9a 81       	ldd	r25, Y+2	; 0x02
    142a:	82 17       	cp	r24, r18
    142c:	93 07       	cpc	r25, r19
    142e:	0c f4       	brge	.+2      	; 0x1432 <Switch_Init+0xcc>
    1430:	a7 cf       	rjmp	.-178    	; 0x1380 <Switch_Init+0x1a>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
	}

}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <Switch_GetValue>:


void Switch_GetValue(Switch *Arr ,u8 *ptr_Value){
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	00 d0       	rcall	.+0      	; 0x1448 <Switch_GetValue+0x6>
    1448:	00 d0       	rcall	.+0      	; 0x144a <Switch_GetValue+0x8>
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	9a 83       	std	Y+2, r25	; 0x02
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	7c 83       	std	Y+4, r23	; 0x04
    1454:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(Arr->Switch_Port, Arr->Switch_Pin, ptr_Value);
    1456:	e9 81       	ldd	r30, Y+1	; 0x01
    1458:	fa 81       	ldd	r31, Y+2	; 0x02
    145a:	80 81       	ld	r24, Z
    145c:	e9 81       	ldd	r30, Y+1	; 0x01
    145e:	fa 81       	ldd	r31, Y+2	; 0x02
    1460:	91 81       	ldd	r25, Z+1	; 0x01
    1462:	2b 81       	ldd	r18, Y+3	; 0x03
    1464:	3c 81       	ldd	r19, Y+4	; 0x04
    1466:	69 2f       	mov	r22, r25
    1468:	a9 01       	movw	r20, r18
    146a:	0e 94 8b 12 	call	0x2516	; 0x2516 <DIO_u8GetPinValue>
}
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <LCD_setPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	00 d0       	rcall	.+0      	; 0x1482 <LCD_setPinDirection+0x6>
    1482:	00 d0       	rcall	.+0      	; 0x1484 <LCD_setPinDirection+0x8>
    1484:	0f 92       	push	r0
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	89 83       	std	Y+1, r24	; 0x01
    148c:	6a 83       	std	Y+2, r22	; 0x02
    148e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	88 30       	cpi	r24, 0x08	; 8
    1494:	08 f0       	brcs	.+2      	; 0x1498 <LCD_setPinDirection+0x1c>
    1496:	d5 c0       	rjmp	.+426    	; 0x1642 <LCD_setPinDirection+0x1c6>
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	84 30       	cpi	r24, 0x04	; 4
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <LCD_setPinDirection+0x24>
    149e:	d1 c0       	rjmp	.+418    	; 0x1642 <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	3d 83       	std	Y+5, r19	; 0x05
    14a8:	2c 83       	std	Y+4, r18	; 0x04
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
    14ac:	9d 81       	ldd	r25, Y+5	; 0x05
    14ae:	81 30       	cpi	r24, 0x01	; 1
    14b0:	91 05       	cpc	r25, r1
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <LCD_setPinDirection+0x3a>
    14b4:	43 c0       	rjmp	.+134    	; 0x153c <LCD_setPinDirection+0xc0>
    14b6:	2c 81       	ldd	r18, Y+4	; 0x04
    14b8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ba:	22 30       	cpi	r18, 0x02	; 2
    14bc:	31 05       	cpc	r19, r1
    14be:	2c f4       	brge	.+10     	; 0x14ca <LCD_setPinDirection+0x4e>
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
    14c2:	9d 81       	ldd	r25, Y+5	; 0x05
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	71 f0       	breq	.+28     	; 0x14e4 <LCD_setPinDirection+0x68>
    14c8:	bc c0       	rjmp	.+376    	; 0x1642 <LCD_setPinDirection+0x1c6>
    14ca:	2c 81       	ldd	r18, Y+4	; 0x04
    14cc:	3d 81       	ldd	r19, Y+5	; 0x05
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <LCD_setPinDirection+0x5a>
    14d4:	5f c0       	rjmp	.+190    	; 0x1594 <LCD_setPinDirection+0x118>
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	9d 81       	ldd	r25, Y+5	; 0x05
    14da:	83 30       	cpi	r24, 0x03	; 3
    14dc:	91 05       	cpc	r25, r1
    14de:	09 f4       	brne	.+2      	; 0x14e2 <LCD_setPinDirection+0x66>
    14e0:	85 c0       	rjmp	.+266    	; 0x15ec <LCD_setPinDirection+0x170>
    14e2:	af c0       	rjmp	.+350    	; 0x1642 <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	81 30       	cpi	r24, 0x01	; 1
    14e8:	a1 f4       	brne	.+40     	; 0x1512 <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14ea:	aa e3       	ldi	r26, 0x3A	; 58
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	ea e3       	ldi	r30, 0x3A	; 58
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	48 2f       	mov	r20, r24
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <LCD_setPinDirection+0x8c>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <LCD_setPinDirection+0x88>
    150c:	84 2b       	or	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	98 c0       	rjmp	.+304    	; 0x1642 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRA,pin_num);
    1512:	aa e3       	ldi	r26, 0x3A	; 58
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	ea e3       	ldi	r30, 0x3A	; 58
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <LCD_setPinDirection+0xb4>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <LCD_setPinDirection+0xb0>
    1534:	80 95       	com	r24
    1536:	84 23       	and	r24, r20
    1538:	8c 93       	st	X, r24
    153a:	83 c0       	rjmp	.+262    	; 0x1642 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	a1 f4       	brne	.+40     	; 0x156a <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1542:	a7 e3       	ldi	r26, 0x37	; 55
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e7 e3       	ldi	r30, 0x37	; 55
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <LCD_setPinDirection+0xe4>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <LCD_setPinDirection+0xe0>
    1564:	84 2b       	or	r24, r20
    1566:	8c 93       	st	X, r24
    1568:	6c c0       	rjmp	.+216    	; 0x1642 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRB,pin_num);
    156a:	a7 e3       	ldi	r26, 0x37	; 55
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e7 e3       	ldi	r30, 0x37	; 55
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	48 2f       	mov	r20, r24
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <LCD_setPinDirection+0x10c>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <LCD_setPinDirection+0x108>
    158c:	80 95       	com	r24
    158e:	84 23       	and	r24, r20
    1590:	8c 93       	st	X, r24
    1592:	57 c0       	rjmp	.+174    	; 0x1642 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	81 30       	cpi	r24, 0x01	; 1
    1598:	a1 f4       	brne	.+40     	; 0x15c2 <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    159a:	a4 e3       	ldi	r26, 0x34	; 52
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e4 e3       	ldi	r30, 0x34	; 52
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 2e       	mov	r0, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <LCD_setPinDirection+0x13c>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <LCD_setPinDirection+0x138>
    15bc:	84 2b       	or	r24, r20
    15be:	8c 93       	st	X, r24
    15c0:	40 c0       	rjmp	.+128    	; 0x1642 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRC,pin_num);
    15c2:	a4 e3       	ldi	r26, 0x34	; 52
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e4 e3       	ldi	r30, 0x34	; 52
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	48 2f       	mov	r20, r24
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	02 2e       	mov	r0, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <LCD_setPinDirection+0x164>
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	0a 94       	dec	r0
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <LCD_setPinDirection+0x160>
    15e4:	80 95       	com	r24
    15e6:	84 23       	and	r24, r20
    15e8:	8c 93       	st	X, r24
    15ea:	2b c0       	rjmp	.+86     	; 0x1642 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	a1 f4       	brne	.+40     	; 0x161a <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15f2:	a1 e3       	ldi	r26, 0x31	; 49
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e1 e3       	ldi	r30, 0x31	; 49
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 2e       	mov	r0, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <LCD_setPinDirection+0x194>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	0a 94       	dec	r0
    1612:	e2 f7       	brpl	.-8      	; 0x160c <LCD_setPinDirection+0x190>
    1614:	84 2b       	or	r24, r20
    1616:	8c 93       	st	X, r24
    1618:	14 c0       	rjmp	.+40     	; 0x1642 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRD,pin_num);
    161a:	a1 e3       	ldi	r26, 0x31	; 49
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e1 e3       	ldi	r30, 0x31	; 49
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	48 2f       	mov	r20, r24
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 2e       	mov	r0, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <LCD_setPinDirection+0x1bc>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	0a 94       	dec	r0
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <LCD_setPinDirection+0x1b8>
    163c:	80 95       	com	r24
    163e:	84 23       	and	r24, r20
    1640:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	08 95       	ret

00001652 <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	00 d0       	rcall	.+0      	; 0x1658 <LCD_setPinValue+0x6>
    1658:	00 d0       	rcall	.+0      	; 0x165a <LCD_setPinValue+0x8>
    165a:	0f 92       	push	r0
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	6a 83       	std	Y+2, r22	; 0x02
    1664:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	88 30       	cpi	r24, 0x08	; 8
    166a:	08 f0       	brcs	.+2      	; 0x166e <LCD_setPinValue+0x1c>
    166c:	d5 c0       	rjmp	.+426    	; 0x1818 <LCD_setPinValue+0x1c6>
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	84 30       	cpi	r24, 0x04	; 4
    1672:	08 f0       	brcs	.+2      	; 0x1676 <LCD_setPinValue+0x24>
    1674:	d1 c0       	rjmp	.+418    	; 0x1818 <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	3d 83       	std	Y+5, r19	; 0x05
    167e:	2c 83       	std	Y+4, r18	; 0x04
    1680:	8c 81       	ldd	r24, Y+4	; 0x04
    1682:	9d 81       	ldd	r25, Y+5	; 0x05
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	91 05       	cpc	r25, r1
    1688:	09 f4       	brne	.+2      	; 0x168c <LCD_setPinValue+0x3a>
    168a:	43 c0       	rjmp	.+134    	; 0x1712 <LCD_setPinValue+0xc0>
    168c:	2c 81       	ldd	r18, Y+4	; 0x04
    168e:	3d 81       	ldd	r19, Y+5	; 0x05
    1690:	22 30       	cpi	r18, 0x02	; 2
    1692:	31 05       	cpc	r19, r1
    1694:	2c f4       	brge	.+10     	; 0x16a0 <LCD_setPinValue+0x4e>
    1696:	8c 81       	ldd	r24, Y+4	; 0x04
    1698:	9d 81       	ldd	r25, Y+5	; 0x05
    169a:	00 97       	sbiw	r24, 0x00	; 0
    169c:	71 f0       	breq	.+28     	; 0x16ba <LCD_setPinValue+0x68>
    169e:	bc c0       	rjmp	.+376    	; 0x1818 <LCD_setPinValue+0x1c6>
    16a0:	2c 81       	ldd	r18, Y+4	; 0x04
    16a2:	3d 81       	ldd	r19, Y+5	; 0x05
    16a4:	22 30       	cpi	r18, 0x02	; 2
    16a6:	31 05       	cpc	r19, r1
    16a8:	09 f4       	brne	.+2      	; 0x16ac <LCD_setPinValue+0x5a>
    16aa:	5f c0       	rjmp	.+190    	; 0x176a <LCD_setPinValue+0x118>
    16ac:	8c 81       	ldd	r24, Y+4	; 0x04
    16ae:	9d 81       	ldd	r25, Y+5	; 0x05
    16b0:	83 30       	cpi	r24, 0x03	; 3
    16b2:	91 05       	cpc	r25, r1
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <LCD_setPinValue+0x66>
    16b6:	85 c0       	rjmp	.+266    	; 0x17c2 <LCD_setPinValue+0x170>
    16b8:	af c0       	rjmp	.+350    	; 0x1818 <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	81 30       	cpi	r24, 0x01	; 1
    16be:	a1 f4       	brne	.+40     	; 0x16e8 <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
    16c0:	ab e3       	ldi	r26, 0x3B	; 59
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	eb e3       	ldi	r30, 0x3B	; 59
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	48 2f       	mov	r20, r24
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	02 2e       	mov	r0, r18
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <LCD_setPinValue+0x8c>
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	0a 94       	dec	r0
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <LCD_setPinValue+0x88>
    16e2:	84 2b       	or	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	98 c0       	rjmp	.+304    	; 0x1818 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,pin_num);
    16e8:	ab e3       	ldi	r26, 0x3B	; 59
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	eb e3       	ldi	r30, 0x3B	; 59
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 2e       	mov	r0, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <LCD_setPinValue+0xb4>
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <LCD_setPinValue+0xb0>
    170a:	80 95       	com	r24
    170c:	84 23       	and	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	83 c0       	rjmp	.+262    	; 0x1818 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	a1 f4       	brne	.+40     	; 0x1740 <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1718:	a8 e3       	ldi	r26, 0x38	; 56
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e8 e3       	ldi	r30, 0x38	; 56
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	48 2f       	mov	r20, r24
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	02 2e       	mov	r0, r18
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <LCD_setPinValue+0xe4>
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	0a 94       	dec	r0
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <LCD_setPinValue+0xe0>
    173a:	84 2b       	or	r24, r20
    173c:	8c 93       	st	X, r24
    173e:	6c c0       	rjmp	.+216    	; 0x1818 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,pin_num);
    1740:	a8 e3       	ldi	r26, 0x38	; 56
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e8 e3       	ldi	r30, 0x38	; 56
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	48 2f       	mov	r20, r24
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	02 2e       	mov	r0, r18
    1758:	02 c0       	rjmp	.+4      	; 0x175e <LCD_setPinValue+0x10c>
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	0a 94       	dec	r0
    1760:	e2 f7       	brpl	.-8      	; 0x175a <LCD_setPinValue+0x108>
    1762:	80 95       	com	r24
    1764:	84 23       	and	r24, r20
    1766:	8c 93       	st	X, r24
    1768:	57 c0       	rjmp	.+174    	; 0x1818 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	a1 f4       	brne	.+40     	; 0x1798 <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1770:	a5 e3       	ldi	r26, 0x35	; 53
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e5 e3       	ldi	r30, 0x35	; 53
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	48 2f       	mov	r20, r24
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	02 2e       	mov	r0, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <LCD_setPinValue+0x13c>
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	0a 94       	dec	r0
    1790:	e2 f7       	brpl	.-8      	; 0x178a <LCD_setPinValue+0x138>
    1792:	84 2b       	or	r24, r20
    1794:	8c 93       	st	X, r24
    1796:	40 c0       	rjmp	.+128    	; 0x1818 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,pin_num);
    1798:	a5 e3       	ldi	r26, 0x35	; 53
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e5 e3       	ldi	r30, 0x35	; 53
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	48 2f       	mov	r20, r24
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	02 2e       	mov	r0, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <LCD_setPinValue+0x164>
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	0a 94       	dec	r0
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <LCD_setPinValue+0x160>
    17ba:	80 95       	com	r24
    17bc:	84 23       	and	r24, r20
    17be:	8c 93       	st	X, r24
    17c0:	2b c0       	rjmp	.+86     	; 0x1818 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	a1 f4       	brne	.+40     	; 0x17f0 <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    17c8:	a2 e3       	ldi	r26, 0x32	; 50
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e2 e3       	ldi	r30, 0x32	; 50
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	48 2f       	mov	r20, r24
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	02 2e       	mov	r0, r18
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <LCD_setPinValue+0x194>
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	0a 94       	dec	r0
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <LCD_setPinValue+0x190>
    17ea:	84 2b       	or	r24, r20
    17ec:	8c 93       	st	X, r24
    17ee:	14 c0       	rjmp	.+40     	; 0x1818 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,pin_num);
    17f0:	a2 e3       	ldi	r26, 0x32	; 50
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e2 e3       	ldi	r30, 0x32	; 50
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 2e       	mov	r0, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <LCD_setPinValue+0x1bc>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <LCD_setPinValue+0x1b8>
    1812:	80 95       	com	r24
    1814:	84 23       	and	r24, r20
    1816:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	00 d0       	rcall	.+0      	; 0x182e <LCD_getPinValue+0x6>
    182e:	00 d0       	rcall	.+0      	; 0x1830 <LCD_getPinValue+0x8>
    1830:	0f 92       	push	r0
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	8a 83       	std	Y+2, r24	; 0x02
    1838:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
    183a:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	88 30       	cpi	r24, 0x08	; 8
    1840:	08 f0       	brcs	.+2      	; 0x1844 <LCD_getPinValue+0x1c>
    1842:	84 c0       	rjmp	.+264    	; 0x194c <LCD_getPinValue+0x124>
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	84 30       	cpi	r24, 0x04	; 4
    1848:	08 f0       	brcs	.+2      	; 0x184c <LCD_getPinValue+0x24>
    184a:	80 c0       	rjmp	.+256    	; 0x194c <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	3d 83       	std	Y+5, r19	; 0x05
    1854:	2c 83       	std	Y+4, r18	; 0x04
    1856:	4c 81       	ldd	r20, Y+4	; 0x04
    1858:	5d 81       	ldd	r21, Y+5	; 0x05
    185a:	41 30       	cpi	r20, 0x01	; 1
    185c:	51 05       	cpc	r21, r1
    185e:	79 f1       	breq	.+94     	; 0x18be <LCD_getPinValue+0x96>
    1860:	8c 81       	ldd	r24, Y+4	; 0x04
    1862:	9d 81       	ldd	r25, Y+5	; 0x05
    1864:	82 30       	cpi	r24, 0x02	; 2
    1866:	91 05       	cpc	r25, r1
    1868:	34 f4       	brge	.+12     	; 0x1876 <LCD_getPinValue+0x4e>
    186a:	2c 81       	ldd	r18, Y+4	; 0x04
    186c:	3d 81       	ldd	r19, Y+5	; 0x05
    186e:	21 15       	cp	r18, r1
    1870:	31 05       	cpc	r19, r1
    1872:	69 f0       	breq	.+26     	; 0x188e <LCD_getPinValue+0x66>
    1874:	6b c0       	rjmp	.+214    	; 0x194c <LCD_getPinValue+0x124>
    1876:	4c 81       	ldd	r20, Y+4	; 0x04
    1878:	5d 81       	ldd	r21, Y+5	; 0x05
    187a:	42 30       	cpi	r20, 0x02	; 2
    187c:	51 05       	cpc	r21, r1
    187e:	b9 f1       	breq	.+110    	; 0x18ee <LCD_getPinValue+0xc6>
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	9d 81       	ldd	r25, Y+5	; 0x05
    1884:	83 30       	cpi	r24, 0x03	; 3
    1886:	91 05       	cpc	r25, r1
    1888:	09 f4       	brne	.+2      	; 0x188c <LCD_getPinValue+0x64>
    188a:	49 c0       	rjmp	.+146    	; 0x191e <LCD_getPinValue+0xf6>
    188c:	5f c0       	rjmp	.+190    	; 0x194c <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    188e:	e9 e3       	ldi	r30, 0x39	; 57
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	88 2f       	mov	r24, r24
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	a9 01       	movw	r20, r18
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <LCD_getPinValue+0x7e>
    18a2:	55 95       	asr	r21
    18a4:	47 95       	ror	r20
    18a6:	8a 95       	dec	r24
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <LCD_getPinValue+0x7a>
    18aa:	ca 01       	movw	r24, r20
    18ac:	81 70       	andi	r24, 0x01	; 1
    18ae:	90 70       	andi	r25, 0x00	; 0
    18b0:	88 23       	and	r24, r24
    18b2:	19 f0       	breq	.+6      	; 0x18ba <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	49 c0       	rjmp	.+146    	; 0x194c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18ba:	19 82       	std	Y+1, r1	; 0x01
    18bc:	47 c0       	rjmp	.+142    	; 0x194c <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    18be:	e6 e3       	ldi	r30, 0x36	; 54
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	88 2f       	mov	r24, r24
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	a9 01       	movw	r20, r18
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <LCD_getPinValue+0xae>
    18d2:	55 95       	asr	r21
    18d4:	47 95       	ror	r20
    18d6:	8a 95       	dec	r24
    18d8:	e2 f7       	brpl	.-8      	; 0x18d2 <LCD_getPinValue+0xaa>
    18da:	ca 01       	movw	r24, r20
    18dc:	81 70       	andi	r24, 0x01	; 1
    18de:	90 70       	andi	r25, 0x00	; 0
    18e0:	88 23       	and	r24, r24
    18e2:	19 f0       	breq	.+6      	; 0x18ea <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	89 83       	std	Y+1, r24	; 0x01
    18e8:	31 c0       	rjmp	.+98     	; 0x194c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18ea:	19 82       	std	Y+1, r1	; 0x01
    18ec:	2f c0       	rjmp	.+94     	; 0x194c <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    18ee:	e3 e3       	ldi	r30, 0x33	; 51
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	88 2f       	mov	r24, r24
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a9 01       	movw	r20, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <LCD_getPinValue+0xde>
    1902:	55 95       	asr	r21
    1904:	47 95       	ror	r20
    1906:	8a 95       	dec	r24
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <LCD_getPinValue+0xda>
    190a:	ca 01       	movw	r24, r20
    190c:	81 70       	andi	r24, 0x01	; 1
    190e:	90 70       	andi	r25, 0x00	; 0
    1910:	88 23       	and	r24, r24
    1912:	19 f0       	breq	.+6      	; 0x191a <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	19 c0       	rjmp	.+50     	; 0x194c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    191a:	19 82       	std	Y+1, r1	; 0x01
    191c:	17 c0       	rjmp	.+46     	; 0x194c <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    191e:	e0 e3       	ldi	r30, 0x30	; 48
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	88 2f       	mov	r24, r24
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	a9 01       	movw	r20, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <LCD_getPinValue+0x10e>
    1932:	55 95       	asr	r21
    1934:	47 95       	ror	r20
    1936:	8a 95       	dec	r24
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <LCD_getPinValue+0x10a>
    193a:	ca 01       	movw	r24, r20
    193c:	81 70       	andi	r24, 0x01	; 1
    193e:	90 70       	andi	r25, 0x00	; 0
    1940:	88 23       	and	r24, r24
    1942:	19 f0       	breq	.+6      	; 0x194a <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	01 c0       	rjmp	.+2      	; 0x194c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    194a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    194c:	89 81       	ldd	r24, Y+1	; 0x01
}
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	00 d0       	rcall	.+0      	; 0x1964 <LCD_setPortDirection+0x6>
    1964:	00 d0       	rcall	.+0      	; 0x1966 <LCD_setPortDirection+0x8>
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	84 30       	cpi	r24, 0x04	; 4
    1972:	90 f5       	brcc	.+100    	; 0x19d8 <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	3c 83       	std	Y+4, r19	; 0x04
    197c:	2b 83       	std	Y+3, r18	; 0x03
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	9c 81       	ldd	r25, Y+4	; 0x04
    1982:	81 30       	cpi	r24, 0x01	; 1
    1984:	91 05       	cpc	r25, r1
    1986:	d1 f0       	breq	.+52     	; 0x19bc <LCD_setPortDirection+0x5e>
    1988:	2b 81       	ldd	r18, Y+3	; 0x03
    198a:	3c 81       	ldd	r19, Y+4	; 0x04
    198c:	22 30       	cpi	r18, 0x02	; 2
    198e:	31 05       	cpc	r19, r1
    1990:	2c f4       	brge	.+10     	; 0x199c <LCD_setPortDirection+0x3e>
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	61 f0       	breq	.+24     	; 0x19b2 <LCD_setPortDirection+0x54>
    199a:	1e c0       	rjmp	.+60     	; 0x19d8 <LCD_setPortDirection+0x7a>
    199c:	2b 81       	ldd	r18, Y+3	; 0x03
    199e:	3c 81       	ldd	r19, Y+4	; 0x04
    19a0:	22 30       	cpi	r18, 0x02	; 2
    19a2:	31 05       	cpc	r19, r1
    19a4:	81 f0       	breq	.+32     	; 0x19c6 <LCD_setPortDirection+0x68>
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	9c 81       	ldd	r25, Y+4	; 0x04
    19aa:	83 30       	cpi	r24, 0x03	; 3
    19ac:	91 05       	cpc	r25, r1
    19ae:	81 f0       	breq	.+32     	; 0x19d0 <LCD_setPortDirection+0x72>
    19b0:	13 c0       	rjmp	.+38     	; 0x19d8 <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    19b2:	ea e3       	ldi	r30, 0x3A	; 58
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	80 83       	st	Z, r24
    19ba:	0e c0       	rjmp	.+28     	; 0x19d8 <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    19bc:	e7 e3       	ldi	r30, 0x37	; 55
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	80 83       	st	Z, r24
    19c4:	09 c0       	rjmp	.+18     	; 0x19d8 <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19c6:	e4 e3       	ldi	r30, 0x34	; 52
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	80 83       	st	Z, r24
    19ce:	04 c0       	rjmp	.+8      	; 0x19d8 <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19d0:	e1 e3       	ldi	r30, 0x31	; 49
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	80 83       	st	Z, r24
			break;
		}
	}
}
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <LCD_setPortValue+0x6>
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <LCD_setPortValue+0x8>
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	89 83       	std	Y+1, r24	; 0x01
    19f4:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	84 30       	cpi	r24, 0x04	; 4
    19fa:	90 f5       	brcc	.+100    	; 0x1a60 <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	3c 83       	std	Y+4, r19	; 0x04
    1a04:	2b 83       	std	Y+3, r18	; 0x03
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	d1 f0       	breq	.+52     	; 0x1a44 <LCD_setPortValue+0x5e>
    1a10:	2b 81       	ldd	r18, Y+3	; 0x03
    1a12:	3c 81       	ldd	r19, Y+4	; 0x04
    1a14:	22 30       	cpi	r18, 0x02	; 2
    1a16:	31 05       	cpc	r19, r1
    1a18:	2c f4       	brge	.+10     	; 0x1a24 <LCD_setPortValue+0x3e>
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	61 f0       	breq	.+24     	; 0x1a3a <LCD_setPortValue+0x54>
    1a22:	1e c0       	rjmp	.+60     	; 0x1a60 <LCD_setPortValue+0x7a>
    1a24:	2b 81       	ldd	r18, Y+3	; 0x03
    1a26:	3c 81       	ldd	r19, Y+4	; 0x04
    1a28:	22 30       	cpi	r18, 0x02	; 2
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	81 f0       	breq	.+32     	; 0x1a4e <LCD_setPortValue+0x68>
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	83 30       	cpi	r24, 0x03	; 3
    1a34:	91 05       	cpc	r25, r1
    1a36:	81 f0       	breq	.+32     	; 0x1a58 <LCD_setPortValue+0x72>
    1a38:	13 c0       	rjmp	.+38     	; 0x1a60 <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a3a:	eb e3       	ldi	r30, 0x3B	; 59
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	80 83       	st	Z, r24
    1a42:	0e c0       	rjmp	.+28     	; 0x1a60 <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a44:	e8 e3       	ldi	r30, 0x38	; 56
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	80 83       	st	Z, r24
    1a4c:	09 c0       	rjmp	.+18     	; 0x1a60 <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a4e:	e5 e3       	ldi	r30, 0x35	; 53
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	80 83       	st	Z, r24
    1a56:	04 c0       	rjmp	.+8      	; 0x1a60 <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a58:	e2 e3       	ldi	r30, 0x32	; 50
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    1a6e:	df 93       	push	r29
    1a70:	cf 93       	push	r28
    1a72:	00 d0       	rcall	.+0      	; 0x1a74 <LCD_getPortValue+0x6>
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <LCD_getPortValue+0x8>
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    1a7c:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	84 30       	cpi	r24, 0x04	; 4
    1a82:	90 f5       	brcc	.+100    	; 0x1ae8 <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	3c 83       	std	Y+4, r19	; 0x04
    1a8c:	2b 83       	std	Y+3, r18	; 0x03
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	9c 81       	ldd	r25, Y+4	; 0x04
    1a92:	81 30       	cpi	r24, 0x01	; 1
    1a94:	91 05       	cpc	r25, r1
    1a96:	d1 f0       	breq	.+52     	; 0x1acc <LCD_getPortValue+0x5e>
    1a98:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a9c:	22 30       	cpi	r18, 0x02	; 2
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	2c f4       	brge	.+10     	; 0x1aac <LCD_getPortValue+0x3e>
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	61 f0       	breq	.+24     	; 0x1ac2 <LCD_getPortValue+0x54>
    1aaa:	1e c0       	rjmp	.+60     	; 0x1ae8 <LCD_getPortValue+0x7a>
    1aac:	2b 81       	ldd	r18, Y+3	; 0x03
    1aae:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab0:	22 30       	cpi	r18, 0x02	; 2
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	81 f0       	breq	.+32     	; 0x1ad6 <LCD_getPortValue+0x68>
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	83 30       	cpi	r24, 0x03	; 3
    1abc:	91 05       	cpc	r25, r1
    1abe:	81 f0       	breq	.+32     	; 0x1ae0 <LCD_getPortValue+0x72>
    1ac0:	13 c0       	rjmp	.+38     	; 0x1ae8 <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1ac2:	e9 e3       	ldi	r30, 0x39	; 57
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	89 83       	std	Y+1, r24	; 0x01
    1aca:	0e c0       	rjmp	.+28     	; 0x1ae8 <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1acc:	e6 e3       	ldi	r30, 0x36	; 54
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	89 83       	std	Y+1, r24	; 0x01
    1ad4:	09 c0       	rjmp	.+18     	; 0x1ae8 <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1ad6:	e3 e3       	ldi	r30, 0x33	; 51
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	04 c0       	rjmp	.+8      	; 0x1ae8 <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ae0:	e0 e3       	ldi	r30, 0x30	; 48
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <EXTI_voidEnable_GIE>:
#include "../../LIB/BIT_MATH.h";
#include "../../LIB/STD_TYPES.h";


/* Enable GIE (Enable Global Interrupt) */
void EXTI_voidEnable_GIE(void){
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    1b00:	af e5       	ldi	r26, 0x5F	; 95
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	ef e5       	ldi	r30, 0x5F	; 95
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	80 68       	ori	r24, 0x80	; 128
    1b0c:	8c 93       	st	X, r24
}
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <EXTI_voidDisable_GIE>:

/* Disable GIE (Disable Global Interrupt) */
void EXTI_voidDisable_GIE(void){
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    1b1c:	af e5       	ldi	r26, 0x5F	; 95
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	ef e5       	ldi	r30, 0x5F	; 95
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	8f 77       	andi	r24, 0x7F	; 127
    1b28:	8c 93       	st	X, r24
}
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <setCallBack>:
/* Global Poiter */

void (*EXTI[3])(void) = {NULL, NULL, NULL};


void setCallBack(void(*ptf)(void), u8 EXTI_Index){
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <setCallBack+0x6>
    1b36:	0f 92       	push	r0
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	9a 83       	std	Y+2, r25	; 0x02
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	6b 83       	std	Y+3, r22	; 0x03
	EXTI[EXTI_Index] = ptf;
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	88 2f       	mov	r24, r24
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	ee 54       	subi	r30, 0x4E	; 78
    1b50:	fe 4f       	sbci	r31, 0xFE	; 254
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	9a 81       	ldd	r25, Y+2	; 0x02
    1b56:	91 83       	std	Z+1, r25	; 0x01
    1b58:	80 83       	st	Z, r24
}
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <EXTI0_LowLevel_MODE>:

/* EXTI0 Modes */
void EXTI0_LowLevel_MODE(void){
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1b6e:	a5 e5       	ldi	r26, 0x55	; 85
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e5 e5       	ldi	r30, 0x55	; 85
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	8e 7f       	andi	r24, 0xFE	; 254
    1b7a:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1b7c:	a5 e5       	ldi	r26, 0x55	; 85
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e5 e5       	ldi	r30, 0x55	; 85
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	8d 7f       	andi	r24, 0xFD	; 253
    1b88:	8c 93       	st	X, r24
}
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <EXTI0_FALLING_MODE>:

void EXTI0_FALLING_MODE(void){
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1b98:	a5 e5       	ldi	r26, 0x55	; 85
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e5 e5       	ldi	r30, 0x55	; 85
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	82 60       	ori	r24, 0x02	; 2
    1ba4:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1ba6:	a5 e5       	ldi	r26, 0x55	; 85
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e5 e5       	ldi	r30, 0x55	; 85
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	8e 7f       	andi	r24, 0xFE	; 254
    1bb2:	8c 93       	st	X, r24
}
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret

00001bba <EXTI0_AnyLogicalChange_MODE>:

void EXTI0_AnyLogicalChange_MODE(void){
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1bc2:	a5 e5       	ldi	r26, 0x55	; 85
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e5 e5       	ldi	r30, 0x55	; 85
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	8d 7f       	andi	r24, 0xFD	; 253
    1bce:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1bd0:	a5 e5       	ldi	r26, 0x55	; 85
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	e5 e5       	ldi	r30, 0x55	; 85
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	81 60       	ori	r24, 0x01	; 1
    1bdc:	8c 93       	st	X, r24
}
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <EXTI0_RISING_MODE>:

void EXTI0_RISING_MODE(void){
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1bec:	a5 e5       	ldi	r26, 0x55	; 85
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e5 e5       	ldi	r30, 0x55	; 85
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	82 60       	ori	r24, 0x02	; 2
    1bf8:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1bfa:	a5 e5       	ldi	r26, 0x55	; 85
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e5 e5       	ldi	r30, 0x55	; 85
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	81 60       	ori	r24, 0x01	; 1
    1c06:	8c 93       	st	X, r24
}
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <EXTI1_LowLevel_MODE>:

/**********************************************************/


/* EXTI1 Modes */
void EXTI1_LowLevel_MODE(void){
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1c16:	a5 e5       	ldi	r26, 0x55	; 85
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e5 e5       	ldi	r30, 0x55	; 85
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	8b 7f       	andi	r24, 0xFB	; 251
    1c22:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1c24:	a5 e5       	ldi	r26, 0x55	; 85
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e5 e5       	ldi	r30, 0x55	; 85
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	87 7f       	andi	r24, 0xF7	; 247
    1c30:	8c 93       	st	X, r24
}
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <EXTI1_FALLING_MODE>:

void EXTI1_FALLING_MODE(void){
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1c40:	a5 e5       	ldi	r26, 0x55	; 85
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e5 e5       	ldi	r30, 0x55	; 85
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	88 60       	ori	r24, 0x08	; 8
    1c4c:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1c4e:	a5 e5       	ldi	r26, 0x55	; 85
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e5 e5       	ldi	r30, 0x55	; 85
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	8b 7f       	andi	r24, 0xFB	; 251
    1c5a:	8c 93       	st	X, r24
}
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <EXTI1_AnyLogicalChange_MODE>:

void EXTI1_AnyLogicalChange_MODE(void){
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1c6a:	a5 e5       	ldi	r26, 0x55	; 85
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e5 e5       	ldi	r30, 0x55	; 85
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	87 7f       	andi	r24, 0xF7	; 247
    1c76:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1c78:	a5 e5       	ldi	r26, 0x55	; 85
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e5 e5       	ldi	r30, 0x55	; 85
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	84 60       	ori	r24, 0x04	; 4
    1c84:	8c 93       	st	X, r24
}
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <EXTI1_RISING_MODE>:

void EXTI1_RISING_MODE(void){
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1c94:	a5 e5       	ldi	r26, 0x55	; 85
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e5 e5       	ldi	r30, 0x55	; 85
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	88 60       	ori	r24, 0x08	; 8
    1ca0:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1ca2:	a5 e5       	ldi	r26, 0x55	; 85
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	e5 e5       	ldi	r30, 0x55	; 85
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	84 60       	ori	r24, 0x04	; 4
    1cae:	8c 93       	st	X, r24
}
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <EXTI2_RISING_MODE>:

/**********************************************************/

/* EXTI2 Modes */

void EXTI2_RISING_MODE(void){
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    1cbe:	a4 e5       	ldi	r26, 0x54	; 84
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e4 e5       	ldi	r30, 0x54	; 84
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	80 64       	ori	r24, 0x40	; 64
    1cca:	8c 93       	st	X, r24
}
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <EXTI2_FALLING_MODE>:

void EXTI2_FALLING_MODE(void){
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    1cda:	a4 e5       	ldi	r26, 0x54	; 84
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	e4 e5       	ldi	r30, 0x54	; 84
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	8f 7b       	andi	r24, 0xBF	; 191
    1ce6:	8c 93       	st	X, r24
}
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <EXTI_voidEXTI0Enable>:

/**********************************************************/

void EXTI_voidEXTI0Enable(void){
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI0_RISING_MODE();
    1cf6:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <EXTI0_RISING_MODE>

	/* Enable EXTI0 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1cfa:	ab e5       	ldi	r26, 0x5B	; 91
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	eb e5       	ldi	r30, 0x5B	; 91
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	80 64       	ori	r24, 0x40	; 64
    1d06:	8c 93       	st	X, r24
}
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <EXTI_voidEXTI1Enable>:

void EXTI_voidEXTI1Enable(void){
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI1_AnyLogicalChange_MODE();
    1d16:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <EXTI1_AnyLogicalChange_MODE>

	/* Enable EXTI1 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1d1a:	ab e5       	ldi	r26, 0x5B	; 91
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	eb e5       	ldi	r30, 0x5B	; 91
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	80 68       	ori	r24, 0x80	; 128
    1d26:	8c 93       	st	X, r24
}
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <EXTI_INTEnable>:


void EXTI_INTEnable(u8 Copy_u8INTNumber, u8 Copy_u8INTMode){
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	2a 97       	sbiw	r28, 0x0a	; 10
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8INTNumber){
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	3a 87       	std	Y+10, r19	; 0x0a
    1d4e:	29 87       	std	Y+9, r18	; 0x09
    1d50:	89 85       	ldd	r24, Y+9	; 0x09
    1d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	91 05       	cpc	r25, r1
    1d58:	e9 f1       	breq	.+122    	; 0x1dd4 <EXTI_INTEnable+0xa6>
    1d5a:	29 85       	ldd	r18, Y+9	; 0x09
    1d5c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d5e:	22 30       	cpi	r18, 0x02	; 2
    1d60:	31 05       	cpc	r19, r1
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <EXTI_INTEnable+0x38>
    1d64:	69 c0       	rjmp	.+210    	; 0x1e38 <EXTI_INTEnable+0x10a>
    1d66:	89 85       	ldd	r24, Y+9	; 0x09
    1d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <EXTI_INTEnable+0x42>
    1d6e:	7f c0       	rjmp	.+254    	; 0x1e6e <EXTI_INTEnable+0x140>
		case EXTI_INT0:
			/* Enable EXTI0 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1d70:	ab e5       	ldi	r26, 0x5B	; 91
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	eb e5       	ldi	r30, 0x5B	; 91
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	80 64       	ori	r24, 0x40	; 64
    1d7c:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	38 87       	std	Y+8, r19	; 0x08
    1d86:	2f 83       	std	Y+7, r18	; 0x07
    1d88:	8f 81       	ldd	r24, Y+7	; 0x07
    1d8a:	98 85       	ldd	r25, Y+8	; 0x08
    1d8c:	81 30       	cpi	r24, 0x01	; 1
    1d8e:	91 05       	cpc	r25, r1
    1d90:	c1 f0       	breq	.+48     	; 0x1dc2 <EXTI_INTEnable+0x94>
    1d92:	2f 81       	ldd	r18, Y+7	; 0x07
    1d94:	38 85       	ldd	r19, Y+8	; 0x08
    1d96:	22 30       	cpi	r18, 0x02	; 2
    1d98:	31 05       	cpc	r19, r1
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <EXTI_INTEnable+0x78>
    1d9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d9e:	98 85       	ldd	r25, Y+8	; 0x08
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	61 f0       	breq	.+24     	; 0x1dbc <EXTI_INTEnable+0x8e>
    1da4:	64 c0       	rjmp	.+200    	; 0x1e6e <EXTI_INTEnable+0x140>
    1da6:	2f 81       	ldd	r18, Y+7	; 0x07
    1da8:	38 85       	ldd	r19, Y+8	; 0x08
    1daa:	22 30       	cpi	r18, 0x02	; 2
    1dac:	31 05       	cpc	r19, r1
    1dae:	61 f0       	breq	.+24     	; 0x1dc8 <EXTI_INTEnable+0x9a>
    1db0:	8f 81       	ldd	r24, Y+7	; 0x07
    1db2:	98 85       	ldd	r25, Y+8	; 0x08
    1db4:	83 30       	cpi	r24, 0x03	; 3
    1db6:	91 05       	cpc	r25, r1
    1db8:	51 f0       	breq	.+20     	; 0x1dce <EXTI_INTEnable+0xa0>
    1dba:	59 c0       	rjmp	.+178    	; 0x1e6e <EXTI_INTEnable+0x140>
				case Low_Level_Mode:
					EXTI0_LowLevel_MODE();
    1dbc:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <EXTI0_LowLevel_MODE>
    1dc0:	56 c0       	rjmp	.+172    	; 0x1e6e <EXTI_INTEnable+0x140>
					break;

				case Falling_Mode:
					EXTI0_FALLING_MODE();
    1dc2:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <EXTI0_FALLING_MODE>
    1dc6:	53 c0       	rjmp	.+166    	; 0x1e6e <EXTI_INTEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI0_AnyLogicalChange_MODE();
    1dc8:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <EXTI0_AnyLogicalChange_MODE>
    1dcc:	50 c0       	rjmp	.+160    	; 0x1e6e <EXTI_INTEnable+0x140>
					break;

				case Rising_Mode:
					EXTI0_RISING_MODE();
    1dce:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <EXTI0_RISING_MODE>
    1dd2:	4d c0       	rjmp	.+154    	; 0x1e6e <EXTI_INTEnable+0x140>
			}
			break;

		case EXTI_INT1:
			/* Enable EXTI1 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1dd4:	ab e5       	ldi	r26, 0x5B	; 91
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	eb e5       	ldi	r30, 0x5B	; 91
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	80 68       	ori	r24, 0x80	; 128
    1de0:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	3e 83       	std	Y+6, r19	; 0x06
    1dea:	2d 83       	std	Y+5, r18	; 0x05
    1dec:	8d 81       	ldd	r24, Y+5	; 0x05
    1dee:	9e 81       	ldd	r25, Y+6	; 0x06
    1df0:	81 30       	cpi	r24, 0x01	; 1
    1df2:	91 05       	cpc	r25, r1
    1df4:	c1 f0       	breq	.+48     	; 0x1e26 <EXTI_INTEnable+0xf8>
    1df6:	2d 81       	ldd	r18, Y+5	; 0x05
    1df8:	3e 81       	ldd	r19, Y+6	; 0x06
    1dfa:	22 30       	cpi	r18, 0x02	; 2
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	2c f4       	brge	.+10     	; 0x1e0a <EXTI_INTEnable+0xdc>
    1e00:	8d 81       	ldd	r24, Y+5	; 0x05
    1e02:	9e 81       	ldd	r25, Y+6	; 0x06
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	61 f0       	breq	.+24     	; 0x1e20 <EXTI_INTEnable+0xf2>
    1e08:	32 c0       	rjmp	.+100    	; 0x1e6e <EXTI_INTEnable+0x140>
    1e0a:	2d 81       	ldd	r18, Y+5	; 0x05
    1e0c:	3e 81       	ldd	r19, Y+6	; 0x06
    1e0e:	22 30       	cpi	r18, 0x02	; 2
    1e10:	31 05       	cpc	r19, r1
    1e12:	61 f0       	breq	.+24     	; 0x1e2c <EXTI_INTEnable+0xfe>
    1e14:	8d 81       	ldd	r24, Y+5	; 0x05
    1e16:	9e 81       	ldd	r25, Y+6	; 0x06
    1e18:	83 30       	cpi	r24, 0x03	; 3
    1e1a:	91 05       	cpc	r25, r1
    1e1c:	51 f0       	breq	.+20     	; 0x1e32 <EXTI_INTEnable+0x104>
    1e1e:	27 c0       	rjmp	.+78     	; 0x1e6e <EXTI_INTEnable+0x140>
				case Low_Level_Mode:
					EXTI1_LowLevel_MODE();
    1e20:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <EXTI1_LowLevel_MODE>
    1e24:	24 c0       	rjmp	.+72     	; 0x1e6e <EXTI_INTEnable+0x140>
					break;

				case Falling_Mode:
					EXTI1_FALLING_MODE();
    1e26:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <EXTI1_FALLING_MODE>
    1e2a:	21 c0       	rjmp	.+66     	; 0x1e6e <EXTI_INTEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI1_AnyLogicalChange_MODE();
    1e2c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <EXTI1_AnyLogicalChange_MODE>
    1e30:	1e c0       	rjmp	.+60     	; 0x1e6e <EXTI_INTEnable+0x140>
					break;

				case Rising_Mode:
					EXTI1_RISING_MODE();
    1e32:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <EXTI1_RISING_MODE>
    1e36:	1b c0       	rjmp	.+54     	; 0x1e6e <EXTI_INTEnable+0x140>
					break;
			}
			break;
		case EXTI_INT2:
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    1e38:	ab e5       	ldi	r26, 0x5B	; 91
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	eb e5       	ldi	r30, 0x5B	; 91
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	80 62       	ori	r24, 0x20	; 32
    1e44:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	3c 83       	std	Y+4, r19	; 0x04
    1e4e:	2b 83       	std	Y+3, r18	; 0x03
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	81 30       	cpi	r24, 0x01	; 1
    1e56:	91 05       	cpc	r25, r1
    1e58:	41 f0       	breq	.+16     	; 0x1e6a <EXTI_INTEnable+0x13c>
    1e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5e:	23 30       	cpi	r18, 0x03	; 3
    1e60:	31 05       	cpc	r19, r1
    1e62:	29 f4       	brne	.+10     	; 0x1e6e <EXTI_INTEnable+0x140>
				case Rising_Mode:
					EXTI2_RISING_MODE();
    1e64:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <EXTI2_RISING_MODE>
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <EXTI_INTEnable+0x140>
					break;
				case Falling_Mode:
					EXTI2_FALLING_MODE();
    1e6a:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <EXTI2_FALLING_MODE>
					break;
			}
			break;
	}

}
    1e6e:	2a 96       	adiw	r28, 0x0a	; 10
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <EXTI_voidINTDisable>:

void EXTI_voidINTDisable(u8 Copy_u8_INT_Index){
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <EXTI_voidINTDisable+0x6>
    1e86:	0f 92       	push	r0
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_INT_Index){
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	3b 83       	std	Y+3, r19	; 0x03
    1e96:	2a 83       	std	Y+2, r18	; 0x02
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9c:	81 30       	cpi	r24, 0x01	; 1
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	89 f0       	breq	.+34     	; 0x1ec4 <EXTI_voidINTDisable+0x44>
    1ea2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ea4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ea6:	22 30       	cpi	r18, 0x02	; 2
    1ea8:	31 05       	cpc	r19, r1
    1eaa:	a1 f0       	breq	.+40     	; 0x1ed4 <EXTI_voidINTDisable+0x54>
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	b9 f4       	brne	.+46     	; 0x1ee2 <EXTI_voidINTDisable+0x62>
		case EXTI_INT0:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1eb4:	ab e5       	ldi	r26, 0x5B	; 91
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	eb e5       	ldi	r30, 0x5B	; 91
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	8f 7b       	andi	r24, 0xBF	; 191
    1ec0:	8c 93       	st	X, r24
    1ec2:	0f c0       	rjmp	.+30     	; 0x1ee2 <EXTI_voidINTDisable+0x62>
			break;

		case EXTI_INT1:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1ec4:	ab e5       	ldi	r26, 0x5B	; 91
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	eb e5       	ldi	r30, 0x5B	; 91
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	8f 77       	andi	r24, 0x7F	; 127
    1ed0:	8c 93       	st	X, r24
    1ed2:	07 c0       	rjmp	.+14     	; 0x1ee2 <EXTI_voidINTDisable+0x62>
			break;
		
		case EXTI_INT2:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    1ed4:	ab e5       	ldi	r26, 0x5B	; 91
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	eb e5       	ldi	r30, 0x5B	; 91
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	8f 7d       	andi	r24, 0xDF	; 223
    1ee0:	8c 93       	st	X, r24
			break;
	}
}
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <__vector_1>:

// EXTI 0

void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    1eee:	1f 92       	push	r1
    1ef0:	0f 92       	push	r0
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	0f 92       	push	r0
    1ef6:	11 24       	eor	r1, r1
    1ef8:	2f 93       	push	r18
    1efa:	3f 93       	push	r19
    1efc:	4f 93       	push	r20
    1efe:	5f 93       	push	r21
    1f00:	6f 93       	push	r22
    1f02:	7f 93       	push	r23
    1f04:	8f 93       	push	r24
    1f06:	9f 93       	push	r25
    1f08:	af 93       	push	r26
    1f0a:	bf 93       	push	r27
    1f0c:	ef 93       	push	r30
    1f0e:	ff 93       	push	r31
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT0] != NULL){
    1f18:	80 91 b2 01 	lds	r24, 0x01B2
    1f1c:	90 91 b3 01 	lds	r25, 0x01B3
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	29 f0       	breq	.+10     	; 0x1f2e <__vector_1+0x40>
		EXTI[0]();
    1f24:	e0 91 b2 01 	lds	r30, 0x01B2
    1f28:	f0 91 b3 01 	lds	r31, 0x01B3
    1f2c:	09 95       	icall
	}

}
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	ff 91       	pop	r31
    1f34:	ef 91       	pop	r30
    1f36:	bf 91       	pop	r27
    1f38:	af 91       	pop	r26
    1f3a:	9f 91       	pop	r25
    1f3c:	8f 91       	pop	r24
    1f3e:	7f 91       	pop	r23
    1f40:	6f 91       	pop	r22
    1f42:	5f 91       	pop	r21
    1f44:	4f 91       	pop	r20
    1f46:	3f 91       	pop	r19
    1f48:	2f 91       	pop	r18
    1f4a:	0f 90       	pop	r0
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	0f 90       	pop	r0
    1f50:	1f 90       	pop	r1
    1f52:	18 95       	reti

00001f54 <__vector_2>:


// EXTI 1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    1f54:	1f 92       	push	r1
    1f56:	0f 92       	push	r0
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	0f 92       	push	r0
    1f5c:	11 24       	eor	r1, r1
    1f5e:	2f 93       	push	r18
    1f60:	3f 93       	push	r19
    1f62:	4f 93       	push	r20
    1f64:	5f 93       	push	r21
    1f66:	6f 93       	push	r22
    1f68:	7f 93       	push	r23
    1f6a:	8f 93       	push	r24
    1f6c:	9f 93       	push	r25
    1f6e:	af 93       	push	r26
    1f70:	bf 93       	push	r27
    1f72:	ef 93       	push	r30
    1f74:	ff 93       	push	r31
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT1] != NULL){
    1f7e:	80 91 b4 01 	lds	r24, 0x01B4
    1f82:	90 91 b5 01 	lds	r25, 0x01B5
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	29 f0       	breq	.+10     	; 0x1f94 <__vector_2+0x40>
			EXTI[1]();
    1f8a:	e0 91 b4 01 	lds	r30, 0x01B4
    1f8e:	f0 91 b5 01 	lds	r31, 0x01B5
    1f92:	09 95       	icall
	}

}
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	ff 91       	pop	r31
    1f9a:	ef 91       	pop	r30
    1f9c:	bf 91       	pop	r27
    1f9e:	af 91       	pop	r26
    1fa0:	9f 91       	pop	r25
    1fa2:	8f 91       	pop	r24
    1fa4:	7f 91       	pop	r23
    1fa6:	6f 91       	pop	r22
    1fa8:	5f 91       	pop	r21
    1faa:	4f 91       	pop	r20
    1fac:	3f 91       	pop	r19
    1fae:	2f 91       	pop	r18
    1fb0:	0f 90       	pop	r0
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	0f 90       	pop	r0
    1fb6:	1f 90       	pop	r1
    1fb8:	18 95       	reti

00001fba <__vector_3>:


// EXTI 2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    1fba:	1f 92       	push	r1
    1fbc:	0f 92       	push	r0
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	0f 92       	push	r0
    1fc2:	11 24       	eor	r1, r1
    1fc4:	2f 93       	push	r18
    1fc6:	3f 93       	push	r19
    1fc8:	4f 93       	push	r20
    1fca:	5f 93       	push	r21
    1fcc:	6f 93       	push	r22
    1fce:	7f 93       	push	r23
    1fd0:	8f 93       	push	r24
    1fd2:	9f 93       	push	r25
    1fd4:	af 93       	push	r26
    1fd6:	bf 93       	push	r27
    1fd8:	ef 93       	push	r30
    1fda:	ff 93       	push	r31
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT2] != NULL){
    1fe4:	80 91 b6 01 	lds	r24, 0x01B6
    1fe8:	90 91 b7 01 	lds	r25, 0x01B7
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	29 f0       	breq	.+10     	; 0x1ffa <__vector_3+0x40>
			EXTI[2]();
    1ff0:	e0 91 b6 01 	lds	r30, 0x01B6
    1ff4:	f0 91 b7 01 	lds	r31, 0x01B7
    1ff8:	09 95       	icall
	}

}
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	ff 91       	pop	r31
    2000:	ef 91       	pop	r30
    2002:	bf 91       	pop	r27
    2004:	af 91       	pop	r26
    2006:	9f 91       	pop	r25
    2008:	8f 91       	pop	r24
    200a:	7f 91       	pop	r23
    200c:	6f 91       	pop	r22
    200e:	5f 91       	pop	r21
    2010:	4f 91       	pop	r20
    2012:	3f 91       	pop	r19
    2014:	2f 91       	pop	r18
    2016:	0f 90       	pop	r0
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	0f 90       	pop	r0
    201c:	1f 90       	pop	r1
    201e:	18 95       	reti

00002020 <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    2028:	ea e3       	ldi	r30, 0x3A	; 58
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	10 82       	st	Z, r1
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    202e:	e7 e3       	ldi	r30, 0x37	; 55
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    2034:	e4 e3       	ldi	r30, 0x34	; 52
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	8f ef       	ldi	r24, 0xFF	; 255
    203a:	80 83       	st	Z, r24
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    203c:	e1 e3       	ldi	r30, 0x31	; 49
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	10 82       	st	Z, r1


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
    2042:	eb e3       	ldi	r30, 0x3B	; 59
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
    2048:	e8 e3       	ldi	r30, 0x38	; 56
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	10 82       	st	Z, r1
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
    204e:	e5 e3       	ldi	r30, 0x35	; 53
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
    2054:	e2 e3       	ldi	r30, 0x32	; 50
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	10 82       	st	Z, r1

}
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	2e 97       	sbiw	r28, 0x0e	; 14
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	de bf       	out	0x3e, r29	; 62
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	cd bf       	out	0x3d, r28	; 61
    2074:	8a 83       	std	Y+2, r24	; 0x02
    2076:	6b 83       	std	Y+3, r22	; 0x03
    2078:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	84 30       	cpi	r24, 0x04	; 4
    2082:	08 f0       	brcs	.+2      	; 0x2086 <DIO_u8SetPinDirection+0x26>
    2084:	0c c1       	rjmp	.+536    	; 0x229e <DIO_u8SetPinDirection+0x23e>
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	88 30       	cpi	r24, 0x08	; 8
    208a:	08 f0       	brcs	.+2      	; 0x208e <DIO_u8SetPinDirection+0x2e>
    208c:	08 c1       	rjmp	.+528    	; 0x229e <DIO_u8SetPinDirection+0x23e>
    208e:	8c 81       	ldd	r24, Y+4	; 0x04
    2090:	81 30       	cpi	r24, 0x01	; 1
    2092:	21 f0       	breq	.+8      	; 0x209c <DIO_u8SetPinDirection+0x3c>
    2094:	8c 81       	ldd	r24, Y+4	; 0x04
    2096:	88 23       	and	r24, r24
    2098:	09 f0       	breq	.+2      	; 0x209c <DIO_u8SetPinDirection+0x3c>
    209a:	01 c1       	rjmp	.+514    	; 0x229e <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	3e 87       	std	Y+14, r19	; 0x0e
    20a4:	2d 87       	std	Y+13, r18	; 0x0d
    20a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20aa:	81 30       	cpi	r24, 0x01	; 1
    20ac:	91 05       	cpc	r25, r1
    20ae:	09 f4       	brne	.+2      	; 0x20b2 <DIO_u8SetPinDirection+0x52>
    20b0:	4f c0       	rjmp	.+158    	; 0x2150 <DIO_u8SetPinDirection+0xf0>
    20b2:	2d 85       	ldd	r18, Y+13	; 0x0d
    20b4:	3e 85       	ldd	r19, Y+14	; 0x0e
    20b6:	22 30       	cpi	r18, 0x02	; 2
    20b8:	31 05       	cpc	r19, r1
    20ba:	2c f4       	brge	.+10     	; 0x20c6 <DIO_u8SetPinDirection+0x66>
    20bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20be:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	71 f0       	breq	.+28     	; 0x20e0 <DIO_u8SetPinDirection+0x80>
    20c4:	ed c0       	rjmp	.+474    	; 0x22a0 <DIO_u8SetPinDirection+0x240>
    20c6:	2d 85       	ldd	r18, Y+13	; 0x0d
    20c8:	3e 85       	ldd	r19, Y+14	; 0x0e
    20ca:	22 30       	cpi	r18, 0x02	; 2
    20cc:	31 05       	cpc	r19, r1
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <DIO_u8SetPinDirection+0x72>
    20d0:	77 c0       	rjmp	.+238    	; 0x21c0 <DIO_u8SetPinDirection+0x160>
    20d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d6:	83 30       	cpi	r24, 0x03	; 3
    20d8:	91 05       	cpc	r25, r1
    20da:	09 f4       	brne	.+2      	; 0x20de <DIO_u8SetPinDirection+0x7e>
    20dc:	a9 c0       	rjmp	.+338    	; 0x2230 <DIO_u8SetPinDirection+0x1d0>
    20de:	e0 c0       	rjmp	.+448    	; 0x22a0 <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    20e0:	8c 81       	ldd	r24, Y+4	; 0x04
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	3c 87       	std	Y+12, r19	; 0x0c
    20e8:	2b 87       	std	Y+11, r18	; 0x0b
    20ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    20ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	d1 f0       	breq	.+52     	; 0x2126 <DIO_u8SetPinDirection+0xc6>
    20f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    20f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    20f6:	21 30       	cpi	r18, 0x01	; 1
    20f8:	31 05       	cpc	r19, r1
    20fa:	09 f0       	breq	.+2      	; 0x20fe <DIO_u8SetPinDirection+0x9e>
    20fc:	d1 c0       	rjmp	.+418    	; 0x22a0 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    20fe:	aa e3       	ldi	r26, 0x3A	; 58
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	ea e3       	ldi	r30, 0x3A	; 58
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	48 2f       	mov	r20, r24
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	28 2f       	mov	r18, r24
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	02 2e       	mov	r0, r18
    2116:	02 c0       	rjmp	.+4      	; 0x211c <DIO_u8SetPinDirection+0xbc>
    2118:	88 0f       	add	r24, r24
    211a:	99 1f       	adc	r25, r25
    211c:	0a 94       	dec	r0
    211e:	e2 f7       	brpl	.-8      	; 0x2118 <DIO_u8SetPinDirection+0xb8>
    2120:	84 2b       	or	r24, r20
    2122:	8c 93       	st	X, r24
    2124:	bd c0       	rjmp	.+378    	; 0x22a0 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    2126:	aa e3       	ldi	r26, 0x3A	; 58
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	ea e3       	ldi	r30, 0x3A	; 58
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	48 2f       	mov	r20, r24
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	02 2e       	mov	r0, r18
    213e:	02 c0       	rjmp	.+4      	; 0x2144 <DIO_u8SetPinDirection+0xe4>
    2140:	88 0f       	add	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	0a 94       	dec	r0
    2146:	e2 f7       	brpl	.-8      	; 0x2140 <DIO_u8SetPinDirection+0xe0>
    2148:	80 95       	com	r24
    214a:	84 23       	and	r24, r20
    214c:	8c 93       	st	X, r24
    214e:	a8 c0       	rjmp	.+336    	; 0x22a0 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    2150:	8c 81       	ldd	r24, Y+4	; 0x04
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	3a 87       	std	Y+10, r19	; 0x0a
    2158:	29 87       	std	Y+9, r18	; 0x09
    215a:	89 85       	ldd	r24, Y+9	; 0x09
    215c:	9a 85       	ldd	r25, Y+10	; 0x0a
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	d1 f0       	breq	.+52     	; 0x2196 <DIO_u8SetPinDirection+0x136>
    2162:	29 85       	ldd	r18, Y+9	; 0x09
    2164:	3a 85       	ldd	r19, Y+10	; 0x0a
    2166:	21 30       	cpi	r18, 0x01	; 1
    2168:	31 05       	cpc	r19, r1
    216a:	09 f0       	breq	.+2      	; 0x216e <DIO_u8SetPinDirection+0x10e>
    216c:	99 c0       	rjmp	.+306    	; 0x22a0 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    216e:	a7 e3       	ldi	r26, 0x37	; 55
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e7 e3       	ldi	r30, 0x37	; 55
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	48 2f       	mov	r20, r24
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	28 2f       	mov	r18, r24
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	02 2e       	mov	r0, r18
    2186:	02 c0       	rjmp	.+4      	; 0x218c <DIO_u8SetPinDirection+0x12c>
    2188:	88 0f       	add	r24, r24
    218a:	99 1f       	adc	r25, r25
    218c:	0a 94       	dec	r0
    218e:	e2 f7       	brpl	.-8      	; 0x2188 <DIO_u8SetPinDirection+0x128>
    2190:	84 2b       	or	r24, r20
    2192:	8c 93       	st	X, r24
    2194:	85 c0       	rjmp	.+266    	; 0x22a0 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    2196:	a7 e3       	ldi	r26, 0x37	; 55
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e7 e3       	ldi	r30, 0x37	; 55
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	48 2f       	mov	r20, r24
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	02 2e       	mov	r0, r18
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <DIO_u8SetPinDirection+0x154>
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	0a 94       	dec	r0
    21b6:	e2 f7       	brpl	.-8      	; 0x21b0 <DIO_u8SetPinDirection+0x150>
    21b8:	80 95       	com	r24
    21ba:	84 23       	and	r24, r20
    21bc:	8c 93       	st	X, r24
    21be:	70 c0       	rjmp	.+224    	; 0x22a0 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    21c0:	8c 81       	ldd	r24, Y+4	; 0x04
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	38 87       	std	Y+8, r19	; 0x08
    21c8:	2f 83       	std	Y+7, r18	; 0x07
    21ca:	8f 81       	ldd	r24, Y+7	; 0x07
    21cc:	98 85       	ldd	r25, Y+8	; 0x08
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	d1 f0       	breq	.+52     	; 0x2206 <DIO_u8SetPinDirection+0x1a6>
    21d2:	2f 81       	ldd	r18, Y+7	; 0x07
    21d4:	38 85       	ldd	r19, Y+8	; 0x08
    21d6:	21 30       	cpi	r18, 0x01	; 1
    21d8:	31 05       	cpc	r19, r1
    21da:	09 f0       	breq	.+2      	; 0x21de <DIO_u8SetPinDirection+0x17e>
    21dc:	61 c0       	rjmp	.+194    	; 0x22a0 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    21de:	a4 e3       	ldi	r26, 0x34	; 52
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e4 e3       	ldi	r30, 0x34	; 52
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	48 2f       	mov	r20, r24
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	02 2e       	mov	r0, r18
    21f6:	02 c0       	rjmp	.+4      	; 0x21fc <DIO_u8SetPinDirection+0x19c>
    21f8:	88 0f       	add	r24, r24
    21fa:	99 1f       	adc	r25, r25
    21fc:	0a 94       	dec	r0
    21fe:	e2 f7       	brpl	.-8      	; 0x21f8 <DIO_u8SetPinDirection+0x198>
    2200:	84 2b       	or	r24, r20
    2202:	8c 93       	st	X, r24
    2204:	4d c0       	rjmp	.+154    	; 0x22a0 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    2206:	a4 e3       	ldi	r26, 0x34	; 52
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e4 e3       	ldi	r30, 0x34	; 52
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	48 2f       	mov	r20, r24
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
    2214:	28 2f       	mov	r18, r24
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	02 2e       	mov	r0, r18
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <DIO_u8SetPinDirection+0x1c4>
    2220:	88 0f       	add	r24, r24
    2222:	99 1f       	adc	r25, r25
    2224:	0a 94       	dec	r0
    2226:	e2 f7       	brpl	.-8      	; 0x2220 <DIO_u8SetPinDirection+0x1c0>
    2228:	80 95       	com	r24
    222a:	84 23       	and	r24, r20
    222c:	8c 93       	st	X, r24
    222e:	38 c0       	rjmp	.+112    	; 0x22a0 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    2230:	8c 81       	ldd	r24, Y+4	; 0x04
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	3e 83       	std	Y+6, r19	; 0x06
    2238:	2d 83       	std	Y+5, r18	; 0x05
    223a:	8d 81       	ldd	r24, Y+5	; 0x05
    223c:	9e 81       	ldd	r25, Y+6	; 0x06
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	c9 f0       	breq	.+50     	; 0x2274 <DIO_u8SetPinDirection+0x214>
    2242:	2d 81       	ldd	r18, Y+5	; 0x05
    2244:	3e 81       	ldd	r19, Y+6	; 0x06
    2246:	21 30       	cpi	r18, 0x01	; 1
    2248:	31 05       	cpc	r19, r1
    224a:	51 f5       	brne	.+84     	; 0x22a0 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    224c:	a1 e3       	ldi	r26, 0x31	; 49
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	e1 e3       	ldi	r30, 0x31	; 49
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	48 2f       	mov	r20, r24
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	02 2e       	mov	r0, r18
    2264:	02 c0       	rjmp	.+4      	; 0x226a <DIO_u8SetPinDirection+0x20a>
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	0a 94       	dec	r0
    226c:	e2 f7       	brpl	.-8      	; 0x2266 <DIO_u8SetPinDirection+0x206>
    226e:	84 2b       	or	r24, r20
    2270:	8c 93       	st	X, r24
    2272:	16 c0       	rjmp	.+44     	; 0x22a0 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    2274:	a1 e3       	ldi	r26, 0x31	; 49
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e1 e3       	ldi	r30, 0x31	; 49
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	48 2f       	mov	r20, r24
    2280:	8b 81       	ldd	r24, Y+3	; 0x03
    2282:	28 2f       	mov	r18, r24
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	02 2e       	mov	r0, r18
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <DIO_u8SetPinDirection+0x232>
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	0a 94       	dec	r0
    2294:	e2 f7       	brpl	.-8      	; 0x228e <DIO_u8SetPinDirection+0x22e>
    2296:	80 95       	com	r24
    2298:	84 23       	and	r24, r20
    229a:	8c 93       	st	X, r24
    229c:	01 c0       	rjmp	.+2      	; 0x22a0 <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    229e:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a2:	2e 96       	adiw	r28, 0x0e	; 14
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	de bf       	out	0x3e, r29	; 62
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	cd bf       	out	0x3d, r28	; 61
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	08 95       	ret

000022b4 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	2f 97       	sbiw	r28, 0x0f	; 15
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	8b 83       	std	Y+3, r24	; 0x03
    22ca:	6c 83       	std	Y+4, r22	; 0x04
    22cc:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	84 30       	cpi	r24, 0x04	; 4
    22d6:	08 f0       	brcs	.+2      	; 0x22da <DIO_u8SetPinValue+0x26>
    22d8:	13 c1       	rjmp	.+550    	; 0x2500 <DIO_u8SetPinValue+0x24c>
    22da:	8c 81       	ldd	r24, Y+4	; 0x04
    22dc:	88 30       	cpi	r24, 0x08	; 8
    22de:	08 f0       	brcs	.+2      	; 0x22e2 <DIO_u8SetPinValue+0x2e>
    22e0:	0f c1       	rjmp	.+542    	; 0x2500 <DIO_u8SetPinValue+0x24c>
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
    22e4:	88 23       	and	r24, r24
    22e6:	21 f0       	breq	.+8      	; 0x22f0 <DIO_u8SetPinValue+0x3c>
    22e8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ea:	81 30       	cpi	r24, 0x01	; 1
    22ec:	09 f0       	breq	.+2      	; 0x22f0 <DIO_u8SetPinValue+0x3c>
    22ee:	08 c1       	rjmp	.+528    	; 0x2500 <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	3f 87       	std	Y+15, r19	; 0x0f
    22f8:	2e 87       	std	Y+14, r18	; 0x0e
    22fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    22fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	91 05       	cpc	r25, r1
    2302:	09 f4       	brne	.+2      	; 0x2306 <DIO_u8SetPinValue+0x52>
    2304:	50 c0       	rjmp	.+160    	; 0x23a6 <DIO_u8SetPinValue+0xf2>
    2306:	2e 85       	ldd	r18, Y+14	; 0x0e
    2308:	3f 85       	ldd	r19, Y+15	; 0x0f
    230a:	22 30       	cpi	r18, 0x02	; 2
    230c:	31 05       	cpc	r19, r1
    230e:	2c f4       	brge	.+10     	; 0x231a <DIO_u8SetPinValue+0x66>
    2310:	8e 85       	ldd	r24, Y+14	; 0x0e
    2312:	9f 85       	ldd	r25, Y+15	; 0x0f
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	71 f0       	breq	.+28     	; 0x2334 <DIO_u8SetPinValue+0x80>
    2318:	f4 c0       	rjmp	.+488    	; 0x2502 <DIO_u8SetPinValue+0x24e>
    231a:	2e 85       	ldd	r18, Y+14	; 0x0e
    231c:	3f 85       	ldd	r19, Y+15	; 0x0f
    231e:	22 30       	cpi	r18, 0x02	; 2
    2320:	31 05       	cpc	r19, r1
    2322:	09 f4       	brne	.+2      	; 0x2326 <DIO_u8SetPinValue+0x72>
    2324:	79 c0       	rjmp	.+242    	; 0x2418 <DIO_u8SetPinValue+0x164>
    2326:	8e 85       	ldd	r24, Y+14	; 0x0e
    2328:	9f 85       	ldd	r25, Y+15	; 0x0f
    232a:	83 30       	cpi	r24, 0x03	; 3
    232c:	91 05       	cpc	r25, r1
    232e:	09 f4       	brne	.+2      	; 0x2332 <DIO_u8SetPinValue+0x7e>
    2330:	ad c0       	rjmp	.+346    	; 0x248c <DIO_u8SetPinValue+0x1d8>
    2332:	e7 c0       	rjmp	.+462    	; 0x2502 <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    2334:	8d 81       	ldd	r24, Y+5	; 0x05
    2336:	28 2f       	mov	r18, r24
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	3d 87       	std	Y+13, r19	; 0x0d
    233c:	2c 87       	std	Y+12, r18	; 0x0c
    233e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2340:	9d 85       	ldd	r25, Y+13	; 0x0d
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	c9 f0       	breq	.+50     	; 0x2378 <DIO_u8SetPinValue+0xc4>
    2346:	2c 85       	ldd	r18, Y+12	; 0x0c
    2348:	3d 85       	ldd	r19, Y+13	; 0x0d
    234a:	21 30       	cpi	r18, 0x01	; 1
    234c:	31 05       	cpc	r19, r1
    234e:	49 f5       	brne	.+82     	; 0x23a2 <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    2350:	ab e3       	ldi	r26, 0x3B	; 59
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	eb e3       	ldi	r30, 0x3B	; 59
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	48 2f       	mov	r20, r24
    235c:	8c 81       	ldd	r24, Y+4	; 0x04
    235e:	28 2f       	mov	r18, r24
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	02 2e       	mov	r0, r18
    2368:	02 c0       	rjmp	.+4      	; 0x236e <DIO_u8SetPinValue+0xba>
    236a:	88 0f       	add	r24, r24
    236c:	99 1f       	adc	r25, r25
    236e:	0a 94       	dec	r0
    2370:	e2 f7       	brpl	.-8      	; 0x236a <DIO_u8SetPinValue+0xb6>
    2372:	84 2b       	or	r24, r20
    2374:	8c 93       	st	X, r24
    2376:	c5 c0       	rjmp	.+394    	; 0x2502 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    2378:	ab e3       	ldi	r26, 0x3B	; 59
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	eb e3       	ldi	r30, 0x3B	; 59
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	48 2f       	mov	r20, r24
    2384:	8c 81       	ldd	r24, Y+4	; 0x04
    2386:	28 2f       	mov	r18, r24
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	02 2e       	mov	r0, r18
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <DIO_u8SetPinValue+0xe2>
    2392:	88 0f       	add	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	0a 94       	dec	r0
    2398:	e2 f7       	brpl	.-8      	; 0x2392 <DIO_u8SetPinValue+0xde>
    239a:	80 95       	com	r24
    239c:	84 23       	and	r24, r20
    239e:	8c 93       	st	X, r24
    23a0:	b0 c0       	rjmp	.+352    	; 0x2502 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    23a2:	1a 82       	std	Y+2, r1	; 0x02
    23a4:	ae c0       	rjmp	.+348    	; 0x2502 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    23a6:	8d 81       	ldd	r24, Y+5	; 0x05
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	3b 87       	std	Y+11, r19	; 0x0b
    23ae:	2a 87       	std	Y+10, r18	; 0x0a
    23b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    23b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    23b4:	00 97       	sbiw	r24, 0x00	; 0
    23b6:	c9 f0       	breq	.+50     	; 0x23ea <DIO_u8SetPinValue+0x136>
    23b8:	2a 85       	ldd	r18, Y+10	; 0x0a
    23ba:	3b 85       	ldd	r19, Y+11	; 0x0b
    23bc:	21 30       	cpi	r18, 0x01	; 1
    23be:	31 05       	cpc	r19, r1
    23c0:	49 f5       	brne	.+82     	; 0x2414 <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    23c2:	a8 e3       	ldi	r26, 0x38	; 56
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	e8 e3       	ldi	r30, 0x38	; 56
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	48 2f       	mov	r20, r24
    23ce:	8c 81       	ldd	r24, Y+4	; 0x04
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	02 2e       	mov	r0, r18
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <DIO_u8SetPinValue+0x12c>
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	0a 94       	dec	r0
    23e2:	e2 f7       	brpl	.-8      	; 0x23dc <DIO_u8SetPinValue+0x128>
    23e4:	84 2b       	or	r24, r20
    23e6:	8c 93       	st	X, r24
    23e8:	8c c0       	rjmp	.+280    	; 0x2502 <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    23ea:	a8 e3       	ldi	r26, 0x38	; 56
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e8 e3       	ldi	r30, 0x38	; 56
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	48 2f       	mov	r20, r24
    23f6:	8c 81       	ldd	r24, Y+4	; 0x04
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	02 2e       	mov	r0, r18
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <DIO_u8SetPinValue+0x154>
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	0a 94       	dec	r0
    240a:	e2 f7       	brpl	.-8      	; 0x2404 <DIO_u8SetPinValue+0x150>
    240c:	80 95       	com	r24
    240e:	84 23       	and	r24, r20
    2410:	8c 93       	st	X, r24
    2412:	77 c0       	rjmp	.+238    	; 0x2502 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    2414:	1a 82       	std	Y+2, r1	; 0x02
    2416:	75 c0       	rjmp	.+234    	; 0x2502 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	28 2f       	mov	r18, r24
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	39 87       	std	Y+9, r19	; 0x09
    2420:	28 87       	std	Y+8, r18	; 0x08
    2422:	88 85       	ldd	r24, Y+8	; 0x08
    2424:	99 85       	ldd	r25, Y+9	; 0x09
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	31 f0       	breq	.+12     	; 0x2436 <DIO_u8SetPinValue+0x182>
    242a:	28 85       	ldd	r18, Y+8	; 0x08
    242c:	39 85       	ldd	r19, Y+9	; 0x09
    242e:	21 30       	cpi	r18, 0x01	; 1
    2430:	31 05       	cpc	r19, r1
    2432:	b1 f0       	breq	.+44     	; 0x2460 <DIO_u8SetPinValue+0x1ac>
    2434:	29 c0       	rjmp	.+82     	; 0x2488 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    2436:	a5 e3       	ldi	r26, 0x35	; 53
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e5 e3       	ldi	r30, 0x35	; 53
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	48 2f       	mov	r20, r24
    2442:	8c 81       	ldd	r24, Y+4	; 0x04
    2444:	28 2f       	mov	r18, r24
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	02 2e       	mov	r0, r18
    244e:	02 c0       	rjmp	.+4      	; 0x2454 <DIO_u8SetPinValue+0x1a0>
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	0a 94       	dec	r0
    2456:	e2 f7       	brpl	.-8      	; 0x2450 <DIO_u8SetPinValue+0x19c>
    2458:	80 95       	com	r24
    245a:	84 23       	and	r24, r20
    245c:	8c 93       	st	X, r24
    245e:	51 c0       	rjmp	.+162    	; 0x2502 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    2460:	a5 e3       	ldi	r26, 0x35	; 53
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	e5 e3       	ldi	r30, 0x35	; 53
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	48 2f       	mov	r20, r24
    246c:	8c 81       	ldd	r24, Y+4	; 0x04
    246e:	28 2f       	mov	r18, r24
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	02 2e       	mov	r0, r18
    2478:	02 c0       	rjmp	.+4      	; 0x247e <DIO_u8SetPinValue+0x1ca>
    247a:	88 0f       	add	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	0a 94       	dec	r0
    2480:	e2 f7       	brpl	.-8      	; 0x247a <DIO_u8SetPinValue+0x1c6>
    2482:	84 2b       	or	r24, r20
    2484:	8c 93       	st	X, r24
    2486:	3d c0       	rjmp	.+122    	; 0x2502 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    2488:	1a 82       	std	Y+2, r1	; 0x02
    248a:	3b c0       	rjmp	.+118    	; 0x2502 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    248c:	8d 81       	ldd	r24, Y+5	; 0x05
    248e:	28 2f       	mov	r18, r24
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	3f 83       	std	Y+7, r19	; 0x07
    2494:	2e 83       	std	Y+6, r18	; 0x06
    2496:	8e 81       	ldd	r24, Y+6	; 0x06
    2498:	9f 81       	ldd	r25, Y+7	; 0x07
    249a:	00 97       	sbiw	r24, 0x00	; 0
    249c:	31 f0       	breq	.+12     	; 0x24aa <DIO_u8SetPinValue+0x1f6>
    249e:	2e 81       	ldd	r18, Y+6	; 0x06
    24a0:	3f 81       	ldd	r19, Y+7	; 0x07
    24a2:	21 30       	cpi	r18, 0x01	; 1
    24a4:	31 05       	cpc	r19, r1
    24a6:	b1 f0       	breq	.+44     	; 0x24d4 <DIO_u8SetPinValue+0x220>
    24a8:	29 c0       	rjmp	.+82     	; 0x24fc <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    24aa:	a5 e3       	ldi	r26, 0x35	; 53
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	e5 e3       	ldi	r30, 0x35	; 53
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	48 2f       	mov	r20, r24
    24b6:	8c 81       	ldd	r24, Y+4	; 0x04
    24b8:	28 2f       	mov	r18, r24
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	02 2e       	mov	r0, r18
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <DIO_u8SetPinValue+0x214>
    24c4:	88 0f       	add	r24, r24
    24c6:	99 1f       	adc	r25, r25
    24c8:	0a 94       	dec	r0
    24ca:	e2 f7       	brpl	.-8      	; 0x24c4 <DIO_u8SetPinValue+0x210>
    24cc:	80 95       	com	r24
    24ce:	84 23       	and	r24, r20
    24d0:	8c 93       	st	X, r24
    24d2:	17 c0       	rjmp	.+46     	; 0x2502 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    24d4:	a2 e3       	ldi	r26, 0x32	; 50
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e2 e3       	ldi	r30, 0x32	; 50
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	48 2f       	mov	r20, r24
    24e0:	8c 81       	ldd	r24, Y+4	; 0x04
    24e2:	28 2f       	mov	r18, r24
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	02 2e       	mov	r0, r18
    24ec:	02 c0       	rjmp	.+4      	; 0x24f2 <DIO_u8SetPinValue+0x23e>
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	0a 94       	dec	r0
    24f4:	e2 f7       	brpl	.-8      	; 0x24ee <DIO_u8SetPinValue+0x23a>
    24f6:	84 2b       	or	r24, r20
    24f8:	8c 93       	st	X, r24
    24fa:	03 c0       	rjmp	.+6      	; 0x2502 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    24fc:	1a 82       	std	Y+2, r1	; 0x02
    24fe:	01 c0       	rjmp	.+2      	; 0x2502 <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    2500:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2502:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2504:	2f 96       	adiw	r28, 0x0f	; 15
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	28 97       	sbiw	r28, 0x08	; 8
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
    252a:	8b 83       	std	Y+3, r24	; 0x03
    252c:	6c 83       	std	Y+4, r22	; 0x04
    252e:	5e 83       	std	Y+6, r21	; 0x06
    2530:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	84 30       	cpi	r24, 0x04	; 4
    253a:	08 f0       	brcs	.+2      	; 0x253e <DIO_u8GetPinValue+0x28>
    253c:	9f c0       	rjmp	.+318    	; 0x267c <DIO_u8GetPinValue+0x166>
    253e:	8c 81       	ldd	r24, Y+4	; 0x04
    2540:	88 30       	cpi	r24, 0x08	; 8
    2542:	08 f0       	brcs	.+2      	; 0x2546 <DIO_u8GetPinValue+0x30>
    2544:	9b c0       	rjmp	.+310    	; 0x267c <DIO_u8GetPinValue+0x166>
    2546:	8d 81       	ldd	r24, Y+5	; 0x05
    2548:	9e 81       	ldd	r25, Y+6	; 0x06
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	09 f4       	brne	.+2      	; 0x2550 <DIO_u8GetPinValue+0x3a>
    254e:	96 c0       	rjmp	.+300    	; 0x267c <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    2550:	8b 81       	ldd	r24, Y+3	; 0x03
    2552:	28 2f       	mov	r18, r24
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	38 87       	std	Y+8, r19	; 0x08
    2558:	2f 83       	std	Y+7, r18	; 0x07
    255a:	4f 81       	ldd	r20, Y+7	; 0x07
    255c:	58 85       	ldd	r21, Y+8	; 0x08
    255e:	41 30       	cpi	r20, 0x01	; 1
    2560:	51 05       	cpc	r21, r1
    2562:	a9 f1       	breq	.+106    	; 0x25ce <DIO_u8GetPinValue+0xb8>
    2564:	8f 81       	ldd	r24, Y+7	; 0x07
    2566:	98 85       	ldd	r25, Y+8	; 0x08
    2568:	82 30       	cpi	r24, 0x02	; 2
    256a:	91 05       	cpc	r25, r1
    256c:	34 f4       	brge	.+12     	; 0x257a <DIO_u8GetPinValue+0x64>
    256e:	2f 81       	ldd	r18, Y+7	; 0x07
    2570:	38 85       	ldd	r19, Y+8	; 0x08
    2572:	21 15       	cp	r18, r1
    2574:	31 05       	cpc	r19, r1
    2576:	71 f0       	breq	.+28     	; 0x2594 <DIO_u8GetPinValue+0x7e>
    2578:	82 c0       	rjmp	.+260    	; 0x267e <DIO_u8GetPinValue+0x168>
    257a:	4f 81       	ldd	r20, Y+7	; 0x07
    257c:	58 85       	ldd	r21, Y+8	; 0x08
    257e:	42 30       	cpi	r20, 0x02	; 2
    2580:	51 05       	cpc	r21, r1
    2582:	09 f4       	brne	.+2      	; 0x2586 <DIO_u8GetPinValue+0x70>
    2584:	41 c0       	rjmp	.+130    	; 0x2608 <DIO_u8GetPinValue+0xf2>
    2586:	8f 81       	ldd	r24, Y+7	; 0x07
    2588:	98 85       	ldd	r25, Y+8	; 0x08
    258a:	83 30       	cpi	r24, 0x03	; 3
    258c:	91 05       	cpc	r25, r1
    258e:	09 f4       	brne	.+2      	; 0x2592 <DIO_u8GetPinValue+0x7c>
    2590:	58 c0       	rjmp	.+176    	; 0x2642 <DIO_u8GetPinValue+0x12c>
    2592:	75 c0       	rjmp	.+234    	; 0x267e <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    2594:	e9 e3       	ldi	r30, 0x39	; 57
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	8c 81       	ldd	r24, Y+4	; 0x04
    25a0:	88 2f       	mov	r24, r24
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	a9 01       	movw	r20, r18
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <DIO_u8GetPinValue+0x96>
    25a8:	55 95       	asr	r21
    25aa:	47 95       	ror	r20
    25ac:	8a 95       	dec	r24
    25ae:	e2 f7       	brpl	.-8      	; 0x25a8 <DIO_u8GetPinValue+0x92>
    25b0:	ca 01       	movw	r24, r20
    25b2:	81 70       	andi	r24, 0x01	; 1
    25b4:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	88 23       	and	r24, r24
    25ba:	21 f4       	brne	.+8      	; 0x25c4 <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    25bc:	ed 81       	ldd	r30, Y+5	; 0x05
    25be:	fe 81       	ldd	r31, Y+6	; 0x06
    25c0:	10 82       	st	Z, r1
    25c2:	5d c0       	rjmp	.+186    	; 0x267e <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    25c4:	ed 81       	ldd	r30, Y+5	; 0x05
    25c6:	fe 81       	ldd	r31, Y+6	; 0x06
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	80 83       	st	Z, r24
    25cc:	58 c0       	rjmp	.+176    	; 0x267e <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    25ce:	e6 e3       	ldi	r30, 0x36	; 54
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	8c 81       	ldd	r24, Y+4	; 0x04
    25da:	88 2f       	mov	r24, r24
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	a9 01       	movw	r20, r18
    25e0:	02 c0       	rjmp	.+4      	; 0x25e6 <DIO_u8GetPinValue+0xd0>
    25e2:	55 95       	asr	r21
    25e4:	47 95       	ror	r20
    25e6:	8a 95       	dec	r24
    25e8:	e2 f7       	brpl	.-8      	; 0x25e2 <DIO_u8GetPinValue+0xcc>
    25ea:	ca 01       	movw	r24, r20
    25ec:	81 70       	andi	r24, 0x01	; 1
    25ee:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	88 23       	and	r24, r24
    25f4:	21 f4       	brne	.+8      	; 0x25fe <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    25f6:	ed 81       	ldd	r30, Y+5	; 0x05
    25f8:	fe 81       	ldd	r31, Y+6	; 0x06
    25fa:	10 82       	st	Z, r1
    25fc:	40 c0       	rjmp	.+128    	; 0x267e <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    25fe:	ed 81       	ldd	r30, Y+5	; 0x05
    2600:	fe 81       	ldd	r31, Y+6	; 0x06
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	80 83       	st	Z, r24
    2606:	3b c0       	rjmp	.+118    	; 0x267e <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    2608:	e3 e3       	ldi	r30, 0x33	; 51
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	28 2f       	mov	r18, r24
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	8c 81       	ldd	r24, Y+4	; 0x04
    2614:	88 2f       	mov	r24, r24
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	a9 01       	movw	r20, r18
    261a:	02 c0       	rjmp	.+4      	; 0x2620 <DIO_u8GetPinValue+0x10a>
    261c:	55 95       	asr	r21
    261e:	47 95       	ror	r20
    2620:	8a 95       	dec	r24
    2622:	e2 f7       	brpl	.-8      	; 0x261c <DIO_u8GetPinValue+0x106>
    2624:	ca 01       	movw	r24, r20
    2626:	81 70       	andi	r24, 0x01	; 1
    2628:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	88 23       	and	r24, r24
    262e:	21 f4       	brne	.+8      	; 0x2638 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    2630:	ed 81       	ldd	r30, Y+5	; 0x05
    2632:	fe 81       	ldd	r31, Y+6	; 0x06
    2634:	10 82       	st	Z, r1
    2636:	23 c0       	rjmp	.+70     	; 0x267e <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    2638:	ed 81       	ldd	r30, Y+5	; 0x05
    263a:	fe 81       	ldd	r31, Y+6	; 0x06
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	80 83       	st	Z, r24
    2640:	1e c0       	rjmp	.+60     	; 0x267e <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    2642:	e0 e3       	ldi	r30, 0x30	; 48
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	80 81       	ld	r24, Z
    2648:	28 2f       	mov	r18, r24
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	8c 81       	ldd	r24, Y+4	; 0x04
    264e:	88 2f       	mov	r24, r24
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	a9 01       	movw	r20, r18
    2654:	02 c0       	rjmp	.+4      	; 0x265a <DIO_u8GetPinValue+0x144>
    2656:	55 95       	asr	r21
    2658:	47 95       	ror	r20
    265a:	8a 95       	dec	r24
    265c:	e2 f7       	brpl	.-8      	; 0x2656 <DIO_u8GetPinValue+0x140>
    265e:	ca 01       	movw	r24, r20
    2660:	81 70       	andi	r24, 0x01	; 1
    2662:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	88 23       	and	r24, r24
    2668:	21 f4       	brne	.+8      	; 0x2672 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    266a:	ed 81       	ldd	r30, Y+5	; 0x05
    266c:	fe 81       	ldd	r31, Y+6	; 0x06
    266e:	10 82       	st	Z, r1
    2670:	06 c0       	rjmp	.+12     	; 0x267e <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    2672:	ed 81       	ldd	r30, Y+5	; 0x05
    2674:	fe 81       	ldd	r31, Y+6	; 0x06
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	80 83       	st	Z, r24
    267a:	01 c0       	rjmp	.+2      	; 0x267e <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    267c:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    267e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2680:	28 96       	adiw	r28, 0x08	; 8
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	f8 94       	cli
    2686:	de bf       	out	0x3e, r29	; 62
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	cd bf       	out	0x3d, r28	; 61
    268c:	cf 91       	pop	r28
    268e:	df 91       	pop	r29
    2690:	08 95       	ret

00002692 <DIO_getPinValueWithoutPointer>:


u8 DIO_getPinValueWithoutPointer(u8 port_num, u8 pin_num)
{
    2692:	df 93       	push	r29
    2694:	cf 93       	push	r28
    2696:	00 d0       	rcall	.+0      	; 0x2698 <DIO_getPinValueWithoutPointer+0x6>
    2698:	00 d0       	rcall	.+0      	; 0x269a <DIO_getPinValueWithoutPointer+0x8>
    269a:	0f 92       	push	r0
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	8a 83       	std	Y+2, r24	; 0x02
    26a2:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = DIO_u8_LOW;
    26a4:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	88 30       	cpi	r24, 0x08	; 8
    26aa:	08 f0       	brcs	.+2      	; 0x26ae <DIO_getPinValueWithoutPointer+0x1c>
    26ac:	6b c0       	rjmp	.+214    	; 0x2784 <DIO_getPinValueWithoutPointer+0xf2>
    26ae:	8a 81       	ldd	r24, Y+2	; 0x02
    26b0:	84 30       	cpi	r24, 0x04	; 4
    26b2:	08 f0       	brcs	.+2      	; 0x26b6 <DIO_getPinValueWithoutPointer+0x24>
    26b4:	67 c0       	rjmp	.+206    	; 0x2784 <DIO_getPinValueWithoutPointer+0xf2>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	28 2f       	mov	r18, r24
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	3d 83       	std	Y+5, r19	; 0x05
    26be:	2c 83       	std	Y+4, r18	; 0x04
    26c0:	4c 81       	ldd	r20, Y+4	; 0x04
    26c2:	5d 81       	ldd	r21, Y+5	; 0x05
    26c4:	41 30       	cpi	r20, 0x01	; 1
    26c6:	51 05       	cpc	r21, r1
    26c8:	41 f1       	breq	.+80     	; 0x271a <DIO_getPinValueWithoutPointer+0x88>
    26ca:	8c 81       	ldd	r24, Y+4	; 0x04
    26cc:	9d 81       	ldd	r25, Y+5	; 0x05
    26ce:	82 30       	cpi	r24, 0x02	; 2
    26d0:	91 05       	cpc	r25, r1
    26d2:	34 f4       	brge	.+12     	; 0x26e0 <DIO_getPinValueWithoutPointer+0x4e>
    26d4:	2c 81       	ldd	r18, Y+4	; 0x04
    26d6:	3d 81       	ldd	r19, Y+5	; 0x05
    26d8:	21 15       	cp	r18, r1
    26da:	31 05       	cpc	r19, r1
    26dc:	61 f0       	breq	.+24     	; 0x26f6 <DIO_getPinValueWithoutPointer+0x64>
    26de:	52 c0       	rjmp	.+164    	; 0x2784 <DIO_getPinValueWithoutPointer+0xf2>
    26e0:	4c 81       	ldd	r20, Y+4	; 0x04
    26e2:	5d 81       	ldd	r21, Y+5	; 0x05
    26e4:	42 30       	cpi	r20, 0x02	; 2
    26e6:	51 05       	cpc	r21, r1
    26e8:	51 f1       	breq	.+84     	; 0x273e <DIO_getPinValueWithoutPointer+0xac>
    26ea:	8c 81       	ldd	r24, Y+4	; 0x04
    26ec:	9d 81       	ldd	r25, Y+5	; 0x05
    26ee:	83 30       	cpi	r24, 0x03	; 3
    26f0:	91 05       	cpc	r25, r1
    26f2:	b9 f1       	breq	.+110    	; 0x2762 <DIO_getPinValueWithoutPointer+0xd0>
    26f4:	47 c0       	rjmp	.+142    	; 0x2784 <DIO_getPinValueWithoutPointer+0xf2>
				{
				case DIO_u8_PORTA:
					pin_value = GET_BIT(DIO_u8_PINA_REG, pin_num);
    26f6:	e9 e3       	ldi	r30, 0x39	; 57
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	80 81       	ld	r24, Z
    26fc:	28 2f       	mov	r18, r24
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	8b 81       	ldd	r24, Y+3	; 0x03
    2702:	88 2f       	mov	r24, r24
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	a9 01       	movw	r20, r18
    2708:	02 c0       	rjmp	.+4      	; 0x270e <DIO_getPinValueWithoutPointer+0x7c>
    270a:	55 95       	asr	r21
    270c:	47 95       	ror	r20
    270e:	8a 95       	dec	r24
    2710:	e2 f7       	brpl	.-8      	; 0x270a <DIO_getPinValueWithoutPointer+0x78>
    2712:	ca 01       	movw	r24, r20
    2714:	81 70       	andi	r24, 0x01	; 1
    2716:	89 83       	std	Y+1, r24	; 0x01
    2718:	35 c0       	rjmp	.+106    	; 0x2784 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTB:
					pin_value = GET_BIT(DIO_u8_PINB_REG, pin_num);
    271a:	e6 e3       	ldi	r30, 0x36	; 54
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	28 2f       	mov	r18, r24
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	88 2f       	mov	r24, r24
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	a9 01       	movw	r20, r18
    272c:	02 c0       	rjmp	.+4      	; 0x2732 <DIO_getPinValueWithoutPointer+0xa0>
    272e:	55 95       	asr	r21
    2730:	47 95       	ror	r20
    2732:	8a 95       	dec	r24
    2734:	e2 f7       	brpl	.-8      	; 0x272e <DIO_getPinValueWithoutPointer+0x9c>
    2736:	ca 01       	movw	r24, r20
    2738:	81 70       	andi	r24, 0x01	; 1
    273a:	89 83       	std	Y+1, r24	; 0x01
    273c:	23 c0       	rjmp	.+70     	; 0x2784 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTC:
					pin_value = GET_BIT(DIO_u8_PINC_REG, pin_num);
    273e:	e3 e3       	ldi	r30, 0x33	; 51
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	28 2f       	mov	r18, r24
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	88 2f       	mov	r24, r24
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	a9 01       	movw	r20, r18
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <DIO_getPinValueWithoutPointer+0xc4>
    2752:	55 95       	asr	r21
    2754:	47 95       	ror	r20
    2756:	8a 95       	dec	r24
    2758:	e2 f7       	brpl	.-8      	; 0x2752 <DIO_getPinValueWithoutPointer+0xc0>
    275a:	ca 01       	movw	r24, r20
    275c:	81 70       	andi	r24, 0x01	; 1
    275e:	89 83       	std	Y+1, r24	; 0x01
    2760:	11 c0       	rjmp	.+34     	; 0x2784 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTD:
					pin_value = GET_BIT(DIO_u8_PIND_REG, pin_num);
    2762:	e0 e3       	ldi	r30, 0x30	; 48
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	28 2f       	mov	r18, r24
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	88 2f       	mov	r24, r24
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	a9 01       	movw	r20, r18
    2774:	02 c0       	rjmp	.+4      	; 0x277a <DIO_getPinValueWithoutPointer+0xe8>
    2776:	55 95       	asr	r21
    2778:	47 95       	ror	r20
    277a:	8a 95       	dec	r24
    277c:	e2 f7       	brpl	.-8      	; 0x2776 <DIO_getPinValueWithoutPointer+0xe4>
    277e:	ca 01       	movw	r24, r20
    2780:	81 70       	andi	r24, 0x01	; 1
    2782:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
	}

	return pin_value;
    2784:	89 81       	ldd	r24, Y+1	; 0x01
}
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	cf 91       	pop	r28
    2792:	df 91       	pop	r29
    2794:	08 95       	ret

00002796 <DIO_u8SetPortDirection>:




u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    2796:	df 93       	push	r29
    2798:	cf 93       	push	r28
    279a:	cd b7       	in	r28, 0x3d	; 61
    279c:	de b7       	in	r29, 0x3e	; 62
    279e:	2d 97       	sbiw	r28, 0x0d	; 13
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	de bf       	out	0x3e, r29	; 62
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	cd bf       	out	0x3d, r28	; 61
    27aa:	89 83       	std	Y+1, r24	; 0x01
    27ac:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	28 2f       	mov	r18, r24
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	3c 87       	std	Y+12, r19	; 0x0c
    27b6:	2b 87       	std	Y+11, r18	; 0x0b
    27b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    27ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    27bc:	81 30       	cpi	r24, 0x01	; 1
    27be:	91 05       	cpc	r25, r1
    27c0:	71 f1       	breq	.+92     	; 0x281e <DIO_u8SetPortDirection+0x88>
    27c2:	2b 85       	ldd	r18, Y+11	; 0x0b
    27c4:	3c 85       	ldd	r19, Y+12	; 0x0c
    27c6:	22 30       	cpi	r18, 0x02	; 2
    27c8:	31 05       	cpc	r19, r1
    27ca:	2c f4       	brge	.+10     	; 0x27d6 <DIO_u8SetPortDirection+0x40>
    27cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    27ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	69 f0       	breq	.+26     	; 0x27ee <DIO_u8SetPortDirection+0x58>
    27d4:	6b c0       	rjmp	.+214    	; 0x28ac <DIO_u8SetPortDirection+0x116>
    27d6:	2b 85       	ldd	r18, Y+11	; 0x0b
    27d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    27da:	22 30       	cpi	r18, 0x02	; 2
    27dc:	31 05       	cpc	r19, r1
    27de:	b9 f1       	breq	.+110    	; 0x284e <DIO_u8SetPortDirection+0xb8>
    27e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    27e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    27e4:	83 30       	cpi	r24, 0x03	; 3
    27e6:	91 05       	cpc	r25, r1
    27e8:	09 f4       	brne	.+2      	; 0x27ec <DIO_u8SetPortDirection+0x56>
    27ea:	49 c0       	rjmp	.+146    	; 0x287e <DIO_u8SetPortDirection+0xe8>
    27ec:	5f c0       	rjmp	.+190    	; 0x28ac <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	28 2f       	mov	r18, r24
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	3a 87       	std	Y+10, r19	; 0x0a
    27f6:	29 87       	std	Y+9, r18	; 0x09
    27f8:	89 85       	ldd	r24, Y+9	; 0x09
    27fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	31 f0       	breq	.+12     	; 0x280c <DIO_u8SetPortDirection+0x76>
    2800:	29 85       	ldd	r18, Y+9	; 0x09
    2802:	3a 85       	ldd	r19, Y+10	; 0x0a
    2804:	21 30       	cpi	r18, 0x01	; 1
    2806:	31 05       	cpc	r19, r1
    2808:	29 f0       	breq	.+10     	; 0x2814 <DIO_u8SetPortDirection+0x7e>
    280a:	50 c0       	rjmp	.+160    	; 0x28ac <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    280c:	ea e3       	ldi	r30, 0x3A	; 58
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	10 82       	st	Z, r1
    2812:	4c c0       	rjmp	.+152    	; 0x28ac <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    2814:	ea e3       	ldi	r30, 0x3A	; 58
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	8f ef       	ldi	r24, 0xFF	; 255
    281a:	80 83       	st	Z, r24
    281c:	47 c0       	rjmp	.+142    	; 0x28ac <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	28 2f       	mov	r18, r24
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	38 87       	std	Y+8, r19	; 0x08
    2826:	2f 83       	std	Y+7, r18	; 0x07
    2828:	8f 81       	ldd	r24, Y+7	; 0x07
    282a:	98 85       	ldd	r25, Y+8	; 0x08
    282c:	00 97       	sbiw	r24, 0x00	; 0
    282e:	31 f0       	breq	.+12     	; 0x283c <DIO_u8SetPortDirection+0xa6>
    2830:	2f 81       	ldd	r18, Y+7	; 0x07
    2832:	38 85       	ldd	r19, Y+8	; 0x08
    2834:	21 30       	cpi	r18, 0x01	; 1
    2836:	31 05       	cpc	r19, r1
    2838:	29 f0       	breq	.+10     	; 0x2844 <DIO_u8SetPortDirection+0xae>
    283a:	38 c0       	rjmp	.+112    	; 0x28ac <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    283c:	e7 e3       	ldi	r30, 0x37	; 55
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	10 82       	st	Z, r1
    2842:	34 c0       	rjmp	.+104    	; 0x28ac <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    2844:	e7 e3       	ldi	r30, 0x37	; 55
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	8f ef       	ldi	r24, 0xFF	; 255
    284a:	80 83       	st	Z, r24
    284c:	2f c0       	rjmp	.+94     	; 0x28ac <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    284e:	8a 81       	ldd	r24, Y+2	; 0x02
    2850:	28 2f       	mov	r18, r24
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	3e 83       	std	Y+6, r19	; 0x06
    2856:	2d 83       	std	Y+5, r18	; 0x05
    2858:	8d 81       	ldd	r24, Y+5	; 0x05
    285a:	9e 81       	ldd	r25, Y+6	; 0x06
    285c:	00 97       	sbiw	r24, 0x00	; 0
    285e:	31 f0       	breq	.+12     	; 0x286c <DIO_u8SetPortDirection+0xd6>
    2860:	2d 81       	ldd	r18, Y+5	; 0x05
    2862:	3e 81       	ldd	r19, Y+6	; 0x06
    2864:	21 30       	cpi	r18, 0x01	; 1
    2866:	31 05       	cpc	r19, r1
    2868:	29 f0       	breq	.+10     	; 0x2874 <DIO_u8SetPortDirection+0xde>
    286a:	20 c0       	rjmp	.+64     	; 0x28ac <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    286c:	e4 e3       	ldi	r30, 0x34	; 52
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	10 82       	st	Z, r1
    2872:	1c c0       	rjmp	.+56     	; 0x28ac <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    2874:	e4 e3       	ldi	r30, 0x34	; 52
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	8f ef       	ldi	r24, 0xFF	; 255
    287a:	80 83       	st	Z, r24
    287c:	17 c0       	rjmp	.+46     	; 0x28ac <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    287e:	8a 81       	ldd	r24, Y+2	; 0x02
    2880:	28 2f       	mov	r18, r24
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	3c 83       	std	Y+4, r19	; 0x04
    2886:	2b 83       	std	Y+3, r18	; 0x03
    2888:	8b 81       	ldd	r24, Y+3	; 0x03
    288a:	9c 81       	ldd	r25, Y+4	; 0x04
    288c:	00 97       	sbiw	r24, 0x00	; 0
    288e:	31 f0       	breq	.+12     	; 0x289c <DIO_u8SetPortDirection+0x106>
    2890:	2b 81       	ldd	r18, Y+3	; 0x03
    2892:	3c 81       	ldd	r19, Y+4	; 0x04
    2894:	21 30       	cpi	r18, 0x01	; 1
    2896:	31 05       	cpc	r19, r1
    2898:	29 f0       	breq	.+10     	; 0x28a4 <DIO_u8SetPortDirection+0x10e>
    289a:	08 c0       	rjmp	.+16     	; 0x28ac <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    289c:	e1 e3       	ldi	r30, 0x31	; 49
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	10 82       	st	Z, r1
    28a2:	04 c0       	rjmp	.+8      	; 0x28ac <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    28a4:	e1 e3       	ldi	r30, 0x31	; 49
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	8f ef       	ldi	r24, 0xFF	; 255
    28aa:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    28ac:	2d 96       	adiw	r28, 0x0d	; 13
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	f8 94       	cli
    28b2:	de bf       	out	0x3e, r29	; 62
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	cd bf       	out	0x3d, r28	; 61
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <ADC_void_Init>:

/* ADC Busy Flag */
static u8 ADC_u8BusyFlag = 0;


void ADC_void_Init(void){
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
	// Select Voltage Referance
	#if ADC_REF_VOLTAGE_MODE == AVCC
	   CLR_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS1);
    28c6:	a7 e2       	ldi	r26, 0x27	; 39
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	e7 e2       	ldi	r30, 0x27	; 39
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	8f 77       	andi	r24, 0x7F	; 127
    28d2:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
    28d4:	a7 e2       	ldi	r26, 0x27	; 39
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	e7 e2       	ldi	r30, 0x27	; 39
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	80 64       	ori	r24, 0x40	; 64
    28e0:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
	   #endif

	// Select Presentaion Mode
	#if ADC_PRESENTATION_MODE == Right_Adjust
	   CLR_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
    28e2:	a7 e2       	ldi	r26, 0x27	; 39
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	e7 e2       	ldi	r30, 0x27	; 39
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	80 81       	ld	r24, Z
    28ec:	8f 7d       	andi	r24, 0xDF	; 223
    28ee:	8c 93       	st	X, r24
   #elif ADC_PRESENTATION_MODE == Left_Adjust
	   SET_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
   #endif

	// Disable Auto Trigger
	CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADATE);
    28f0:	a6 e2       	ldi	r26, 0x26	; 38
    28f2:	b0 e0       	ldi	r27, 0x00	; 0
    28f4:	e6 e2       	ldi	r30, 0x26	; 38
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
    28fa:	8f 7d       	andi	r24, 0xDF	; 223
    28fc:	8c 93       	st	X, r24
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_32
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_64
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
    28fe:	a6 e2       	ldi	r26, 0x26	; 38
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e6 e2       	ldi	r30, 0x26	; 38
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	84 60       	ori	r24, 0x04	; 4
    290a:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
    290c:	a6 e2       	ldi	r26, 0x26	; 38
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	e6 e2       	ldi	r30, 0x26	; 38
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	82 60       	ori	r24, 0x02	; 2
    2918:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
    291a:	a6 e2       	ldi	r26, 0x26	; 38
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	e6 e2       	ldi	r30, 0x26	; 38
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	8e 7f       	andi	r24, 0xFE	; 254
    2926:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
   #endif

	// Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG, ADC_Enable_PIN);
    2928:	a6 e2       	ldi	r26, 0x26	; 38
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	e6 e2       	ldi	r30, 0x26	; 38
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	80 68       	ori	r24, 0x80	; 128
    2934:	8c 93       	st	X, r24

}
    2936:	cf 91       	pop	r28
    2938:	df 91       	pop	r29
    293a:	08 95       	ret

0000293c <ADC_u8_Get_Digital_ValueSynchNonBlocking>:



u8 ADC_u8_Get_Digital_ValueSynchNonBlocking(u8 Copy_u8ChannelNumber, u16 *Copy_Pu16DigitalValue){
    293c:	df 93       	push	r29
    293e:	cf 93       	push	r28
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
    2944:	28 97       	sbiw	r28, 0x08	; 8
    2946:	0f b6       	in	r0, 0x3f	; 63
    2948:	f8 94       	cli
    294a:	de bf       	out	0x3e, r29	; 62
    294c:	0f be       	out	0x3f, r0	; 63
    294e:	cd bf       	out	0x3d, r28	; 61
    2950:	8e 83       	std	Y+6, r24	; 0x06
    2952:	78 87       	std	Y+8, r23	; 0x08
    2954:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    295a:	19 82       	std	Y+1, r1	; 0x01
    295c:	1a 82       	std	Y+2, r1	; 0x02
    295e:	1b 82       	std	Y+3, r1	; 0x03
    2960:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNumber < 32) && (Copy_Pu16DigitalValue != NULL)){
    2962:	8e 81       	ldd	r24, Y+6	; 0x06
    2964:	80 32       	cpi	r24, 0x20	; 32
    2966:	08 f0       	brcs	.+2      	; 0x296a <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x2e>
    2968:	5b c0       	rjmp	.+182    	; 0x2a20 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>
    296a:	8f 81       	ldd	r24, Y+7	; 0x07
    296c:	98 85       	ldd	r25, Y+8	; 0x08
    296e:	00 97       	sbiw	r24, 0x00	; 0
    2970:	09 f4       	brne	.+2      	; 0x2974 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x38>
    2972:	56 c0       	rjmp	.+172    	; 0x2a20 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>

		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2974:	a7 e2       	ldi	r26, 0x27	; 39
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	e7 e2       	ldi	r30, 0x27	; 39
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	80 7e       	andi	r24, 0xE0	; 224
    2980:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    2982:	a7 e2       	ldi	r26, 0x27	; 39
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	e7 e2       	ldi	r30, 0x27	; 39
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	90 81       	ld	r25, Z
    298c:	8e 81       	ldd	r24, Y+6	; 0x06
    298e:	89 2b       	or	r24, r25
    2990:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    2992:	a6 e2       	ldi	r26, 0x26	; 38
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	e6 e2       	ldi	r30, 0x26	; 38
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	80 64       	ori	r24, 0x40	; 64
    299e:	8c 93       	st	X, r24
    29a0:	0b c0       	rjmp	.+22     	; 0x29b8 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x7c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
			Local_u32TimeOutCounter++;
    29a2:	89 81       	ldd	r24, Y+1	; 0x01
    29a4:	9a 81       	ldd	r25, Y+2	; 0x02
    29a6:	ab 81       	ldd	r26, Y+3	; 0x03
    29a8:	bc 81       	ldd	r27, Y+4	; 0x04
    29aa:	01 96       	adiw	r24, 0x01	; 1
    29ac:	a1 1d       	adc	r26, r1
    29ae:	b1 1d       	adc	r27, r1
    29b0:	89 83       	std	Y+1, r24	; 0x01
    29b2:	9a 83       	std	Y+2, r25	; 0x02
    29b4:	ab 83       	std	Y+3, r26	; 0x03
    29b6:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
    29b8:	e6 e2       	ldi	r30, 0x26	; 38
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	82 95       	swap	r24
    29c0:	8f 70       	andi	r24, 0x0F	; 15
    29c2:	88 2f       	mov	r24, r24
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	81 70       	andi	r24, 0x01	; 1
    29c8:	90 70       	andi	r25, 0x00	; 0
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	61 f4       	brne	.+24     	; 0x29e6 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xaa>
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	9a 81       	ldd	r25, Y+2	; 0x02
    29d2:	ab 81       	ldd	r26, Y+3	; 0x03
    29d4:	bc 81       	ldd	r27, Y+4	; 0x04
    29d6:	80 35       	cpi	r24, 0x50	; 80
    29d8:	23 ec       	ldi	r18, 0xC3	; 195
    29da:	92 07       	cpc	r25, r18
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	a2 07       	cpc	r26, r18
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	b2 07       	cpc	r27, r18
    29e4:	f0 f2       	brcs	.-68     	; 0x29a2 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x66>
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) != 0){ //(Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)
    29e6:	e6 e2       	ldi	r30, 0x26	; 38
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	80 81       	ld	r24, Z
    29ec:	82 95       	swap	r24
    29ee:	8f 70       	andi	r24, 0x0F	; 15
    29f0:	88 2f       	mov	r24, r24
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	81 70       	andi	r24, 0x01	; 1
    29f6:	90 70       	andi	r25, 0x00	; 0
    29f8:	88 23       	and	r24, r24
    29fa:	81 f0       	breq	.+32     	; 0x2a1c <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe0>
			/* Clear Flag = 1 */
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF);
    29fc:	a6 e2       	ldi	r26, 0x26	; 38
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	e6 e2       	ldi	r30, 0x26	; 38
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	80 61       	ori	r24, 0x10	; 16
    2a08:	8c 93       	st	X, r24
			/* Read Digital Value */
			*Copy_Pu16DigitalValue = ADC_u16_ADC_REG;
    2a0a:	e4 e2       	ldi	r30, 0x24	; 36
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	91 81       	ldd	r25, Z+1	; 0x01
    2a12:	ef 81       	ldd	r30, Y+7	; 0x07
    2a14:	f8 85       	ldd	r31, Y+8	; 0x08
    2a16:	91 83       	std	Z+1, r25	; 0x01
    2a18:	80 83       	st	Z, r24
    2a1a:	03 c0       	rjmp	.+6      	; 0x2a22 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
		else{
			Local_u8ErrorState = STD_TYPES_NOK;
    2a1c:	1d 82       	std	Y+5, r1	; 0x05
    2a1e:	01 c0       	rjmp	.+2      	; 0x2a22 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
	}

	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2a20:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    2a22:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2a24:	28 96       	adiw	r28, 0x08	; 8
    2a26:	0f b6       	in	r0, 0x3f	; 63
    2a28:	f8 94       	cli
    2a2a:	de bf       	out	0x3e, r29	; 62
    2a2c:	0f be       	out	0x3f, r0	; 63
    2a2e:	cd bf       	out	0x3d, r28	; 61
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	08 95       	ret

00002a36 <ADC_u8_Get_Digital_ValueAsynch>:



u8 ADC_u8_Get_Digital_ValueAsynch(u8 Copy_u8ChannelNumber, void (*Copy_PFNotification)(u16)){
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <ADC_u8_Get_Digital_ValueAsynch+0x6>
    2a3c:	00 d0       	rcall	.+0      	; 0x2a3e <ADC_u8_Get_Digital_ValueAsynch+0x8>
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
    2a42:	8a 83       	std	Y+2, r24	; 0x02
    2a44:	7c 83       	std	Y+4, r23	; 0x04
    2a46:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNumber < 32) && (Copy_PFNotification != NULL) && (ADC_u8BusyFlag == 0)){
    2a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4e:	80 32       	cpi	r24, 0x20	; 32
    2a50:	78 f5       	brcc	.+94     	; 0x2ab0 <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2a52:	8b 81       	ldd	r24, Y+3	; 0x03
    2a54:	9c 81       	ldd	r25, Y+4	; 0x04
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	59 f1       	breq	.+86     	; 0x2ab0 <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2a5a:	80 91 ba 01 	lds	r24, 0x01BA
    2a5e:	88 23       	and	r24, r24
    2a60:	39 f5       	brne	.+78     	; 0x2ab0 <ADC_u8_Get_Digital_ValueAsynch+0x7a>
		/* Set Flag To Make ADC Busy */
		ADC_u8BusyFlag = 1;
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	80 93 ba 01 	sts	0x01BA, r24
		/* Update Global Pointer To a Function */
		ADC_PfNotification = Copy_PFNotification;
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6c:	90 93 b9 01 	sts	0x01B9, r25
    2a70:	80 93 b8 01 	sts	0x01B8, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    2a74:	a6 e2       	ldi	r26, 0x26	; 38
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	e6 e2       	ldi	r30, 0x26	; 38
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	88 60       	ori	r24, 0x08	; 8
    2a80:	8c 93       	st	X, r24
		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2a82:	a7 e2       	ldi	r26, 0x27	; 39
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	e7 e2       	ldi	r30, 0x27	; 39
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	80 7e       	andi	r24, 0xE0	; 224
    2a8e:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    2a90:	a7 e2       	ldi	r26, 0x27	; 39
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	e7 e2       	ldi	r30, 0x27	; 39
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	90 81       	ld	r25, Z
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	89 2b       	or	r24, r25
    2a9e:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    2aa0:	a6 e2       	ldi	r26, 0x26	; 38
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e6 e2       	ldi	r30, 0x26	; 38
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	80 64       	ori	r24, 0x40	; 64
    2aac:	8c 93       	st	X, r24
    2aae:	01 c0       	rjmp	.+2      	; 0x2ab2 <ADC_u8_Get_Digital_ValueAsynch+0x7c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2ab0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	cf 91       	pop	r28
    2abe:	df 91       	pop	r29
    2ac0:	08 95       	ret

00002ac2 <ADC_u8GetADCRegValue>:

u8 ADC_u8GetADCRegValue(u16 *Copy_u16PADCValue){
    2ac2:	df 93       	push	r29
    2ac4:	cf 93       	push	r28
    2ac6:	00 d0       	rcall	.+0      	; 0x2ac8 <ADC_u8GetADCRegValue+0x6>
    2ac8:	0f 92       	push	r0
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    2ace:	9b 83       	std	Y+3, r25	; 0x03
    2ad0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u16PADCValue != NULL){
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    2ada:	00 97       	sbiw	r24, 0x00	; 0
    2adc:	39 f0       	breq	.+14     	; 0x2aec <ADC_u8GetADCRegValue+0x2a>
		/* Read ADC Register */
		Copy_u16PADCValue = ADC_u16_ADC_REG;
    2ade:	e4 e2       	ldi	r30, 0x24	; 36
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	80 81       	ld	r24, Z
    2ae4:	91 81       	ldd	r25, Z+1	; 0x01
    2ae6:	9b 83       	std	Y+3, r25	; 0x03
    2ae8:	8a 83       	std	Y+2, r24	; 0x02
    2aea:	01 c0       	rjmp	.+2      	; 0x2aee <ADC_u8GetADCRegValue+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2aec:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
}
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	cf 91       	pop	r28
    2af8:	df 91       	pop	r29
    2afa:	08 95       	ret

00002afc <__vector_16>:


void __vector_16(void)		__attribute__((signal));

void __vector_16(void){
    2afc:	1f 92       	push	r1
    2afe:	0f 92       	push	r0
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	0f 92       	push	r0
    2b04:	11 24       	eor	r1, r1
    2b06:	2f 93       	push	r18
    2b08:	3f 93       	push	r19
    2b0a:	4f 93       	push	r20
    2b0c:	5f 93       	push	r21
    2b0e:	6f 93       	push	r22
    2b10:	7f 93       	push	r23
    2b12:	8f 93       	push	r24
    2b14:	9f 93       	push	r25
    2b16:	af 93       	push	r26
    2b18:	bf 93       	push	r27
    2b1a:	ef 93       	push	r30
    2b1c:	ff 93       	push	r31
    2b1e:	df 93       	push	r29
    2b20:	cf 93       	push	r28
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PfNotification != NULL){
    2b26:	80 91 b8 01 	lds	r24, 0x01B8
    2b2a:	90 91 b9 01 	lds	r25, 0x01B9
    2b2e:	00 97       	sbiw	r24, 0x00	; 0
    2b30:	99 f0       	breq	.+38     	; 0x2b58 <__vector_16+0x5c>
		ADC_u8BusyFlag = 0;
    2b32:	10 92 ba 01 	sts	0x01BA, r1
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    2b36:	a6 e2       	ldi	r26, 0x26	; 38
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	e6 e2       	ldi	r30, 0x26	; 38
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	87 7f       	andi	r24, 0xF7	; 247
    2b42:	8c 93       	st	X, r24
		ADC_PfNotification(ADC_u16_ADC_REG);
    2b44:	20 91 b8 01 	lds	r18, 0x01B8
    2b48:	30 91 b9 01 	lds	r19, 0x01B9
    2b4c:	e4 e2       	ldi	r30, 0x24	; 36
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	91 81       	ldd	r25, Z+1	; 0x01
    2b54:	f9 01       	movw	r30, r18
    2b56:	09 95       	icall
	}
}
    2b58:	cf 91       	pop	r28
    2b5a:	df 91       	pop	r29
    2b5c:	ff 91       	pop	r31
    2b5e:	ef 91       	pop	r30
    2b60:	bf 91       	pop	r27
    2b62:	af 91       	pop	r26
    2b64:	9f 91       	pop	r25
    2b66:	8f 91       	pop	r24
    2b68:	7f 91       	pop	r23
    2b6a:	6f 91       	pop	r22
    2b6c:	5f 91       	pop	r21
    2b6e:	4f 91       	pop	r20
    2b70:	3f 91       	pop	r19
    2b72:	2f 91       	pop	r18
    2b74:	0f 90       	pop	r0
    2b76:	0f be       	out	0x3f, r0	; 63
    2b78:	0f 90       	pop	r0
    2b7a:	1f 90       	pop	r1
    2b7c:	18 95       	reti

00002b7e <Stepper_Init>:

#include<util/delay.h>
#define F_CPU 16000000UL


void Stepper_Init(){
    2b7e:	df 93       	push	r29
    2b80:	cf 93       	push	r28
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(Stepper_1B_PORT, Stepper_1B_PIN, DIO_u8_OUTPUT);
    2b86:	83 e0       	ldi	r24, 0x03	; 3
    2b88:	60 e0       	ldi	r22, 0x00	; 0
    2b8a:	41 e0       	ldi	r20, 0x01	; 1
    2b8c:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_2B_PORT, Stepper_2B_PIN, DIO_u8_OUTPUT);
    2b90:	83 e0       	ldi	r24, 0x03	; 3
    2b92:	61 e0       	ldi	r22, 0x01	; 1
    2b94:	41 e0       	ldi	r20, 0x01	; 1
    2b96:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_3B_PORT, Stepper_3B_PIN, DIO_u8_OUTPUT);
    2b9a:	83 e0       	ldi	r24, 0x03	; 3
    2b9c:	62 e0       	ldi	r22, 0x02	; 2
    2b9e:	41 e0       	ldi	r20, 0x01	; 1
    2ba0:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_4B_PORT, Stepper_4B_PIN, DIO_u8_OUTPUT);
    2ba4:	83 e0       	ldi	r24, 0x03	; 3
    2ba6:	66 e0       	ldi	r22, 0x06	; 6
    2ba8:	41 e0       	ldi	r20, 0x01	; 1
    2baa:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_u8SetPinDirection>
}
    2bae:	cf 91       	pop	r28
    2bb0:	df 91       	pop	r29
    2bb2:	08 95       	ret

00002bb4 <ActivatePins1>:


void ActivatePins1(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    2bb4:	df 93       	push	r29
    2bb6:	cf 93       	push	r28
    2bb8:	00 d0       	rcall	.+0      	; 0x2bba <ActivatePins1+0x6>
    2bba:	00 d0       	rcall	.+0      	; 0x2bbc <ActivatePins1+0x8>
    2bbc:	cd b7       	in	r28, 0x3d	; 61
    2bbe:	de b7       	in	r29, 0x3e	; 62
    2bc0:	89 83       	std	Y+1, r24	; 0x01
    2bc2:	6a 83       	std	Y+2, r22	; 0x02
    2bc4:	4b 83       	std	Y+3, r20	; 0x03
    2bc6:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    2bc8:	83 e0       	ldi	r24, 0x03	; 3
    2bca:	60 e0       	ldi	r22, 0x00	; 0
    2bcc:	49 81       	ldd	r20, Y+1	; 0x01
    2bce:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    2bd2:	83 e0       	ldi	r24, 0x03	; 3
    2bd4:	61 e0       	ldi	r22, 0x01	; 1
    2bd6:	4a 81       	ldd	r20, Y+2	; 0x02
    2bd8:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    2bdc:	83 e0       	ldi	r24, 0x03	; 3
    2bde:	62 e0       	ldi	r22, 0x02	; 2
    2be0:	4b 81       	ldd	r20, Y+3	; 0x03
    2be2:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    2be6:	83 e0       	ldi	r24, 0x03	; 3
    2be8:	66 e0       	ldi	r22, 0x06	; 6
    2bea:	4c 81       	ldd	r20, Y+4	; 0x04
    2bec:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
}
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	0f 90       	pop	r0
    2bf8:	cf 91       	pop	r28
    2bfa:	df 91       	pop	r29
    2bfc:	08 95       	ret

00002bfe <ActivatePins2>:

void ActivatePins2(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	00 d0       	rcall	.+0      	; 0x2c04 <ActivatePins2+0x6>
    2c04:	00 d0       	rcall	.+0      	; 0x2c06 <ActivatePins2+0x8>
    2c06:	cd b7       	in	r28, 0x3d	; 61
    2c08:	de b7       	in	r29, 0x3e	; 62
    2c0a:	89 83       	std	Y+1, r24	; 0x01
    2c0c:	6a 83       	std	Y+2, r22	; 0x02
    2c0e:	4b 83       	std	Y+3, r20	; 0x03
    2c10:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    2c12:	83 e0       	ldi	r24, 0x03	; 3
    2c14:	66 e0       	ldi	r22, 0x06	; 6
    2c16:	4c 81       	ldd	r20, Y+4	; 0x04
    2c18:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    2c1c:	83 e0       	ldi	r24, 0x03	; 3
    2c1e:	62 e0       	ldi	r22, 0x02	; 2
    2c20:	4b 81       	ldd	r20, Y+3	; 0x03
    2c22:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    2c26:	83 e0       	ldi	r24, 0x03	; 3
    2c28:	61 e0       	ldi	r22, 0x01	; 1
    2c2a:	4a 81       	ldd	r20, Y+2	; 0x02
    2c2c:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    2c30:	83 e0       	ldi	r24, 0x03	; 3
    2c32:	60 e0       	ldi	r22, 0x00	; 0
    2c34:	49 81       	ldd	r20, Y+1	; 0x01
    2c36:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
}
    2c3a:	0f 90       	pop	r0
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	cf 91       	pop	r28
    2c44:	df 91       	pop	r29
    2c46:	08 95       	ret

00002c48 <SelectStepAngle>:


void SelectStepAngle(u16 angle, u8 Direction){
    2c48:	df 93       	push	r29
    2c4a:	cf 93       	push	r28
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
    2c50:	29 97       	sbiw	r28, 0x09	; 9
    2c52:	0f b6       	in	r0, 0x3f	; 63
    2c54:	f8 94       	cli
    2c56:	de bf       	out	0x3e, r29	; 62
    2c58:	0f be       	out	0x3f, r0	; 63
    2c5a:	cd bf       	out	0x3d, r28	; 61
    2c5c:	9a 83       	std	Y+2, r25	; 0x02
    2c5e:	89 83       	std	Y+1, r24	; 0x01
    2c60:	6b 83       	std	Y+3, r22	; 0x03
	switch(angle){
    2c62:	29 81       	ldd	r18, Y+1	; 0x01
    2c64:	3a 81       	ldd	r19, Y+2	; 0x02
    2c66:	39 87       	std	Y+9, r19	; 0x09
    2c68:	28 87       	std	Y+8, r18	; 0x08
    2c6a:	88 85       	ldd	r24, Y+8	; 0x08
    2c6c:	99 85       	ldd	r25, Y+9	; 0x09
    2c6e:	8a 35       	cpi	r24, 0x5A	; 90
    2c70:	91 05       	cpc	r25, r1
    2c72:	31 f0       	breq	.+12     	; 0x2c80 <SelectStepAngle+0x38>
    2c74:	28 85       	ldd	r18, Y+8	; 0x08
    2c76:	39 85       	ldd	r19, Y+9	; 0x09
    2c78:	24 3b       	cpi	r18, 0xB4	; 180
    2c7a:	31 05       	cpc	r19, r1
    2c7c:	f1 f0       	breq	.+60     	; 0x2cba <SelectStepAngle+0x72>
    2c7e:	39 c0       	rjmp	.+114    	; 0x2cf2 <SelectStepAngle+0xaa>
		case 90:
			switch(Direction){
    2c80:	8b 81       	ldd	r24, Y+3	; 0x03
    2c82:	28 2f       	mov	r18, r24
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	3f 83       	std	Y+7, r19	; 0x07
    2c88:	2e 83       	std	Y+6, r18	; 0x06
    2c8a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c8c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	31 f0       	breq	.+12     	; 0x2c9e <SelectStepAngle+0x56>
    2c92:	2e 81       	ldd	r18, Y+6	; 0x06
    2c94:	3f 81       	ldd	r19, Y+7	; 0x07
    2c96:	21 30       	cpi	r18, 0x01	; 1
    2c98:	31 05       	cpc	r19, r1
    2c9a:	41 f0       	breq	.+16     	; 0x2cac <SelectStepAngle+0x64>
    2c9c:	2a c0       	rjmp	.+84     	; 0x2cf2 <SelectStepAngle+0xaa>
				case CW:
					ActivatePins1(DIO_u8_LOW, DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH);
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	60 e0       	ldi	r22, 0x00	; 0
    2ca2:	41 e0       	ldi	r20, 0x01	; 1
    2ca4:	21 e0       	ldi	r18, 0x01	; 1
    2ca6:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <ActivatePins1>
    2caa:	23 c0       	rjmp	.+70     	; 0x2cf2 <SelectStepAngle+0xaa>
					break;

				case CCW:
					ActivatePins2(DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW, DIO_u8_LOW);
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	61 e0       	ldi	r22, 0x01	; 1
    2cb0:	40 e0       	ldi	r20, 0x00	; 0
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <ActivatePins2>
    2cb8:	1c c0       	rjmp	.+56     	; 0x2cf2 <SelectStepAngle+0xaa>
					break;
			}
			break;

			case 180:
				switch(Direction){
    2cba:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbc:	28 2f       	mov	r18, r24
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	3d 83       	std	Y+5, r19	; 0x05
    2cc2:	2c 83       	std	Y+4, r18	; 0x04
    2cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc6:	9d 81       	ldd	r25, Y+5	; 0x05
    2cc8:	00 97       	sbiw	r24, 0x00	; 0
    2cca:	31 f0       	breq	.+12     	; 0x2cd8 <SelectStepAngle+0x90>
    2ccc:	2c 81       	ldd	r18, Y+4	; 0x04
    2cce:	3d 81       	ldd	r19, Y+5	; 0x05
    2cd0:	21 30       	cpi	r18, 0x01	; 1
    2cd2:	31 05       	cpc	r19, r1
    2cd4:	41 f0       	breq	.+16     	; 0x2ce6 <SelectStepAngle+0x9e>
    2cd6:	0d c0       	rjmp	.+26     	; 0x2cf2 <SelectStepAngle+0xaa>
					case CW:
						ActivatePins2(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	61 e0       	ldi	r22, 0x01	; 1
    2cdc:	41 e0       	ldi	r20, 0x01	; 1
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <ActivatePins2>
    2ce4:	06 c0       	rjmp	.+12     	; 0x2cf2 <SelectStepAngle+0xaa>
						break;

					case CCW:
						ActivatePins1(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	61 e0       	ldi	r22, 0x01	; 1
    2cea:	41 e0       	ldi	r20, 0x01	; 1
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <ActivatePins1>
						break;
				}
				break;
	}
}
    2cf2:	29 96       	adiw	r28, 0x09	; 9
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	f8 94       	cli
    2cf8:	de bf       	out	0x3e, r29	; 62
    2cfa:	0f be       	out	0x3f, r0	; 63
    2cfc:	cd bf       	out	0x3d, r28	; 61
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	08 95       	ret

00002d04 <Servo_Init>:
#include "../../MCAL/Timer/Timer_Interface.h"



void Servo_Init(){
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
	TIMERS_voidTimer1Init();
    2d0c:	0e 94 48 08 	call	0x1090	; 0x1090 <TIMERS_voidTimer1Init>
}
    2d10:	cf 91       	pop	r28
    2d12:	df 91       	pop	r29
    2d14:	08 95       	ret

00002d16 <Servo_SetAngle>:

void Servo_SetAngle(u16 Servo_Angle){
    2d16:	df 93       	push	r29
    2d18:	cf 93       	push	r28
    2d1a:	00 d0       	rcall	.+0      	; 0x2d1c <Servo_SetAngle+0x6>
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    2d20:	9a 83       	std	Y+2, r25	; 0x02
    2d22:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_voidTIMER1SetCompareMatchValueA(Servo_Angle);
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	9a 81       	ldd	r25, Y+2	; 0x02
    2d28:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <TIMERS_voidTIMER1SetCompareMatchValueA>
}
    2d2c:	0f 90       	pop	r0
    2d2e:	0f 90       	pop	r0
    2d30:	cf 91       	pop	r28
    2d32:	df 91       	pop	r29
    2d34:	08 95       	ret

00002d36 <LCD_sendCommand>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/Dio_Interface.h"

void LCD_sendCommand(u8 command)
{
    2d36:	df 93       	push	r29
    2d38:	cf 93       	push	r28
    2d3a:	cd b7       	in	r28, 0x3d	; 61
    2d3c:	de b7       	in	r29, 0x3e	; 62
    2d3e:	e9 97       	sbiw	r28, 0x39	; 57
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	f8 94       	cli
    2d44:	de bf       	out	0x3e, r29	; 62
    2d46:	0f be       	out	0x3f, r0	; 63
    2d48:	cd bf       	out	0x3d, r28	; 61
    2d4a:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    2d4c:	83 e0       	ldi	r24, 0x03	; 3
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	64 e0       	ldi	r22, 0x04	; 4
    2d52:	70 e0       	ldi	r23, 0x00	; 0
    2d54:	40 e0       	ldi	r20, 0x00	; 0
    2d56:	50 e0       	ldi	r21, 0x00	; 0
    2d58:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCD_setPinValue>
    2d5c:	80 e0       	ldi	r24, 0x00	; 0
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	a0 e8       	ldi	r26, 0x80	; 128
    2d62:	bf e3       	ldi	r27, 0x3F	; 63
    2d64:	8d ab       	std	Y+53, r24	; 0x35
    2d66:	9e ab       	std	Y+54, r25	; 0x36
    2d68:	af ab       	std	Y+55, r26	; 0x37
    2d6a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6c:	6d a9       	ldd	r22, Y+53	; 0x35
    2d6e:	7e a9       	ldd	r23, Y+54	; 0x36
    2d70:	8f a9       	ldd	r24, Y+55	; 0x37
    2d72:	98 ad       	ldd	r25, Y+56	; 0x38
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	4a e7       	ldi	r20, 0x7A	; 122
    2d7a:	55 e4       	ldi	r21, 0x45	; 69
    2d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	89 ab       	std	Y+49, r24	; 0x31
    2d86:	9a ab       	std	Y+50, r25	; 0x32
    2d88:	ab ab       	std	Y+51, r26	; 0x33
    2d8a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d8c:	69 a9       	ldd	r22, Y+49	; 0x31
    2d8e:	7a a9       	ldd	r23, Y+50	; 0x32
    2d90:	8b a9       	ldd	r24, Y+51	; 0x33
    2d92:	9c a9       	ldd	r25, Y+52	; 0x34
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	40 e8       	ldi	r20, 0x80	; 128
    2d9a:	5f e3       	ldi	r21, 0x3F	; 63
    2d9c:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    2da0:	88 23       	and	r24, r24
    2da2:	2c f4       	brge	.+10     	; 0x2dae <LCD_sendCommand+0x78>
		__ticks = 1;
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	98 ab       	std	Y+48, r25	; 0x30
    2daa:	8f a7       	std	Y+47, r24	; 0x2f
    2dac:	3f c0       	rjmp	.+126    	; 0x2e2c <LCD_sendCommand+0xf6>
	else if (__tmp > 65535)
    2dae:	69 a9       	ldd	r22, Y+49	; 0x31
    2db0:	7a a9       	ldd	r23, Y+50	; 0x32
    2db2:	8b a9       	ldd	r24, Y+51	; 0x33
    2db4:	9c a9       	ldd	r25, Y+52	; 0x34
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	3f ef       	ldi	r19, 0xFF	; 255
    2dba:	4f e7       	ldi	r20, 0x7F	; 127
    2dbc:	57 e4       	ldi	r21, 0x47	; 71
    2dbe:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    2dc2:	18 16       	cp	r1, r24
    2dc4:	4c f5       	brge	.+82     	; 0x2e18 <LCD_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc6:	6d a9       	ldd	r22, Y+53	; 0x35
    2dc8:	7e a9       	ldd	r23, Y+54	; 0x36
    2dca:	8f a9       	ldd	r24, Y+55	; 0x37
    2dcc:	98 ad       	ldd	r25, Y+56	; 0x38
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	40 e2       	ldi	r20, 0x20	; 32
    2dd4:	51 e4       	ldi	r21, 0x41	; 65
    2dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	bc 01       	movw	r22, r24
    2de0:	cd 01       	movw	r24, r26
    2de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	98 ab       	std	Y+48, r25	; 0x30
    2dec:	8f a7       	std	Y+47, r24	; 0x2f
    2dee:	0f c0       	rjmp	.+30     	; 0x2e0e <LCD_sendCommand+0xd8>
    2df0:	80 e9       	ldi	r24, 0x90	; 144
    2df2:	91 e0       	ldi	r25, 0x01	; 1
    2df4:	9e a7       	std	Y+46, r25	; 0x2e
    2df6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2df8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2dfa:	9e a5       	ldd	r25, Y+46	; 0x2e
    2dfc:	01 97       	sbiw	r24, 0x01	; 1
    2dfe:	f1 f7       	brne	.-4      	; 0x2dfc <LCD_sendCommand+0xc6>
    2e00:	9e a7       	std	Y+46, r25	; 0x2e
    2e02:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e04:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e06:	98 a9       	ldd	r25, Y+48	; 0x30
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	98 ab       	std	Y+48, r25	; 0x30
    2e0c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e10:	98 a9       	ldd	r25, Y+48	; 0x30
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	69 f7       	brne	.-38     	; 0x2df0 <LCD_sendCommand+0xba>
    2e16:	14 c0       	rjmp	.+40     	; 0x2e40 <LCD_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e18:	69 a9       	ldd	r22, Y+49	; 0x31
    2e1a:	7a a9       	ldd	r23, Y+50	; 0x32
    2e1c:	8b a9       	ldd	r24, Y+51	; 0x33
    2e1e:	9c a9       	ldd	r25, Y+52	; 0x34
    2e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	98 ab       	std	Y+48, r25	; 0x30
    2e2a:	8f a7       	std	Y+47, r24	; 0x2f
    2e2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e2e:	98 a9       	ldd	r25, Y+48	; 0x30
    2e30:	9c a7       	std	Y+44, r25	; 0x2c
    2e32:	8b a7       	std	Y+43, r24	; 0x2b
    2e34:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e36:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e38:	01 97       	sbiw	r24, 0x01	; 1
    2e3a:	f1 f7       	brne	.-4      	; 0x2e38 <LCD_sendCommand+0x102>
    2e3c:	9c a7       	std	Y+44, r25	; 0x2c
    2e3e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2e40:	83 e0       	ldi	r24, 0x03	; 3
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	65 e0       	ldi	r22, 0x05	; 5
    2e46:	70 e0       	ldi	r23, 0x00	; 0
    2e48:	41 e0       	ldi	r20, 0x01	; 1
    2e4a:	50 e0       	ldi	r21, 0x00	; 0
    2e4c:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCD_setPinValue>
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	a0 e8       	ldi	r26, 0x80	; 128
    2e56:	bf e3       	ldi	r27, 0x3F	; 63
    2e58:	8f a3       	std	Y+39, r24	; 0x27
    2e5a:	98 a7       	std	Y+40, r25	; 0x28
    2e5c:	a9 a7       	std	Y+41, r26	; 0x29
    2e5e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e60:	6f a1       	ldd	r22, Y+39	; 0x27
    2e62:	78 a5       	ldd	r23, Y+40	; 0x28
    2e64:	89 a5       	ldd	r24, Y+41	; 0x29
    2e66:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	4a e7       	ldi	r20, 0x7A	; 122
    2e6e:	55 e4       	ldi	r21, 0x45	; 69
    2e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	8b a3       	std	Y+35, r24	; 0x23
    2e7a:	9c a3       	std	Y+36, r25	; 0x24
    2e7c:	ad a3       	std	Y+37, r26	; 0x25
    2e7e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e80:	6b a1       	ldd	r22, Y+35	; 0x23
    2e82:	7c a1       	ldd	r23, Y+36	; 0x24
    2e84:	8d a1       	ldd	r24, Y+37	; 0x25
    2e86:	9e a1       	ldd	r25, Y+38	; 0x26
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	40 e8       	ldi	r20, 0x80	; 128
    2e8e:	5f e3       	ldi	r21, 0x3F	; 63
    2e90:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    2e94:	88 23       	and	r24, r24
    2e96:	2c f4       	brge	.+10     	; 0x2ea2 <LCD_sendCommand+0x16c>
		__ticks = 1;
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	9a a3       	std	Y+34, r25	; 0x22
    2e9e:	89 a3       	std	Y+33, r24	; 0x21
    2ea0:	3f c0       	rjmp	.+126    	; 0x2f20 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    2ea2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ea4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ea6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ea8:	9e a1       	ldd	r25, Y+38	; 0x26
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	3f ef       	ldi	r19, 0xFF	; 255
    2eae:	4f e7       	ldi	r20, 0x7F	; 127
    2eb0:	57 e4       	ldi	r21, 0x47	; 71
    2eb2:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    2eb6:	18 16       	cp	r1, r24
    2eb8:	4c f5       	brge	.+82     	; 0x2f0c <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eba:	6f a1       	ldd	r22, Y+39	; 0x27
    2ebc:	78 a5       	ldd	r23, Y+40	; 0x28
    2ebe:	89 a5       	ldd	r24, Y+41	; 0x29
    2ec0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	40 e2       	ldi	r20, 0x20	; 32
    2ec8:	51 e4       	ldi	r21, 0x41	; 65
    2eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	bc 01       	movw	r22, r24
    2ed4:	cd 01       	movw	r24, r26
    2ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	9a a3       	std	Y+34, r25	; 0x22
    2ee0:	89 a3       	std	Y+33, r24	; 0x21
    2ee2:	0f c0       	rjmp	.+30     	; 0x2f02 <LCD_sendCommand+0x1cc>
    2ee4:	80 e9       	ldi	r24, 0x90	; 144
    2ee6:	91 e0       	ldi	r25, 0x01	; 1
    2ee8:	98 a3       	std	Y+32, r25	; 0x20
    2eea:	8f 8f       	std	Y+31, r24	; 0x1f
    2eec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2eee:	98 a1       	ldd	r25, Y+32	; 0x20
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	f1 f7       	brne	.-4      	; 0x2ef0 <LCD_sendCommand+0x1ba>
    2ef4:	98 a3       	std	Y+32, r25	; 0x20
    2ef6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef8:	89 a1       	ldd	r24, Y+33	; 0x21
    2efa:	9a a1       	ldd	r25, Y+34	; 0x22
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	9a a3       	std	Y+34, r25	; 0x22
    2f00:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f02:	89 a1       	ldd	r24, Y+33	; 0x21
    2f04:	9a a1       	ldd	r25, Y+34	; 0x22
    2f06:	00 97       	sbiw	r24, 0x00	; 0
    2f08:	69 f7       	brne	.-38     	; 0x2ee4 <LCD_sendCommand+0x1ae>
    2f0a:	14 c0       	rjmp	.+40     	; 0x2f34 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f0c:	6b a1       	ldd	r22, Y+35	; 0x23
    2f0e:	7c a1       	ldd	r23, Y+36	; 0x24
    2f10:	8d a1       	ldd	r24, Y+37	; 0x25
    2f12:	9e a1       	ldd	r25, Y+38	; 0x26
    2f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	9a a3       	std	Y+34, r25	; 0x22
    2f1e:	89 a3       	std	Y+33, r24	; 0x21
    2f20:	89 a1       	ldd	r24, Y+33	; 0x21
    2f22:	9a a1       	ldd	r25, Y+34	; 0x22
    2f24:	9e 8f       	std	Y+30, r25	; 0x1e
    2f26:	8d 8f       	std	Y+29, r24	; 0x1d
    2f28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f2c:	01 97       	sbiw	r24, 0x01	; 1
    2f2e:	f1 f7       	brne	.-4      	; 0x2f2c <LCD_sendCommand+0x1f6>
    2f30:	9e 8f       	std	Y+30, r25	; 0x1e
    2f32:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, command);
    2f34:	89 ad       	ldd	r24, Y+57	; 0x39
    2f36:	28 2f       	mov	r18, r24
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	82 e0       	ldi	r24, 0x02	; 2
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	b9 01       	movw	r22, r18
    2f40:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LCD_setPortValue>
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	a0 e8       	ldi	r26, 0x80	; 128
    2f4a:	bf e3       	ldi	r27, 0x3F	; 63
    2f4c:	89 8f       	std	Y+25, r24	; 0x19
    2f4e:	9a 8f       	std	Y+26, r25	; 0x1a
    2f50:	ab 8f       	std	Y+27, r26	; 0x1b
    2f52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f54:	69 8d       	ldd	r22, Y+25	; 0x19
    2f56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	4a e7       	ldi	r20, 0x7A	; 122
    2f62:	55 e4       	ldi	r21, 0x45	; 69
    2f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	8d 8b       	std	Y+21, r24	; 0x15
    2f6e:	9e 8b       	std	Y+22, r25	; 0x16
    2f70:	af 8b       	std	Y+23, r26	; 0x17
    2f72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f74:	6d 89       	ldd	r22, Y+21	; 0x15
    2f76:	7e 89       	ldd	r23, Y+22	; 0x16
    2f78:	8f 89       	ldd	r24, Y+23	; 0x17
    2f7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e8       	ldi	r20, 0x80	; 128
    2f82:	5f e3       	ldi	r21, 0x3F	; 63
    2f84:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    2f88:	88 23       	and	r24, r24
    2f8a:	2c f4       	brge	.+10     	; 0x2f96 <LCD_sendCommand+0x260>
		__ticks = 1;
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	9c 8b       	std	Y+20, r25	; 0x14
    2f92:	8b 8b       	std	Y+19, r24	; 0x13
    2f94:	3f c0       	rjmp	.+126    	; 0x3014 <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    2f96:	6d 89       	ldd	r22, Y+21	; 0x15
    2f98:	7e 89       	ldd	r23, Y+22	; 0x16
    2f9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	3f ef       	ldi	r19, 0xFF	; 255
    2fa2:	4f e7       	ldi	r20, 0x7F	; 127
    2fa4:	57 e4       	ldi	r21, 0x47	; 71
    2fa6:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    2faa:	18 16       	cp	r1, r24
    2fac:	4c f5       	brge	.+82     	; 0x3000 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fae:	69 8d       	ldd	r22, Y+25	; 0x19
    2fb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	40 e2       	ldi	r20, 0x20	; 32
    2fbc:	51 e4       	ldi	r21, 0x41	; 65
    2fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	bc 01       	movw	r22, r24
    2fc8:	cd 01       	movw	r24, r26
    2fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	9c 8b       	std	Y+20, r25	; 0x14
    2fd4:	8b 8b       	std	Y+19, r24	; 0x13
    2fd6:	0f c0       	rjmp	.+30     	; 0x2ff6 <LCD_sendCommand+0x2c0>
    2fd8:	80 e9       	ldi	r24, 0x90	; 144
    2fda:	91 e0       	ldi	r25, 0x01	; 1
    2fdc:	9a 8b       	std	Y+18, r25	; 0x12
    2fde:	89 8b       	std	Y+17, r24	; 0x11
    2fe0:	89 89       	ldd	r24, Y+17	; 0x11
    2fe2:	9a 89       	ldd	r25, Y+18	; 0x12
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	f1 f7       	brne	.-4      	; 0x2fe4 <LCD_sendCommand+0x2ae>
    2fe8:	9a 8b       	std	Y+18, r25	; 0x12
    2fea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fec:	8b 89       	ldd	r24, Y+19	; 0x13
    2fee:	9c 89       	ldd	r25, Y+20	; 0x14
    2ff0:	01 97       	sbiw	r24, 0x01	; 1
    2ff2:	9c 8b       	std	Y+20, r25	; 0x14
    2ff4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ff8:	9c 89       	ldd	r25, Y+20	; 0x14
    2ffa:	00 97       	sbiw	r24, 0x00	; 0
    2ffc:	69 f7       	brne	.-38     	; 0x2fd8 <LCD_sendCommand+0x2a2>
    2ffe:	14 c0       	rjmp	.+40     	; 0x3028 <LCD_sendCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3000:	6d 89       	ldd	r22, Y+21	; 0x15
    3002:	7e 89       	ldd	r23, Y+22	; 0x16
    3004:	8f 89       	ldd	r24, Y+23	; 0x17
    3006:	98 8d       	ldd	r25, Y+24	; 0x18
    3008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	9c 8b       	std	Y+20, r25	; 0x14
    3012:	8b 8b       	std	Y+19, r24	; 0x13
    3014:	8b 89       	ldd	r24, Y+19	; 0x13
    3016:	9c 89       	ldd	r25, Y+20	; 0x14
    3018:	98 8b       	std	Y+16, r25	; 0x10
    301a:	8f 87       	std	Y+15, r24	; 0x0f
    301c:	8f 85       	ldd	r24, Y+15	; 0x0f
    301e:	98 89       	ldd	r25, Y+16	; 0x10
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	f1 f7       	brne	.-4      	; 0x3020 <LCD_sendCommand+0x2ea>
    3024:	98 8b       	std	Y+16, r25	; 0x10
    3026:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    3028:	83 e0       	ldi	r24, 0x03	; 3
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	65 e0       	ldi	r22, 0x05	; 5
    302e:	70 e0       	ldi	r23, 0x00	; 0
    3030:	40 e0       	ldi	r20, 0x00	; 0
    3032:	50 e0       	ldi	r21, 0x00	; 0
    3034:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCD_setPinValue>
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	a0 e8       	ldi	r26, 0x80	; 128
    303e:	bf e3       	ldi	r27, 0x3F	; 63
    3040:	8b 87       	std	Y+11, r24	; 0x0b
    3042:	9c 87       	std	Y+12, r25	; 0x0c
    3044:	ad 87       	std	Y+13, r26	; 0x0d
    3046:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3048:	6b 85       	ldd	r22, Y+11	; 0x0b
    304a:	7c 85       	ldd	r23, Y+12	; 0x0c
    304c:	8d 85       	ldd	r24, Y+13	; 0x0d
    304e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4a e7       	ldi	r20, 0x7A	; 122
    3056:	55 e4       	ldi	r21, 0x45	; 69
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	8f 83       	std	Y+7, r24	; 0x07
    3062:	98 87       	std	Y+8, r25	; 0x08
    3064:	a9 87       	std	Y+9, r26	; 0x09
    3066:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3068:	6f 81       	ldd	r22, Y+7	; 0x07
    306a:	78 85       	ldd	r23, Y+8	; 0x08
    306c:	89 85       	ldd	r24, Y+9	; 0x09
    306e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e8       	ldi	r20, 0x80	; 128
    3076:	5f e3       	ldi	r21, 0x3F	; 63
    3078:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    307c:	88 23       	and	r24, r24
    307e:	2c f4       	brge	.+10     	; 0x308a <LCD_sendCommand+0x354>
		__ticks = 1;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	9e 83       	std	Y+6, r25	; 0x06
    3086:	8d 83       	std	Y+5, r24	; 0x05
    3088:	3f c0       	rjmp	.+126    	; 0x3108 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    308a:	6f 81       	ldd	r22, Y+7	; 0x07
    308c:	78 85       	ldd	r23, Y+8	; 0x08
    308e:	89 85       	ldd	r24, Y+9	; 0x09
    3090:	9a 85       	ldd	r25, Y+10	; 0x0a
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	3f ef       	ldi	r19, 0xFF	; 255
    3096:	4f e7       	ldi	r20, 0x7F	; 127
    3098:	57 e4       	ldi	r21, 0x47	; 71
    309a:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    309e:	18 16       	cp	r1, r24
    30a0:	4c f5       	brge	.+82     	; 0x30f4 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e2       	ldi	r20, 0x20	; 32
    30b0:	51 e4       	ldi	r21, 0x41	; 65
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	9e 83       	std	Y+6, r25	; 0x06
    30c8:	8d 83       	std	Y+5, r24	; 0x05
    30ca:	0f c0       	rjmp	.+30     	; 0x30ea <LCD_sendCommand+0x3b4>
    30cc:	80 e9       	ldi	r24, 0x90	; 144
    30ce:	91 e0       	ldi	r25, 0x01	; 1
    30d0:	9c 83       	std	Y+4, r25	; 0x04
    30d2:	8b 83       	std	Y+3, r24	; 0x03
    30d4:	8b 81       	ldd	r24, Y+3	; 0x03
    30d6:	9c 81       	ldd	r25, Y+4	; 0x04
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <LCD_sendCommand+0x3a2>
    30dc:	9c 83       	std	Y+4, r25	; 0x04
    30de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e0:	8d 81       	ldd	r24, Y+5	; 0x05
    30e2:	9e 81       	ldd	r25, Y+6	; 0x06
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	9e 83       	std	Y+6, r25	; 0x06
    30e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ea:	8d 81       	ldd	r24, Y+5	; 0x05
    30ec:	9e 81       	ldd	r25, Y+6	; 0x06
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	69 f7       	brne	.-38     	; 0x30cc <LCD_sendCommand+0x396>
    30f2:	14 c0       	rjmp	.+40     	; 0x311c <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f4:	6f 81       	ldd	r22, Y+7	; 0x07
    30f6:	78 85       	ldd	r23, Y+8	; 0x08
    30f8:	89 85       	ldd	r24, Y+9	; 0x09
    30fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	9e 83       	std	Y+6, r25	; 0x06
    3106:	8d 83       	std	Y+5, r24	; 0x05
    3108:	8d 81       	ldd	r24, Y+5	; 0x05
    310a:	9e 81       	ldd	r25, Y+6	; 0x06
    310c:	9a 83       	std	Y+2, r25	; 0x02
    310e:	89 83       	std	Y+1, r24	; 0x01
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	9a 81       	ldd	r25, Y+2	; 0x02
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <LCD_sendCommand+0x3de>
    3118:	9a 83       	std	Y+2, r25	; 0x02
    311a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    311c:	e9 96       	adiw	r28, 0x39	; 57
    311e:	0f b6       	in	r0, 0x3f	; 63
    3120:	f8 94       	cli
    3122:	de bf       	out	0x3e, r29	; 62
    3124:	0f be       	out	0x3f, r0	; 63
    3126:	cd bf       	out	0x3d, r28	; 61
    3128:	cf 91       	pop	r28
    312a:	df 91       	pop	r29
    312c:	08 95       	ret

0000312e <LCD_displayCharacter>:
void LCD_displayCharacter(u8 data)
{
    312e:	df 93       	push	r29
    3130:	cf 93       	push	r28
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
    3136:	e9 97       	sbiw	r28, 0x39	; 57
    3138:	0f b6       	in	r0, 0x3f	; 63
    313a:	f8 94       	cli
    313c:	de bf       	out	0x3e, r29	; 62
    313e:	0f be       	out	0x3f, r0	; 63
    3140:	cd bf       	out	0x3d, r28	; 61
    3142:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    3144:	83 e0       	ldi	r24, 0x03	; 3
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	64 e0       	ldi	r22, 0x04	; 4
    314a:	70 e0       	ldi	r23, 0x00	; 0
    314c:	41 e0       	ldi	r20, 0x01	; 1
    314e:	50 e0       	ldi	r21, 0x00	; 0
    3150:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCD_setPinValue>
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	a0 e8       	ldi	r26, 0x80	; 128
    315a:	bf e3       	ldi	r27, 0x3F	; 63
    315c:	8d ab       	std	Y+53, r24	; 0x35
    315e:	9e ab       	std	Y+54, r25	; 0x36
    3160:	af ab       	std	Y+55, r26	; 0x37
    3162:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3164:	6d a9       	ldd	r22, Y+53	; 0x35
    3166:	7e a9       	ldd	r23, Y+54	; 0x36
    3168:	8f a9       	ldd	r24, Y+55	; 0x37
    316a:	98 ad       	ldd	r25, Y+56	; 0x38
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	4a e7       	ldi	r20, 0x7A	; 122
    3172:	55 e4       	ldi	r21, 0x45	; 69
    3174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	89 ab       	std	Y+49, r24	; 0x31
    317e:	9a ab       	std	Y+50, r25	; 0x32
    3180:	ab ab       	std	Y+51, r26	; 0x33
    3182:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3184:	69 a9       	ldd	r22, Y+49	; 0x31
    3186:	7a a9       	ldd	r23, Y+50	; 0x32
    3188:	8b a9       	ldd	r24, Y+51	; 0x33
    318a:	9c a9       	ldd	r25, Y+52	; 0x34
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	40 e8       	ldi	r20, 0x80	; 128
    3192:	5f e3       	ldi	r21, 0x3F	; 63
    3194:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    3198:	88 23       	and	r24, r24
    319a:	2c f4       	brge	.+10     	; 0x31a6 <LCD_displayCharacter+0x78>
		__ticks = 1;
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	98 ab       	std	Y+48, r25	; 0x30
    31a2:	8f a7       	std	Y+47, r24	; 0x2f
    31a4:	3f c0       	rjmp	.+126    	; 0x3224 <LCD_displayCharacter+0xf6>
	else if (__tmp > 65535)
    31a6:	69 a9       	ldd	r22, Y+49	; 0x31
    31a8:	7a a9       	ldd	r23, Y+50	; 0x32
    31aa:	8b a9       	ldd	r24, Y+51	; 0x33
    31ac:	9c a9       	ldd	r25, Y+52	; 0x34
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	3f ef       	ldi	r19, 0xFF	; 255
    31b2:	4f e7       	ldi	r20, 0x7F	; 127
    31b4:	57 e4       	ldi	r21, 0x47	; 71
    31b6:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    31ba:	18 16       	cp	r1, r24
    31bc:	4c f5       	brge	.+82     	; 0x3210 <LCD_displayCharacter+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31be:	6d a9       	ldd	r22, Y+53	; 0x35
    31c0:	7e a9       	ldd	r23, Y+54	; 0x36
    31c2:	8f a9       	ldd	r24, Y+55	; 0x37
    31c4:	98 ad       	ldd	r25, Y+56	; 0x38
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	40 e2       	ldi	r20, 0x20	; 32
    31cc:	51 e4       	ldi	r21, 0x41	; 65
    31ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	bc 01       	movw	r22, r24
    31d8:	cd 01       	movw	r24, r26
    31da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	98 ab       	std	Y+48, r25	; 0x30
    31e4:	8f a7       	std	Y+47, r24	; 0x2f
    31e6:	0f c0       	rjmp	.+30     	; 0x3206 <LCD_displayCharacter+0xd8>
    31e8:	80 e9       	ldi	r24, 0x90	; 144
    31ea:	91 e0       	ldi	r25, 0x01	; 1
    31ec:	9e a7       	std	Y+46, r25	; 0x2e
    31ee:	8d a7       	std	Y+45, r24	; 0x2d
    31f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    31f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    31f4:	01 97       	sbiw	r24, 0x01	; 1
    31f6:	f1 f7       	brne	.-4      	; 0x31f4 <LCD_displayCharacter+0xc6>
    31f8:	9e a7       	std	Y+46, r25	; 0x2e
    31fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    31fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3200:	01 97       	sbiw	r24, 0x01	; 1
    3202:	98 ab       	std	Y+48, r25	; 0x30
    3204:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3206:	8f a5       	ldd	r24, Y+47	; 0x2f
    3208:	98 a9       	ldd	r25, Y+48	; 0x30
    320a:	00 97       	sbiw	r24, 0x00	; 0
    320c:	69 f7       	brne	.-38     	; 0x31e8 <LCD_displayCharacter+0xba>
    320e:	14 c0       	rjmp	.+40     	; 0x3238 <LCD_displayCharacter+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3210:	69 a9       	ldd	r22, Y+49	; 0x31
    3212:	7a a9       	ldd	r23, Y+50	; 0x32
    3214:	8b a9       	ldd	r24, Y+51	; 0x33
    3216:	9c a9       	ldd	r25, Y+52	; 0x34
    3218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	98 ab       	std	Y+48, r25	; 0x30
    3222:	8f a7       	std	Y+47, r24	; 0x2f
    3224:	8f a5       	ldd	r24, Y+47	; 0x2f
    3226:	98 a9       	ldd	r25, Y+48	; 0x30
    3228:	9c a7       	std	Y+44, r25	; 0x2c
    322a:	8b a7       	std	Y+43, r24	; 0x2b
    322c:	8b a5       	ldd	r24, Y+43	; 0x2b
    322e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	f1 f7       	brne	.-4      	; 0x3230 <LCD_displayCharacter+0x102>
    3234:	9c a7       	std	Y+44, r25	; 0x2c
    3236:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    3238:	83 e0       	ldi	r24, 0x03	; 3
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	65 e0       	ldi	r22, 0x05	; 5
    323e:	70 e0       	ldi	r23, 0x00	; 0
    3240:	41 e0       	ldi	r20, 0x01	; 1
    3242:	50 e0       	ldi	r21, 0x00	; 0
    3244:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCD_setPinValue>
    3248:	80 e0       	ldi	r24, 0x00	; 0
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	a0 e8       	ldi	r26, 0x80	; 128
    324e:	bf e3       	ldi	r27, 0x3F	; 63
    3250:	8f a3       	std	Y+39, r24	; 0x27
    3252:	98 a7       	std	Y+40, r25	; 0x28
    3254:	a9 a7       	std	Y+41, r26	; 0x29
    3256:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3258:	6f a1       	ldd	r22, Y+39	; 0x27
    325a:	78 a5       	ldd	r23, Y+40	; 0x28
    325c:	89 a5       	ldd	r24, Y+41	; 0x29
    325e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	4a e7       	ldi	r20, 0x7A	; 122
    3266:	55 e4       	ldi	r21, 0x45	; 69
    3268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	8b a3       	std	Y+35, r24	; 0x23
    3272:	9c a3       	std	Y+36, r25	; 0x24
    3274:	ad a3       	std	Y+37, r26	; 0x25
    3276:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3278:	6b a1       	ldd	r22, Y+35	; 0x23
    327a:	7c a1       	ldd	r23, Y+36	; 0x24
    327c:	8d a1       	ldd	r24, Y+37	; 0x25
    327e:	9e a1       	ldd	r25, Y+38	; 0x26
    3280:	20 e0       	ldi	r18, 0x00	; 0
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	40 e8       	ldi	r20, 0x80	; 128
    3286:	5f e3       	ldi	r21, 0x3F	; 63
    3288:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    328c:	88 23       	and	r24, r24
    328e:	2c f4       	brge	.+10     	; 0x329a <LCD_displayCharacter+0x16c>
		__ticks = 1;
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	9a a3       	std	Y+34, r25	; 0x22
    3296:	89 a3       	std	Y+33, r24	; 0x21
    3298:	3f c0       	rjmp	.+126    	; 0x3318 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    329a:	6b a1       	ldd	r22, Y+35	; 0x23
    329c:	7c a1       	ldd	r23, Y+36	; 0x24
    329e:	8d a1       	ldd	r24, Y+37	; 0x25
    32a0:	9e a1       	ldd	r25, Y+38	; 0x26
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	3f ef       	ldi	r19, 0xFF	; 255
    32a6:	4f e7       	ldi	r20, 0x7F	; 127
    32a8:	57 e4       	ldi	r21, 0x47	; 71
    32aa:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    32ae:	18 16       	cp	r1, r24
    32b0:	4c f5       	brge	.+82     	; 0x3304 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b2:	6f a1       	ldd	r22, Y+39	; 0x27
    32b4:	78 a5       	ldd	r23, Y+40	; 0x28
    32b6:	89 a5       	ldd	r24, Y+41	; 0x29
    32b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	40 e2       	ldi	r20, 0x20	; 32
    32c0:	51 e4       	ldi	r21, 0x41	; 65
    32c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c6:	dc 01       	movw	r26, r24
    32c8:	cb 01       	movw	r24, r22
    32ca:	bc 01       	movw	r22, r24
    32cc:	cd 01       	movw	r24, r26
    32ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d2:	dc 01       	movw	r26, r24
    32d4:	cb 01       	movw	r24, r22
    32d6:	9a a3       	std	Y+34, r25	; 0x22
    32d8:	89 a3       	std	Y+33, r24	; 0x21
    32da:	0f c0       	rjmp	.+30     	; 0x32fa <LCD_displayCharacter+0x1cc>
    32dc:	80 e9       	ldi	r24, 0x90	; 144
    32de:	91 e0       	ldi	r25, 0x01	; 1
    32e0:	98 a3       	std	Y+32, r25	; 0x20
    32e2:	8f 8f       	std	Y+31, r24	; 0x1f
    32e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32e6:	98 a1       	ldd	r25, Y+32	; 0x20
    32e8:	01 97       	sbiw	r24, 0x01	; 1
    32ea:	f1 f7       	brne	.-4      	; 0x32e8 <LCD_displayCharacter+0x1ba>
    32ec:	98 a3       	std	Y+32, r25	; 0x20
    32ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f0:	89 a1       	ldd	r24, Y+33	; 0x21
    32f2:	9a a1       	ldd	r25, Y+34	; 0x22
    32f4:	01 97       	sbiw	r24, 0x01	; 1
    32f6:	9a a3       	std	Y+34, r25	; 0x22
    32f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32fa:	89 a1       	ldd	r24, Y+33	; 0x21
    32fc:	9a a1       	ldd	r25, Y+34	; 0x22
    32fe:	00 97       	sbiw	r24, 0x00	; 0
    3300:	69 f7       	brne	.-38     	; 0x32dc <LCD_displayCharacter+0x1ae>
    3302:	14 c0       	rjmp	.+40     	; 0x332c <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3304:	6b a1       	ldd	r22, Y+35	; 0x23
    3306:	7c a1       	ldd	r23, Y+36	; 0x24
    3308:	8d a1       	ldd	r24, Y+37	; 0x25
    330a:	9e a1       	ldd	r25, Y+38	; 0x26
    330c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	9a a3       	std	Y+34, r25	; 0x22
    3316:	89 a3       	std	Y+33, r24	; 0x21
    3318:	89 a1       	ldd	r24, Y+33	; 0x21
    331a:	9a a1       	ldd	r25, Y+34	; 0x22
    331c:	9e 8f       	std	Y+30, r25	; 0x1e
    331e:	8d 8f       	std	Y+29, r24	; 0x1d
    3320:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3322:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3324:	01 97       	sbiw	r24, 0x01	; 1
    3326:	f1 f7       	brne	.-4      	; 0x3324 <LCD_displayCharacter+0x1f6>
    3328:	9e 8f       	std	Y+30, r25	; 0x1e
    332a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, data);
    332c:	89 ad       	ldd	r24, Y+57	; 0x39
    332e:	28 2f       	mov	r18, r24
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	82 e0       	ldi	r24, 0x02	; 2
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	b9 01       	movw	r22, r18
    3338:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LCD_setPortValue>
    333c:	80 e0       	ldi	r24, 0x00	; 0
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	a0 e8       	ldi	r26, 0x80	; 128
    3342:	bf e3       	ldi	r27, 0x3F	; 63
    3344:	89 8f       	std	Y+25, r24	; 0x19
    3346:	9a 8f       	std	Y+26, r25	; 0x1a
    3348:	ab 8f       	std	Y+27, r26	; 0x1b
    334a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    334c:	69 8d       	ldd	r22, Y+25	; 0x19
    334e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3350:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3352:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	4a e7       	ldi	r20, 0x7A	; 122
    335a:	55 e4       	ldi	r21, 0x45	; 69
    335c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	8d 8b       	std	Y+21, r24	; 0x15
    3366:	9e 8b       	std	Y+22, r25	; 0x16
    3368:	af 8b       	std	Y+23, r26	; 0x17
    336a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    336c:	6d 89       	ldd	r22, Y+21	; 0x15
    336e:	7e 89       	ldd	r23, Y+22	; 0x16
    3370:	8f 89       	ldd	r24, Y+23	; 0x17
    3372:	98 8d       	ldd	r25, Y+24	; 0x18
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	40 e8       	ldi	r20, 0x80	; 128
    337a:	5f e3       	ldi	r21, 0x3F	; 63
    337c:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    3380:	88 23       	and	r24, r24
    3382:	2c f4       	brge	.+10     	; 0x338e <LCD_displayCharacter+0x260>
		__ticks = 1;
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	9c 8b       	std	Y+20, r25	; 0x14
    338a:	8b 8b       	std	Y+19, r24	; 0x13
    338c:	3f c0       	rjmp	.+126    	; 0x340c <LCD_displayCharacter+0x2de>
	else if (__tmp > 65535)
    338e:	6d 89       	ldd	r22, Y+21	; 0x15
    3390:	7e 89       	ldd	r23, Y+22	; 0x16
    3392:	8f 89       	ldd	r24, Y+23	; 0x17
    3394:	98 8d       	ldd	r25, Y+24	; 0x18
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	3f ef       	ldi	r19, 0xFF	; 255
    339a:	4f e7       	ldi	r20, 0x7F	; 127
    339c:	57 e4       	ldi	r21, 0x47	; 71
    339e:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    33a2:	18 16       	cp	r1, r24
    33a4:	4c f5       	brge	.+82     	; 0x33f8 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a6:	69 8d       	ldd	r22, Y+25	; 0x19
    33a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	40 e2       	ldi	r20, 0x20	; 32
    33b4:	51 e4       	ldi	r21, 0x41	; 65
    33b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ba:	dc 01       	movw	r26, r24
    33bc:	cb 01       	movw	r24, r22
    33be:	bc 01       	movw	r22, r24
    33c0:	cd 01       	movw	r24, r26
    33c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	9c 8b       	std	Y+20, r25	; 0x14
    33cc:	8b 8b       	std	Y+19, r24	; 0x13
    33ce:	0f c0       	rjmp	.+30     	; 0x33ee <LCD_displayCharacter+0x2c0>
    33d0:	80 e9       	ldi	r24, 0x90	; 144
    33d2:	91 e0       	ldi	r25, 0x01	; 1
    33d4:	9a 8b       	std	Y+18, r25	; 0x12
    33d6:	89 8b       	std	Y+17, r24	; 0x11
    33d8:	89 89       	ldd	r24, Y+17	; 0x11
    33da:	9a 89       	ldd	r25, Y+18	; 0x12
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	f1 f7       	brne	.-4      	; 0x33dc <LCD_displayCharacter+0x2ae>
    33e0:	9a 8b       	std	Y+18, r25	; 0x12
    33e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e4:	8b 89       	ldd	r24, Y+19	; 0x13
    33e6:	9c 89       	ldd	r25, Y+20	; 0x14
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	9c 8b       	std	Y+20, r25	; 0x14
    33ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ee:	8b 89       	ldd	r24, Y+19	; 0x13
    33f0:	9c 89       	ldd	r25, Y+20	; 0x14
    33f2:	00 97       	sbiw	r24, 0x00	; 0
    33f4:	69 f7       	brne	.-38     	; 0x33d0 <LCD_displayCharacter+0x2a2>
    33f6:	14 c0       	rjmp	.+40     	; 0x3420 <LCD_displayCharacter+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f8:	6d 89       	ldd	r22, Y+21	; 0x15
    33fa:	7e 89       	ldd	r23, Y+22	; 0x16
    33fc:	8f 89       	ldd	r24, Y+23	; 0x17
    33fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	9c 8b       	std	Y+20, r25	; 0x14
    340a:	8b 8b       	std	Y+19, r24	; 0x13
    340c:	8b 89       	ldd	r24, Y+19	; 0x13
    340e:	9c 89       	ldd	r25, Y+20	; 0x14
    3410:	98 8b       	std	Y+16, r25	; 0x10
    3412:	8f 87       	std	Y+15, r24	; 0x0f
    3414:	8f 85       	ldd	r24, Y+15	; 0x0f
    3416:	98 89       	ldd	r25, Y+16	; 0x10
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	f1 f7       	brne	.-4      	; 0x3418 <LCD_displayCharacter+0x2ea>
    341c:	98 8b       	std	Y+16, r25	; 0x10
    341e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    3420:	83 e0       	ldi	r24, 0x03	; 3
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	65 e0       	ldi	r22, 0x05	; 5
    3426:	70 e0       	ldi	r23, 0x00	; 0
    3428:	40 e0       	ldi	r20, 0x00	; 0
    342a:	50 e0       	ldi	r21, 0x00	; 0
    342c:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCD_setPinValue>
    3430:	80 e0       	ldi	r24, 0x00	; 0
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	a0 e8       	ldi	r26, 0x80	; 128
    3436:	bf e3       	ldi	r27, 0x3F	; 63
    3438:	8b 87       	std	Y+11, r24	; 0x0b
    343a:	9c 87       	std	Y+12, r25	; 0x0c
    343c:	ad 87       	std	Y+13, r26	; 0x0d
    343e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3440:	6b 85       	ldd	r22, Y+11	; 0x0b
    3442:	7c 85       	ldd	r23, Y+12	; 0x0c
    3444:	8d 85       	ldd	r24, Y+13	; 0x0d
    3446:	9e 85       	ldd	r25, Y+14	; 0x0e
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	4a e7       	ldi	r20, 0x7A	; 122
    344e:	55 e4       	ldi	r21, 0x45	; 69
    3450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	8f 83       	std	Y+7, r24	; 0x07
    345a:	98 87       	std	Y+8, r25	; 0x08
    345c:	a9 87       	std	Y+9, r26	; 0x09
    345e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3460:	6f 81       	ldd	r22, Y+7	; 0x07
    3462:	78 85       	ldd	r23, Y+8	; 0x08
    3464:	89 85       	ldd	r24, Y+9	; 0x09
    3466:	9a 85       	ldd	r25, Y+10	; 0x0a
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	40 e8       	ldi	r20, 0x80	; 128
    346e:	5f e3       	ldi	r21, 0x3F	; 63
    3470:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    3474:	88 23       	and	r24, r24
    3476:	2c f4       	brge	.+10     	; 0x3482 <LCD_displayCharacter+0x354>
		__ticks = 1;
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	9e 83       	std	Y+6, r25	; 0x06
    347e:	8d 83       	std	Y+5, r24	; 0x05
    3480:	3f c0       	rjmp	.+126    	; 0x3500 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    3482:	6f 81       	ldd	r22, Y+7	; 0x07
    3484:	78 85       	ldd	r23, Y+8	; 0x08
    3486:	89 85       	ldd	r24, Y+9	; 0x09
    3488:	9a 85       	ldd	r25, Y+10	; 0x0a
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	3f ef       	ldi	r19, 0xFF	; 255
    348e:	4f e7       	ldi	r20, 0x7F	; 127
    3490:	57 e4       	ldi	r21, 0x47	; 71
    3492:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    3496:	18 16       	cp	r1, r24
    3498:	4c f5       	brge	.+82     	; 0x34ec <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    349a:	6b 85       	ldd	r22, Y+11	; 0x0b
    349c:	7c 85       	ldd	r23, Y+12	; 0x0c
    349e:	8d 85       	ldd	r24, Y+13	; 0x0d
    34a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	40 e2       	ldi	r20, 0x20	; 32
    34a8:	51 e4       	ldi	r21, 0x41	; 65
    34aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ae:	dc 01       	movw	r26, r24
    34b0:	cb 01       	movw	r24, r22
    34b2:	bc 01       	movw	r22, r24
    34b4:	cd 01       	movw	r24, r26
    34b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	9e 83       	std	Y+6, r25	; 0x06
    34c0:	8d 83       	std	Y+5, r24	; 0x05
    34c2:	0f c0       	rjmp	.+30     	; 0x34e2 <LCD_displayCharacter+0x3b4>
    34c4:	80 e9       	ldi	r24, 0x90	; 144
    34c6:	91 e0       	ldi	r25, 0x01	; 1
    34c8:	9c 83       	std	Y+4, r25	; 0x04
    34ca:	8b 83       	std	Y+3, r24	; 0x03
    34cc:	8b 81       	ldd	r24, Y+3	; 0x03
    34ce:	9c 81       	ldd	r25, Y+4	; 0x04
    34d0:	01 97       	sbiw	r24, 0x01	; 1
    34d2:	f1 f7       	brne	.-4      	; 0x34d0 <LCD_displayCharacter+0x3a2>
    34d4:	9c 83       	std	Y+4, r25	; 0x04
    34d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34d8:	8d 81       	ldd	r24, Y+5	; 0x05
    34da:	9e 81       	ldd	r25, Y+6	; 0x06
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	9e 83       	std	Y+6, r25	; 0x06
    34e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34e2:	8d 81       	ldd	r24, Y+5	; 0x05
    34e4:	9e 81       	ldd	r25, Y+6	; 0x06
    34e6:	00 97       	sbiw	r24, 0x00	; 0
    34e8:	69 f7       	brne	.-38     	; 0x34c4 <LCD_displayCharacter+0x396>
    34ea:	14 c0       	rjmp	.+40     	; 0x3514 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ec:	6f 81       	ldd	r22, Y+7	; 0x07
    34ee:	78 85       	ldd	r23, Y+8	; 0x08
    34f0:	89 85       	ldd	r24, Y+9	; 0x09
    34f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	9e 83       	std	Y+6, r25	; 0x06
    34fe:	8d 83       	std	Y+5, r24	; 0x05
    3500:	8d 81       	ldd	r24, Y+5	; 0x05
    3502:	9e 81       	ldd	r25, Y+6	; 0x06
    3504:	9a 83       	std	Y+2, r25	; 0x02
    3506:	89 83       	std	Y+1, r24	; 0x01
    3508:	89 81       	ldd	r24, Y+1	; 0x01
    350a:	9a 81       	ldd	r25, Y+2	; 0x02
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	f1 f7       	brne	.-4      	; 0x350c <LCD_displayCharacter+0x3de>
    3510:	9a 83       	std	Y+2, r25	; 0x02
    3512:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3514:	e9 96       	adiw	r28, 0x39	; 57
    3516:	0f b6       	in	r0, 0x3f	; 63
    3518:	f8 94       	cli
    351a:	de bf       	out	0x3e, r29	; 62
    351c:	0f be       	out	0x3f, r0	; 63
    351e:	cd bf       	out	0x3d, r28	; 61
    3520:	cf 91       	pop	r28
    3522:	df 91       	pop	r29
    3524:	08 95       	ret

00003526 <LCD_display_WriteNumber>:

void LCD_display_WriteNumber(u32 num){
    3526:	0f 93       	push	r16
    3528:	1f 93       	push	r17
    352a:	df 93       	push	r29
    352c:	cf 93       	push	r28
    352e:	cd b7       	in	r28, 0x3d	; 61
    3530:	de b7       	in	r29, 0x3e	; 62
    3532:	a6 97       	sbiw	r28, 0x26	; 38
    3534:	0f b6       	in	r0, 0x3f	; 63
    3536:	f8 94       	cli
    3538:	de bf       	out	0x3e, r29	; 62
    353a:	0f be       	out	0x3f, r0	; 63
    353c:	cd bf       	out	0x3d, r28	; 61
    353e:	6b a3       	std	Y+35, r22	; 0x23
    3540:	7c a3       	std	Y+36, r23	; 0x24
    3542:	8d a3       	std	Y+37, r24	; 0x25
    3544:	9e a3       	std	Y+38, r25	; 0x26
    u8 str[32];
    sprintf(str, "%lu", num);
    3546:	8d b7       	in	r24, 0x3d	; 61
    3548:	9e b7       	in	r25, 0x3e	; 62
    354a:	08 97       	sbiw	r24, 0x08	; 8
    354c:	0f b6       	in	r0, 0x3f	; 63
    354e:	f8 94       	cli
    3550:	9e bf       	out	0x3e, r25	; 62
    3552:	0f be       	out	0x3f, r0	; 63
    3554:	8d bf       	out	0x3d, r24	; 61
    3556:	ed b7       	in	r30, 0x3d	; 61
    3558:	fe b7       	in	r31, 0x3e	; 62
    355a:	31 96       	adiw	r30, 0x01	; 1
    355c:	ce 01       	movw	r24, r28
    355e:	03 96       	adiw	r24, 0x03	; 3
    3560:	91 83       	std	Z+1, r25	; 0x01
    3562:	80 83       	st	Z, r24
    3564:	80 e6       	ldi	r24, 0x60	; 96
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	93 83       	std	Z+3, r25	; 0x03
    356a:	82 83       	std	Z+2, r24	; 0x02
    356c:	8b a1       	ldd	r24, Y+35	; 0x23
    356e:	9c a1       	ldd	r25, Y+36	; 0x24
    3570:	ad a1       	ldd	r26, Y+37	; 0x25
    3572:	be a1       	ldd	r27, Y+38	; 0x26
    3574:	84 83       	std	Z+4, r24	; 0x04
    3576:	95 83       	std	Z+5, r25	; 0x05
    3578:	a6 83       	std	Z+6, r26	; 0x06
    357a:	b7 83       	std	Z+7, r27	; 0x07
    357c:	0e 94 ae 31 	call	0x635c	; 0x635c <sprintf>
    3580:	8d b7       	in	r24, 0x3d	; 61
    3582:	9e b7       	in	r25, 0x3e	; 62
    3584:	08 96       	adiw	r24, 0x08	; 8
    3586:	0f b6       	in	r0, 0x3f	; 63
    3588:	f8 94       	cli
    358a:	9e bf       	out	0x3e, r25	; 62
    358c:	0f be       	out	0x3f, r0	; 63
    358e:	8d bf       	out	0x3d, r24	; 61
    for (int i = 0; i < strlen(str); i++)
    3590:	1a 82       	std	Y+2, r1	; 0x02
    3592:	19 82       	std	Y+1, r1	; 0x01
    3594:	0f c0       	rjmp	.+30     	; 0x35b4 <LCD_display_WriteNumber+0x8e>
    {
    	LCD_displayCharacter(str[i]);
    3596:	29 81       	ldd	r18, Y+1	; 0x01
    3598:	3a 81       	ldd	r19, Y+2	; 0x02
    359a:	ce 01       	movw	r24, r28
    359c:	03 96       	adiw	r24, 0x03	; 3
    359e:	fc 01       	movw	r30, r24
    35a0:	e2 0f       	add	r30, r18
    35a2:	f3 1f       	adc	r31, r19
    35a4:	80 81       	ld	r24, Z
    35a6:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayCharacter>
}

void LCD_display_WriteNumber(u32 num){
    u8 str[32];
    sprintf(str, "%lu", num);
    for (int i = 0; i < strlen(str); i++)
    35aa:	89 81       	ldd	r24, Y+1	; 0x01
    35ac:	9a 81       	ldd	r25, Y+2	; 0x02
    35ae:	01 96       	adiw	r24, 0x01	; 1
    35b0:	9a 83       	std	Y+2, r25	; 0x02
    35b2:	89 83       	std	Y+1, r24	; 0x01
    35b4:	09 81       	ldd	r16, Y+1	; 0x01
    35b6:	1a 81       	ldd	r17, Y+2	; 0x02
    35b8:	ce 01       	movw	r24, r28
    35ba:	03 96       	adiw	r24, 0x03	; 3
    35bc:	0e 94 a5 31 	call	0x634a	; 0x634a <strlen>
    35c0:	08 17       	cp	r16, r24
    35c2:	19 07       	cpc	r17, r25
    35c4:	40 f3       	brcs	.-48     	; 0x3596 <LCD_display_WriteNumber+0x70>
    {
    	LCD_displayCharacter(str[i]);
    }
}
    35c6:	a6 96       	adiw	r28, 0x26	; 38
    35c8:	0f b6       	in	r0, 0x3f	; 63
    35ca:	f8 94       	cli
    35cc:	de bf       	out	0x3e, r29	; 62
    35ce:	0f be       	out	0x3f, r0	; 63
    35d0:	cd bf       	out	0x3d, r28	; 61
    35d2:	cf 91       	pop	r28
    35d4:	df 91       	pop	r29
    35d6:	1f 91       	pop	r17
    35d8:	0f 91       	pop	r16
    35da:	08 95       	ret

000035dc <LCD_init>:


void LCD_init(void)
{
    35dc:	df 93       	push	r29
    35de:	cf 93       	push	r28
    35e0:	cd b7       	in	r28, 0x3d	; 61
    35e2:	de b7       	in	r29, 0x3e	; 62
    35e4:	2e 97       	sbiw	r28, 0x0e	; 14
    35e6:	0f b6       	in	r0, 0x3f	; 63
    35e8:	f8 94       	cli
    35ea:	de bf       	out	0x3e, r29	; 62
    35ec:	0f be       	out	0x3f, r0	; 63
    35ee:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    35f0:	83 e0       	ldi	r24, 0x03	; 3
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	64 e0       	ldi	r22, 0x04	; 4
    35f6:	70 e0       	ldi	r23, 0x00	; 0
    35f8:	41 e0       	ldi	r20, 0x01	; 1
    35fa:	50 e0       	ldi	r21, 0x00	; 0
    35fc:	0e 94 3e 0a 	call	0x147c	; 0x147c <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    3600:	83 e0       	ldi	r24, 0x03	; 3
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	65 e0       	ldi	r22, 0x05	; 5
    3606:	70 e0       	ldi	r23, 0x00	; 0
    3608:	41 e0       	ldi	r20, 0x01	; 1
    360a:	50 e0       	ldi	r21, 0x00	; 0
    360c:	0e 94 3e 0a 	call	0x147c	; 0x147c <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    3610:	82 e0       	ldi	r24, 0x02	; 2
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	6f ef       	ldi	r22, 0xFF	; 255
    3616:	70 e0       	ldi	r23, 0x00	; 0
    3618:	0e 94 af 0c 	call	0x195e	; 0x195e <LCD_setPortDirection>
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	a0 ea       	ldi	r26, 0xA0	; 160
    3622:	b1 e4       	ldi	r27, 0x41	; 65
    3624:	8b 87       	std	Y+11, r24	; 0x0b
    3626:	9c 87       	std	Y+12, r25	; 0x0c
    3628:	ad 87       	std	Y+13, r26	; 0x0d
    362a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    362c:	6b 85       	ldd	r22, Y+11	; 0x0b
    362e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3630:	8d 85       	ldd	r24, Y+13	; 0x0d
    3632:	9e 85       	ldd	r25, Y+14	; 0x0e
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	4a e7       	ldi	r20, 0x7A	; 122
    363a:	55 e4       	ldi	r21, 0x45	; 69
    363c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	8f 83       	std	Y+7, r24	; 0x07
    3646:	98 87       	std	Y+8, r25	; 0x08
    3648:	a9 87       	std	Y+9, r26	; 0x09
    364a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    364c:	6f 81       	ldd	r22, Y+7	; 0x07
    364e:	78 85       	ldd	r23, Y+8	; 0x08
    3650:	89 85       	ldd	r24, Y+9	; 0x09
    3652:	9a 85       	ldd	r25, Y+10	; 0x0a
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	40 e8       	ldi	r20, 0x80	; 128
    365a:	5f e3       	ldi	r21, 0x3F	; 63
    365c:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    3660:	88 23       	and	r24, r24
    3662:	2c f4       	brge	.+10     	; 0x366e <LCD_init+0x92>
		__ticks = 1;
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	9e 83       	std	Y+6, r25	; 0x06
    366a:	8d 83       	std	Y+5, r24	; 0x05
    366c:	3f c0       	rjmp	.+126    	; 0x36ec <LCD_init+0x110>
	else if (__tmp > 65535)
    366e:	6f 81       	ldd	r22, Y+7	; 0x07
    3670:	78 85       	ldd	r23, Y+8	; 0x08
    3672:	89 85       	ldd	r24, Y+9	; 0x09
    3674:	9a 85       	ldd	r25, Y+10	; 0x0a
    3676:	20 e0       	ldi	r18, 0x00	; 0
    3678:	3f ef       	ldi	r19, 0xFF	; 255
    367a:	4f e7       	ldi	r20, 0x7F	; 127
    367c:	57 e4       	ldi	r21, 0x47	; 71
    367e:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    3682:	18 16       	cp	r1, r24
    3684:	4c f5       	brge	.+82     	; 0x36d8 <LCD_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3686:	6b 85       	ldd	r22, Y+11	; 0x0b
    3688:	7c 85       	ldd	r23, Y+12	; 0x0c
    368a:	8d 85       	ldd	r24, Y+13	; 0x0d
    368c:	9e 85       	ldd	r25, Y+14	; 0x0e
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	40 e2       	ldi	r20, 0x20	; 32
    3694:	51 e4       	ldi	r21, 0x41	; 65
    3696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    369a:	dc 01       	movw	r26, r24
    369c:	cb 01       	movw	r24, r22
    369e:	bc 01       	movw	r22, r24
    36a0:	cd 01       	movw	r24, r26
    36a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a6:	dc 01       	movw	r26, r24
    36a8:	cb 01       	movw	r24, r22
    36aa:	9e 83       	std	Y+6, r25	; 0x06
    36ac:	8d 83       	std	Y+5, r24	; 0x05
    36ae:	0f c0       	rjmp	.+30     	; 0x36ce <LCD_init+0xf2>
    36b0:	80 e9       	ldi	r24, 0x90	; 144
    36b2:	91 e0       	ldi	r25, 0x01	; 1
    36b4:	9c 83       	std	Y+4, r25	; 0x04
    36b6:	8b 83       	std	Y+3, r24	; 0x03
    36b8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ba:	9c 81       	ldd	r25, Y+4	; 0x04
    36bc:	01 97       	sbiw	r24, 0x01	; 1
    36be:	f1 f7       	brne	.-4      	; 0x36bc <LCD_init+0xe0>
    36c0:	9c 83       	std	Y+4, r25	; 0x04
    36c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c4:	8d 81       	ldd	r24, Y+5	; 0x05
    36c6:	9e 81       	ldd	r25, Y+6	; 0x06
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	9e 83       	std	Y+6, r25	; 0x06
    36cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ce:	8d 81       	ldd	r24, Y+5	; 0x05
    36d0:	9e 81       	ldd	r25, Y+6	; 0x06
    36d2:	00 97       	sbiw	r24, 0x00	; 0
    36d4:	69 f7       	brne	.-38     	; 0x36b0 <LCD_init+0xd4>
    36d6:	14 c0       	rjmp	.+40     	; 0x3700 <LCD_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d8:	6f 81       	ldd	r22, Y+7	; 0x07
    36da:	78 85       	ldd	r23, Y+8	; 0x08
    36dc:	89 85       	ldd	r24, Y+9	; 0x09
    36de:	9a 85       	ldd	r25, Y+10	; 0x0a
    36e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	9e 83       	std	Y+6, r25	; 0x06
    36ea:	8d 83       	std	Y+5, r24	; 0x05
    36ec:	8d 81       	ldd	r24, Y+5	; 0x05
    36ee:	9e 81       	ldd	r25, Y+6	; 0x06
    36f0:	9a 83       	std	Y+2, r25	; 0x02
    36f2:	89 83       	std	Y+1, r24	; 0x01
    36f4:	89 81       	ldd	r24, Y+1	; 0x01
    36f6:	9a 81       	ldd	r25, Y+2	; 0x02
    36f8:	01 97       	sbiw	r24, 0x01	; 1
    36fa:	f1 f7       	brne	.-4      	; 0x36f8 <LCD_init+0x11c>
    36fc:	9a 83       	std	Y+2, r25	; 0x02
    36fe:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    3700:	88 e3       	ldi	r24, 0x38	; 56
    3702:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    3706:	8c e0       	ldi	r24, 0x0C	; 12
    3708:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    370c:	81 e0       	ldi	r24, 0x01	; 1
    370e:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_sendCommand>
}
    3712:	2e 96       	adiw	r28, 0x0e	; 14
    3714:	0f b6       	in	r0, 0x3f	; 63
    3716:	f8 94       	cli
    3718:	de bf       	out	0x3e, r29	; 62
    371a:	0f be       	out	0x3f, r0	; 63
    371c:	cd bf       	out	0x3d, r28	; 61
    371e:	cf 91       	pop	r28
    3720:	df 91       	pop	r29
    3722:	08 95       	ret

00003724 <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    3724:	df 93       	push	r29
    3726:	cf 93       	push	r28
    3728:	00 d0       	rcall	.+0      	; 0x372a <LCD_GoToXY+0x6>
    372a:	00 d0       	rcall	.+0      	; 0x372c <LCD_GoToXY+0x8>
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
    3730:	89 83       	std	Y+1, r24	; 0x01
    3732:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    3734:	89 81       	ldd	r24, Y+1	; 0x01
    3736:	88 32       	cpi	r24, 0x28	; 40
    3738:	c0 f4       	brcc	.+48     	; 0x376a <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    373a:	89 81       	ldd	r24, Y+1	; 0x01
    373c:	28 2f       	mov	r18, r24
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	3c 83       	std	Y+4, r19	; 0x04
    3742:	2b 83       	std	Y+3, r18	; 0x03
    3744:	8b 81       	ldd	r24, Y+3	; 0x03
    3746:	9c 81       	ldd	r25, Y+4	; 0x04
    3748:	00 97       	sbiw	r24, 0x00	; 0
    374a:	31 f0       	breq	.+12     	; 0x3758 <LCD_GoToXY+0x34>
    374c:	2b 81       	ldd	r18, Y+3	; 0x03
    374e:	3c 81       	ldd	r19, Y+4	; 0x04
    3750:	21 30       	cpi	r18, 0x01	; 1
    3752:	31 05       	cpc	r19, r1
    3754:	31 f0       	breq	.+12     	; 0x3762 <LCD_GoToXY+0x3e>
    3756:	09 c0       	rjmp	.+18     	; 0x376a <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    3758:	8a 81       	ldd	r24, Y+2	; 0x02
    375a:	80 58       	subi	r24, 0x80	; 128
    375c:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_sendCommand>
    3760:	04 c0       	rjmp	.+8      	; 0x376a <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    3762:	8a 81       	ldd	r24, Y+2	; 0x02
    3764:	80 54       	subi	r24, 0x40	; 64
    3766:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_sendCommand>
			break;
		}
	}
}
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	0f 90       	pop	r0
    3770:	0f 90       	pop	r0
    3772:	cf 91       	pop	r28
    3774:	df 91       	pop	r29
    3776:	08 95       	ret

00003778 <LCD_displayString>:

void LCD_displayString(const char *str)
{
    3778:	df 93       	push	r29
    377a:	cf 93       	push	r28
    377c:	00 d0       	rcall	.+0      	; 0x377e <LCD_displayString+0x6>
    377e:	0f 92       	push	r0
    3780:	cd b7       	in	r28, 0x3d	; 61
    3782:	de b7       	in	r29, 0x3e	; 62
    3784:	9b 83       	std	Y+3, r25	; 0x03
    3786:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    3788:	19 82       	std	Y+1, r1	; 0x01
    378a:	0e c0       	rjmp	.+28     	; 0x37a8 <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	28 2f       	mov	r18, r24
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	8a 81       	ldd	r24, Y+2	; 0x02
    3794:	9b 81       	ldd	r25, Y+3	; 0x03
    3796:	fc 01       	movw	r30, r24
    3798:	e2 0f       	add	r30, r18
    379a:	f3 1f       	adc	r31, r19
    379c:	80 81       	ld	r24, Z
    379e:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayCharacter>
		i++;
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
    37a4:	8f 5f       	subi	r24, 0xFF	; 255
    37a6:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    37a8:	89 81       	ldd	r24, Y+1	; 0x01
    37aa:	28 2f       	mov	r18, r24
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	8a 81       	ldd	r24, Y+2	; 0x02
    37b0:	9b 81       	ldd	r25, Y+3	; 0x03
    37b2:	fc 01       	movw	r30, r24
    37b4:	e2 0f       	add	r30, r18
    37b6:	f3 1f       	adc	r31, r19
    37b8:	80 81       	ld	r24, Z
    37ba:	88 23       	and	r24, r24
    37bc:	39 f7       	brne	.-50     	; 0x378c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    37be:	0f 90       	pop	r0
    37c0:	0f 90       	pop	r0
    37c2:	0f 90       	pop	r0
    37c4:	cf 91       	pop	r28
    37c6:	df 91       	pop	r29
    37c8:	08 95       	ret

000037ca <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */
{
    37ca:	df 93       	push	r29
    37cc:	cf 93       	push	r28
    37ce:	cd b7       	in	r28, 0x3d	; 61
    37d0:	de b7       	in	r29, 0x3e	; 62
    37d2:	28 97       	sbiw	r28, 0x08	; 8
    37d4:	0f b6       	in	r0, 0x3f	; 63
    37d6:	f8 94       	cli
    37d8:	de bf       	out	0x3e, r29	; 62
    37da:	0f be       	out	0x3f, r0	; 63
    37dc:	cd bf       	out	0x3d, r28	; 61
    37de:	8b 83       	std	Y+3, r24	; 0x03
    37e0:	6c 83       	std	Y+4, r22	; 0x04
    37e2:	5e 83       	std	Y+6, r21	; 0x06
    37e4:	4d 83       	std	Y+5, r20	; 0x05
    37e6:	38 87       	std	Y+8, r19	; 0x08
    37e8:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    37ea:	1a 82       	std	Y+2, r1	; 0x02
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    37f0:	8b 81       	ldd	r24, Y+3	; 0x03
    37f2:	88 23       	and	r24, r24
    37f4:	49 f4       	brne	.+18     	; 0x3808 <LCD_String_xy+0x3e>
    37f6:	8c 81       	ldd	r24, Y+4	; 0x04
    37f8:	80 31       	cpi	r24, 0x10	; 16
    37fa:	30 f4       	brcc	.+12     	; 0x3808 <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    37fc:	8c 81       	ldd	r24, Y+4	; 0x04
    37fe:	8f 70       	andi	r24, 0x0F	; 15
    3800:	80 68       	ori	r24, 0x80	; 128
    3802:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_sendCommand>
    3806:	3a c0       	rjmp	.+116    	; 0x387c <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    3808:	8b 81       	ldd	r24, Y+3	; 0x03
    380a:	81 30       	cpi	r24, 0x01	; 1
    380c:	b9 f5       	brne	.+110    	; 0x387c <LCD_String_xy+0xb2>
    380e:	8c 81       	ldd	r24, Y+4	; 0x04
    3810:	80 31       	cpi	r24, 0x10	; 16
    3812:	a0 f5       	brcc	.+104    	; 0x387c <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    3814:	8c 81       	ldd	r24, Y+4	; 0x04
    3816:	8f 70       	andi	r24, 0x0F	; 15
    3818:	80 6c       	ori	r24, 0xC0	; 192
    381a:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_sendCommand>
    381e:	2e c0       	rjmp	.+92     	; 0x387c <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    3820:	8a 81       	ldd	r24, Y+2	; 0x02
    3822:	28 2f       	mov	r18, r24
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	8d 81       	ldd	r24, Y+5	; 0x05
    3828:	9e 81       	ldd	r25, Y+6	; 0x06
    382a:	fc 01       	movw	r30, r24
    382c:	e2 0f       	add	r30, r18
    382e:	f3 1f       	adc	r31, r19
    3830:	80 81       	ld	r24, Z
    3832:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayCharacter>
		i++;
    3836:	8a 81       	ldd	r24, Y+2	; 0x02
    3838:	8f 5f       	subi	r24, 0xFF	; 255
    383a:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    383c:	8b 81       	ldd	r24, Y+3	; 0x03
    383e:	88 23       	and	r24, r24
    3840:	71 f4       	brne	.+28     	; 0x385e <LCD_String_xy+0x94>
    3842:	8c 81       	ldd	r24, Y+4	; 0x04
    3844:	83 30       	cpi	r24, 0x03	; 3
    3846:	58 f0       	brcs	.+22     	; 0x385e <LCD_String_xy+0x94>
    3848:	8a 81       	ldd	r24, Y+2	; 0x02
    384a:	8b 30       	cpi	r24, 0x0B	; 11
    384c:	41 f4       	brne	.+16     	; 0x385e <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    384e:	81 e0       	ldi	r24, 0x01	; 1
    3850:	60 e0       	ldi	r22, 0x00	; 0
    3852:	0e 94 92 1b 	call	0x3724	; 0x3724 <LCD_GoToXY>
			c++;
    3856:	89 81       	ldd	r24, Y+1	; 0x01
    3858:	8f 5f       	subi	r24, 0xFF	; 255
    385a:	89 83       	std	Y+1, r24	; 0x01
    385c:	0b c0       	rjmp	.+22     	; 0x3874 <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    385e:	8b 81       	ldd	r24, Y+3	; 0x03
    3860:	81 30       	cpi	r24, 0x01	; 1
    3862:	41 f4       	brne	.+16     	; 0x3874 <LCD_String_xy+0xaa>
    3864:	8c 81       	ldd	r24, Y+4	; 0x04
    3866:	83 30       	cpi	r24, 0x03	; 3
    3868:	28 f0       	brcs	.+10     	; 0x3874 <LCD_String_xy+0xaa>
    386a:	8a 81       	ldd	r24, Y+2	; 0x02
    386c:	8b 30       	cpi	r24, 0x0B	; 11
    386e:	11 f4       	brne	.+4      	; 0x3874 <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    3870:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <LCD_ClearScreen>
		}

		*count = c;
    3874:	ef 81       	ldd	r30, Y+7	; 0x07
    3876:	f8 85       	ldd	r31, Y+8	; 0x08
    3878:	89 81       	ldd	r24, Y+1	; 0x01
    387a:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    387c:	8a 81       	ldd	r24, Y+2	; 0x02
    387e:	28 2f       	mov	r18, r24
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	8d 81       	ldd	r24, Y+5	; 0x05
    3884:	9e 81       	ldd	r25, Y+6	; 0x06
    3886:	fc 01       	movw	r30, r24
    3888:	e2 0f       	add	r30, r18
    388a:	f3 1f       	adc	r31, r19
    388c:	80 81       	ld	r24, Z
    388e:	88 23       	and	r24, r24
    3890:	39 f6       	brne	.-114    	; 0x3820 <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    3892:	28 96       	adiw	r28, 0x08	; 8
    3894:	0f b6       	in	r0, 0x3f	; 63
    3896:	f8 94       	cli
    3898:	de bf       	out	0x3e, r29	; 62
    389a:	0f be       	out	0x3f, r0	; 63
    389c:	cd bf       	out	0x3d, r28	; 61
    389e:	cf 91       	pop	r28
    38a0:	df 91       	pop	r29
    38a2:	08 95       	ret

000038a4 <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    38a4:	df 93       	push	r29
    38a6:	cf 93       	push	r28
    38a8:	cd b7       	in	r28, 0x3d	; 61
    38aa:	de b7       	in	r29, 0x3e	; 62
    38ac:	2e 97       	sbiw	r28, 0x0e	; 14
    38ae:	0f b6       	in	r0, 0x3f	; 63
    38b0:	f8 94       	cli
    38b2:	de bf       	out	0x3e, r29	; 62
    38b4:	0f be       	out	0x3f, r0	; 63
    38b6:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_sendCommand>
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	a0 e0       	ldi	r26, 0x00	; 0
    38c4:	b0 e4       	ldi	r27, 0x40	; 64
    38c6:	8b 87       	std	Y+11, r24	; 0x0b
    38c8:	9c 87       	std	Y+12, r25	; 0x0c
    38ca:	ad 87       	std	Y+13, r26	; 0x0d
    38cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    38d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38d6:	20 e0       	ldi	r18, 0x00	; 0
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	4a e7       	ldi	r20, 0x7A	; 122
    38dc:	55 e4       	ldi	r21, 0x45	; 69
    38de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e2:	dc 01       	movw	r26, r24
    38e4:	cb 01       	movw	r24, r22
    38e6:	8f 83       	std	Y+7, r24	; 0x07
    38e8:	98 87       	std	Y+8, r25	; 0x08
    38ea:	a9 87       	std	Y+9, r26	; 0x09
    38ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38ee:	6f 81       	ldd	r22, Y+7	; 0x07
    38f0:	78 85       	ldd	r23, Y+8	; 0x08
    38f2:	89 85       	ldd	r24, Y+9	; 0x09
    38f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	40 e8       	ldi	r20, 0x80	; 128
    38fc:	5f e3       	ldi	r21, 0x3F	; 63
    38fe:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    3902:	88 23       	and	r24, r24
    3904:	2c f4       	brge	.+10     	; 0x3910 <LCD_ClearScreen+0x6c>
		__ticks = 1;
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	9e 83       	std	Y+6, r25	; 0x06
    390c:	8d 83       	std	Y+5, r24	; 0x05
    390e:	3f c0       	rjmp	.+126    	; 0x398e <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    3910:	6f 81       	ldd	r22, Y+7	; 0x07
    3912:	78 85       	ldd	r23, Y+8	; 0x08
    3914:	89 85       	ldd	r24, Y+9	; 0x09
    3916:	9a 85       	ldd	r25, Y+10	; 0x0a
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	3f ef       	ldi	r19, 0xFF	; 255
    391c:	4f e7       	ldi	r20, 0x7F	; 127
    391e:	57 e4       	ldi	r21, 0x47	; 71
    3920:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    3924:	18 16       	cp	r1, r24
    3926:	4c f5       	brge	.+82     	; 0x397a <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3928:	6b 85       	ldd	r22, Y+11	; 0x0b
    392a:	7c 85       	ldd	r23, Y+12	; 0x0c
    392c:	8d 85       	ldd	r24, Y+13	; 0x0d
    392e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	40 e2       	ldi	r20, 0x20	; 32
    3936:	51 e4       	ldi	r21, 0x41	; 65
    3938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	bc 01       	movw	r22, r24
    3942:	cd 01       	movw	r24, r26
    3944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3948:	dc 01       	movw	r26, r24
    394a:	cb 01       	movw	r24, r22
    394c:	9e 83       	std	Y+6, r25	; 0x06
    394e:	8d 83       	std	Y+5, r24	; 0x05
    3950:	0f c0       	rjmp	.+30     	; 0x3970 <LCD_ClearScreen+0xcc>
    3952:	80 e9       	ldi	r24, 0x90	; 144
    3954:	91 e0       	ldi	r25, 0x01	; 1
    3956:	9c 83       	std	Y+4, r25	; 0x04
    3958:	8b 83       	std	Y+3, r24	; 0x03
    395a:	8b 81       	ldd	r24, Y+3	; 0x03
    395c:	9c 81       	ldd	r25, Y+4	; 0x04
    395e:	01 97       	sbiw	r24, 0x01	; 1
    3960:	f1 f7       	brne	.-4      	; 0x395e <LCD_ClearScreen+0xba>
    3962:	9c 83       	std	Y+4, r25	; 0x04
    3964:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3966:	8d 81       	ldd	r24, Y+5	; 0x05
    3968:	9e 81       	ldd	r25, Y+6	; 0x06
    396a:	01 97       	sbiw	r24, 0x01	; 1
    396c:	9e 83       	std	Y+6, r25	; 0x06
    396e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3970:	8d 81       	ldd	r24, Y+5	; 0x05
    3972:	9e 81       	ldd	r25, Y+6	; 0x06
    3974:	00 97       	sbiw	r24, 0x00	; 0
    3976:	69 f7       	brne	.-38     	; 0x3952 <LCD_ClearScreen+0xae>
    3978:	14 c0       	rjmp	.+40     	; 0x39a2 <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    397a:	6f 81       	ldd	r22, Y+7	; 0x07
    397c:	78 85       	ldd	r23, Y+8	; 0x08
    397e:	89 85       	ldd	r24, Y+9	; 0x09
    3980:	9a 85       	ldd	r25, Y+10	; 0x0a
    3982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3986:	dc 01       	movw	r26, r24
    3988:	cb 01       	movw	r24, r22
    398a:	9e 83       	std	Y+6, r25	; 0x06
    398c:	8d 83       	std	Y+5, r24	; 0x05
    398e:	8d 81       	ldd	r24, Y+5	; 0x05
    3990:	9e 81       	ldd	r25, Y+6	; 0x06
    3992:	9a 83       	std	Y+2, r25	; 0x02
    3994:	89 83       	std	Y+1, r24	; 0x01
    3996:	89 81       	ldd	r24, Y+1	; 0x01
    3998:	9a 81       	ldd	r25, Y+2	; 0x02
    399a:	01 97       	sbiw	r24, 0x01	; 1
    399c:	f1 f7       	brne	.-4      	; 0x399a <LCD_ClearScreen+0xf6>
    399e:	9a 83       	std	Y+2, r25	; 0x02
    39a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    39a2:	2e 96       	adiw	r28, 0x0e	; 14
    39a4:	0f b6       	in	r0, 0x3f	; 63
    39a6:	f8 94       	cli
    39a8:	de bf       	out	0x3e, r29	; 62
    39aa:	0f be       	out	0x3f, r0	; 63
    39ac:	cd bf       	out	0x3d, r28	; 61
    39ae:	cf 91       	pop	r28
    39b0:	df 91       	pop	r29
    39b2:	08 95       	ret

000039b4 <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void)
{
    39b4:	df 93       	push	r29
    39b6:	cf 93       	push	r28
    39b8:	cd b7       	in	r28, 0x3d	; 61
    39ba:	de b7       	in	r29, 0x3e	; 62
    39bc:	2e 97       	sbiw	r28, 0x0e	; 14
    39be:	0f b6       	in	r0, 0x3f	; 63
    39c0:	f8 94       	cli
    39c2:	de bf       	out	0x3e, r29	; 62
    39c4:	0f be       	out	0x3f, r0	; 63
    39c6:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    39c8:	88 e1       	ldi	r24, 0x18	; 24
    39ca:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_sendCommand>
    39ce:	80 e0       	ldi	r24, 0x00	; 0
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	a0 ea       	ldi	r26, 0xA0	; 160
    39d4:	b1 e4       	ldi	r27, 0x41	; 65
    39d6:	8b 87       	std	Y+11, r24	; 0x0b
    39d8:	9c 87       	std	Y+12, r25	; 0x0c
    39da:	ad 87       	std	Y+13, r26	; 0x0d
    39dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39de:	6b 85       	ldd	r22, Y+11	; 0x0b
    39e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    39e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    39e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	4a e7       	ldi	r20, 0x7A	; 122
    39ec:	55 e4       	ldi	r21, 0x45	; 69
    39ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f2:	dc 01       	movw	r26, r24
    39f4:	cb 01       	movw	r24, r22
    39f6:	8f 83       	std	Y+7, r24	; 0x07
    39f8:	98 87       	std	Y+8, r25	; 0x08
    39fa:	a9 87       	std	Y+9, r26	; 0x09
    39fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3a00:	78 85       	ldd	r23, Y+8	; 0x08
    3a02:	89 85       	ldd	r24, Y+9	; 0x09
    3a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a06:	20 e0       	ldi	r18, 0x00	; 0
    3a08:	30 e0       	ldi	r19, 0x00	; 0
    3a0a:	40 e8       	ldi	r20, 0x80	; 128
    3a0c:	5f e3       	ldi	r21, 0x3F	; 63
    3a0e:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    3a12:	88 23       	and	r24, r24
    3a14:	2c f4       	brge	.+10     	; 0x3a20 <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    3a16:	81 e0       	ldi	r24, 0x01	; 1
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	9e 83       	std	Y+6, r25	; 0x06
    3a1c:	8d 83       	std	Y+5, r24	; 0x05
    3a1e:	3f c0       	rjmp	.+126    	; 0x3a9e <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    3a20:	6f 81       	ldd	r22, Y+7	; 0x07
    3a22:	78 85       	ldd	r23, Y+8	; 0x08
    3a24:	89 85       	ldd	r24, Y+9	; 0x09
    3a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a28:	20 e0       	ldi	r18, 0x00	; 0
    3a2a:	3f ef       	ldi	r19, 0xFF	; 255
    3a2c:	4f e7       	ldi	r20, 0x7F	; 127
    3a2e:	57 e4       	ldi	r21, 0x47	; 71
    3a30:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    3a34:	18 16       	cp	r1, r24
    3a36:	4c f5       	brge	.+82     	; 0x3a8a <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a38:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	40 e2       	ldi	r20, 0x20	; 32
    3a46:	51 e4       	ldi	r21, 0x41	; 65
    3a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	bc 01       	movw	r22, r24
    3a52:	cd 01       	movw	r24, r26
    3a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	9e 83       	std	Y+6, r25	; 0x06
    3a5e:	8d 83       	std	Y+5, r24	; 0x05
    3a60:	0f c0       	rjmp	.+30     	; 0x3a80 <LCD_ShiftingLeft+0xcc>
    3a62:	80 e9       	ldi	r24, 0x90	; 144
    3a64:	91 e0       	ldi	r25, 0x01	; 1
    3a66:	9c 83       	std	Y+4, r25	; 0x04
    3a68:	8b 83       	std	Y+3, r24	; 0x03
    3a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a6e:	01 97       	sbiw	r24, 0x01	; 1
    3a70:	f1 f7       	brne	.-4      	; 0x3a6e <LCD_ShiftingLeft+0xba>
    3a72:	9c 83       	std	Y+4, r25	; 0x04
    3a74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a76:	8d 81       	ldd	r24, Y+5	; 0x05
    3a78:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	9e 83       	std	Y+6, r25	; 0x06
    3a7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a80:	8d 81       	ldd	r24, Y+5	; 0x05
    3a82:	9e 81       	ldd	r25, Y+6	; 0x06
    3a84:	00 97       	sbiw	r24, 0x00	; 0
    3a86:	69 f7       	brne	.-38     	; 0x3a62 <LCD_ShiftingLeft+0xae>
    3a88:	14 c0       	rjmp	.+40     	; 0x3ab2 <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a8c:	78 85       	ldd	r23, Y+8	; 0x08
    3a8e:	89 85       	ldd	r24, Y+9	; 0x09
    3a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a96:	dc 01       	movw	r26, r24
    3a98:	cb 01       	movw	r24, r22
    3a9a:	9e 83       	std	Y+6, r25	; 0x06
    3a9c:	8d 83       	std	Y+5, r24	; 0x05
    3a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa2:	9a 83       	std	Y+2, r25	; 0x02
    3aa4:	89 83       	std	Y+1, r24	; 0x01
    3aa6:	89 81       	ldd	r24, Y+1	; 0x01
    3aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    3aaa:	01 97       	sbiw	r24, 0x01	; 1
    3aac:	f1 f7       	brne	.-4      	; 0x3aaa <LCD_ShiftingLeft+0xf6>
    3aae:	9a 83       	std	Y+2, r25	; 0x02
    3ab0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3ab2:	2e 96       	adiw	r28, 0x0e	; 14
    3ab4:	0f b6       	in	r0, 0x3f	; 63
    3ab6:	f8 94       	cli
    3ab8:	de bf       	out	0x3e, r29	; 62
    3aba:	0f be       	out	0x3f, r0	; 63
    3abc:	cd bf       	out	0x3d, r28	; 61
    3abe:	cf 91       	pop	r28
    3ac0:	df 91       	pop	r29
    3ac2:	08 95       	ret

00003ac4 <LCD_ShiftingRight>:

void LCD_ShiftingRight(void)
{
    3ac4:	df 93       	push	r29
    3ac6:	cf 93       	push	r28
    3ac8:	cd b7       	in	r28, 0x3d	; 61
    3aca:	de b7       	in	r29, 0x3e	; 62
    3acc:	2e 97       	sbiw	r28, 0x0e	; 14
    3ace:	0f b6       	in	r0, 0x3f	; 63
    3ad0:	f8 94       	cli
    3ad2:	de bf       	out	0x3e, r29	; 62
    3ad4:	0f be       	out	0x3f, r0	; 63
    3ad6:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    3ad8:	8c e1       	ldi	r24, 0x1C	; 28
    3ada:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_sendCommand>
    3ade:	80 e0       	ldi	r24, 0x00	; 0
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	a0 ea       	ldi	r26, 0xA0	; 160
    3ae4:	b1 e4       	ldi	r27, 0x41	; 65
    3ae6:	8b 87       	std	Y+11, r24	; 0x0b
    3ae8:	9c 87       	std	Y+12, r25	; 0x0c
    3aea:	ad 87       	std	Y+13, r26	; 0x0d
    3aec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aee:	6b 85       	ldd	r22, Y+11	; 0x0b
    3af0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3af2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3af4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3af6:	20 e0       	ldi	r18, 0x00	; 0
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	4a e7       	ldi	r20, 0x7A	; 122
    3afc:	55 e4       	ldi	r21, 0x45	; 69
    3afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	8f 83       	std	Y+7, r24	; 0x07
    3b08:	98 87       	std	Y+8, r25	; 0x08
    3b0a:	a9 87       	std	Y+9, r26	; 0x09
    3b0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b10:	78 85       	ldd	r23, Y+8	; 0x08
    3b12:	89 85       	ldd	r24, Y+9	; 0x09
    3b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b16:	20 e0       	ldi	r18, 0x00	; 0
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	40 e8       	ldi	r20, 0x80	; 128
    3b1c:	5f e3       	ldi	r21, 0x3F	; 63
    3b1e:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    3b22:	88 23       	and	r24, r24
    3b24:	2c f4       	brge	.+10     	; 0x3b30 <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	9e 83       	std	Y+6, r25	; 0x06
    3b2c:	8d 83       	std	Y+5, r24	; 0x05
    3b2e:	3f c0       	rjmp	.+126    	; 0x3bae <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    3b30:	6f 81       	ldd	r22, Y+7	; 0x07
    3b32:	78 85       	ldd	r23, Y+8	; 0x08
    3b34:	89 85       	ldd	r24, Y+9	; 0x09
    3b36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b38:	20 e0       	ldi	r18, 0x00	; 0
    3b3a:	3f ef       	ldi	r19, 0xFF	; 255
    3b3c:	4f e7       	ldi	r20, 0x7F	; 127
    3b3e:	57 e4       	ldi	r21, 0x47	; 71
    3b40:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    3b44:	18 16       	cp	r1, r24
    3b46:	4c f5       	brge	.+82     	; 0x3b9a <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b48:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b50:	20 e0       	ldi	r18, 0x00	; 0
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	40 e2       	ldi	r20, 0x20	; 32
    3b56:	51 e4       	ldi	r21, 0x41	; 65
    3b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b5c:	dc 01       	movw	r26, r24
    3b5e:	cb 01       	movw	r24, r22
    3b60:	bc 01       	movw	r22, r24
    3b62:	cd 01       	movw	r24, r26
    3b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b68:	dc 01       	movw	r26, r24
    3b6a:	cb 01       	movw	r24, r22
    3b6c:	9e 83       	std	Y+6, r25	; 0x06
    3b6e:	8d 83       	std	Y+5, r24	; 0x05
    3b70:	0f c0       	rjmp	.+30     	; 0x3b90 <LCD_ShiftingRight+0xcc>
    3b72:	80 e9       	ldi	r24, 0x90	; 144
    3b74:	91 e0       	ldi	r25, 0x01	; 1
    3b76:	9c 83       	std	Y+4, r25	; 0x04
    3b78:	8b 83       	std	Y+3, r24	; 0x03
    3b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b7e:	01 97       	sbiw	r24, 0x01	; 1
    3b80:	f1 f7       	brne	.-4      	; 0x3b7e <LCD_ShiftingRight+0xba>
    3b82:	9c 83       	std	Y+4, r25	; 0x04
    3b84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b86:	8d 81       	ldd	r24, Y+5	; 0x05
    3b88:	9e 81       	ldd	r25, Y+6	; 0x06
    3b8a:	01 97       	sbiw	r24, 0x01	; 1
    3b8c:	9e 83       	std	Y+6, r25	; 0x06
    3b8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b90:	8d 81       	ldd	r24, Y+5	; 0x05
    3b92:	9e 81       	ldd	r25, Y+6	; 0x06
    3b94:	00 97       	sbiw	r24, 0x00	; 0
    3b96:	69 f7       	brne	.-38     	; 0x3b72 <LCD_ShiftingRight+0xae>
    3b98:	14 c0       	rjmp	.+40     	; 0x3bc2 <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b9a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b9c:	78 85       	ldd	r23, Y+8	; 0x08
    3b9e:	89 85       	ldd	r24, Y+9	; 0x09
    3ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba6:	dc 01       	movw	r26, r24
    3ba8:	cb 01       	movw	r24, r22
    3baa:	9e 83       	std	Y+6, r25	; 0x06
    3bac:	8d 83       	std	Y+5, r24	; 0x05
    3bae:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb2:	9a 83       	std	Y+2, r25	; 0x02
    3bb4:	89 83       	std	Y+1, r24	; 0x01
    3bb6:	89 81       	ldd	r24, Y+1	; 0x01
    3bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bba:	01 97       	sbiw	r24, 0x01	; 1
    3bbc:	f1 f7       	brne	.-4      	; 0x3bba <LCD_ShiftingRight+0xf6>
    3bbe:	9a 83       	std	Y+2, r25	; 0x02
    3bc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3bc2:	2e 96       	adiw	r28, 0x0e	; 14
    3bc4:	0f b6       	in	r0, 0x3f	; 63
    3bc6:	f8 94       	cli
    3bc8:	de bf       	out	0x3e, r29	; 62
    3bca:	0f be       	out	0x3f, r0	; 63
    3bcc:	cd bf       	out	0x3d, r28	; 61
    3bce:	cf 91       	pop	r28
    3bd0:	df 91       	pop	r29
    3bd2:	08 95       	ret

00003bd4 <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    3bd4:	0f 93       	push	r16
    3bd6:	df 93       	push	r29
    3bd8:	cf 93       	push	r28
    3bda:	cd b7       	in	r28, 0x3d	; 61
    3bdc:	de b7       	in	r29, 0x3e	; 62
    3bde:	28 97       	sbiw	r28, 0x08	; 8
    3be0:	0f b6       	in	r0, 0x3f	; 63
    3be2:	f8 94       	cli
    3be4:	de bf       	out	0x3e, r29	; 62
    3be6:	0f be       	out	0x3f, r0	; 63
    3be8:	cd bf       	out	0x3d, r28	; 61
    3bea:	8b 83       	std	Y+3, r24	; 0x03
    3bec:	7d 83       	std	Y+5, r23	; 0x05
    3bee:	6c 83       	std	Y+4, r22	; 0x04
    3bf0:	4e 83       	std	Y+6, r20	; 0x06
    3bf2:	2f 83       	std	Y+7, r18	; 0x07
    3bf4:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    3bf6:	88 85       	ldd	r24, Y+8	; 0x08
    3bf8:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    3bfc:	1a 82       	std	Y+2, r1	; 0x02
    3bfe:	19 82       	std	Y+1, r1	; 0x01
    3c00:	0f c0       	rjmp	.+30     	; 0x3c20 <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    3c02:	29 81       	ldd	r18, Y+1	; 0x01
    3c04:	3a 81       	ldd	r19, Y+2	; 0x02
    3c06:	8c 81       	ldd	r24, Y+4	; 0x04
    3c08:	9d 81       	ldd	r25, Y+5	; 0x05
    3c0a:	fc 01       	movw	r30, r24
    3c0c:	e2 0f       	add	r30, r18
    3c0e:	f3 1f       	adc	r31, r19
    3c10:	80 81       	ld	r24, Z
    3c12:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayCharacter>
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    3c16:	89 81       	ldd	r24, Y+1	; 0x01
    3c18:	9a 81       	ldd	r25, Y+2	; 0x02
    3c1a:	01 96       	adiw	r24, 0x01	; 1
    3c1c:	9a 83       	std	Y+2, r25	; 0x02
    3c1e:	89 83       	std	Y+1, r24	; 0x01
    3c20:	89 81       	ldd	r24, Y+1	; 0x01
    3c22:	9a 81       	ldd	r25, Y+2	; 0x02
    3c24:	88 30       	cpi	r24, 0x08	; 8
    3c26:	91 05       	cpc	r25, r1
    3c28:	64 f3       	brlt	.-40     	; 0x3c02 <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    3c2a:	8e 81       	ldd	r24, Y+6	; 0x06
    3c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c2e:	0e 94 92 1b 	call	0x3724	; 0x3724 <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    3c32:	8b 81       	ldd	r24, Y+3	; 0x03
    3c34:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    3c38:	8f 81       	ldd	r24, Y+7	; 0x07
    3c3a:	80 31       	cpi	r24, 0x10	; 16
    3c3c:	48 f0       	brcs	.+18     	; 0x3c50 <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    3c3e:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    3c42:	80 e0       	ldi	r24, 0x00	; 0
    3c44:	60 e0       	ldi	r22, 0x00	; 0
    3c46:	0e 94 92 1b 	call	0x3724	; 0x3724 <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    3c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4c:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayCharacter>
	}
}
    3c50:	28 96       	adiw	r28, 0x08	; 8
    3c52:	0f b6       	in	r0, 0x3f	; 63
    3c54:	f8 94       	cli
    3c56:	de bf       	out	0x3e, r29	; 62
    3c58:	0f be       	out	0x3f, r0	; 63
    3c5a:	cd bf       	out	0x3d, r28	; 61
    3c5c:	cf 91       	pop	r28
    3c5e:	df 91       	pop	r29
    3c60:	0f 91       	pop	r16
    3c62:	08 95       	ret

00003c64 <displayFloatOnLCD>:



void displayFloatOnLCD(f32 number) {
    3c64:	df 93       	push	r29
    3c66:	cf 93       	push	r28
    3c68:	cd b7       	in	r28, 0x3d	; 61
    3c6a:	de b7       	in	r29, 0x3e	; 62
    3c6c:	28 97       	sbiw	r28, 0x08	; 8
    3c6e:	0f b6       	in	r0, 0x3f	; 63
    3c70:	f8 94       	cli
    3c72:	de bf       	out	0x3e, r29	; 62
    3c74:	0f be       	out	0x3f, r0	; 63
    3c76:	cd bf       	out	0x3d, r28	; 61
    3c78:	6d 83       	std	Y+5, r22	; 0x05
    3c7a:	7e 83       	std	Y+6, r23	; 0x06
    3c7c:	8f 83       	std	Y+7, r24	; 0x07
    3c7e:	98 87       	std	Y+8, r25	; 0x08
    int integerPart = (int)number;
    3c80:	6d 81       	ldd	r22, Y+5	; 0x05
    3c82:	7e 81       	ldd	r23, Y+6	; 0x06
    3c84:	8f 81       	ldd	r24, Y+7	; 0x07
    3c86:	98 85       	ldd	r25, Y+8	; 0x08
    3c88:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	cb 01       	movw	r24, r22
    3c90:	9c 83       	std	Y+4, r25	; 0x04
    3c92:	8b 83       	std	Y+3, r24	; 0x03
    int decimalPart = (number - integerPart) * 1000;
    3c94:	8b 81       	ldd	r24, Y+3	; 0x03
    3c96:	9c 81       	ldd	r25, Y+4	; 0x04
    3c98:	aa 27       	eor	r26, r26
    3c9a:	97 fd       	sbrc	r25, 7
    3c9c:	a0 95       	com	r26
    3c9e:	ba 2f       	mov	r27, r26
    3ca0:	bc 01       	movw	r22, r24
    3ca2:	cd 01       	movw	r24, r26
    3ca4:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    3ca8:	9b 01       	movw	r18, r22
    3caa:	ac 01       	movw	r20, r24
    3cac:	6d 81       	ldd	r22, Y+5	; 0x05
    3cae:	7e 81       	ldd	r23, Y+6	; 0x06
    3cb0:	8f 81       	ldd	r24, Y+7	; 0x07
    3cb2:	98 85       	ldd	r25, Y+8	; 0x08
    3cb4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3cb8:	dc 01       	movw	r26, r24
    3cba:	cb 01       	movw	r24, r22
    3cbc:	bc 01       	movw	r22, r24
    3cbe:	cd 01       	movw	r24, r26
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	4a e7       	ldi	r20, 0x7A	; 122
    3cc6:	54 e4       	ldi	r21, 0x44	; 68
    3cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ccc:	dc 01       	movw	r26, r24
    3cce:	cb 01       	movw	r24, r22
    3cd0:	bc 01       	movw	r22, r24
    3cd2:	cd 01       	movw	r24, r26
    3cd4:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    3cd8:	dc 01       	movw	r26, r24
    3cda:	cb 01       	movw	r24, r22
    3cdc:	9a 83       	std	Y+2, r25	; 0x02
    3cde:	89 83       	std	Y+1, r24	; 0x01
    if(integerPart >= 100){
    3ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce4:	84 36       	cpi	r24, 0x64	; 100
    3ce6:	91 05       	cpc	r25, r1
    3ce8:	54 f0       	brlt	.+20     	; 0x3cfe <displayFloatOnLCD+0x9a>
    	integerPart /= 10;
    3cea:	8b 81       	ldd	r24, Y+3	; 0x03
    3cec:	9c 81       	ldd	r25, Y+4	; 0x04
    3cee:	2a e0       	ldi	r18, 0x0A	; 10
    3cf0:	30 e0       	ldi	r19, 0x00	; 0
    3cf2:	b9 01       	movw	r22, r18
    3cf4:	0e 94 47 31 	call	0x628e	; 0x628e <__divmodhi4>
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	9c 83       	std	Y+4, r25	; 0x04
    3cfc:	8b 83       	std	Y+3, r24	; 0x03
    }
    LCD_display_WriteNumber(integerPart);
    3cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    3d00:	9c 81       	ldd	r25, Y+4	; 0x04
    3d02:	aa 27       	eor	r26, r26
    3d04:	97 fd       	sbrc	r25, 7
    3d06:	a0 95       	com	r26
    3d08:	ba 2f       	mov	r27, r26
    3d0a:	bc 01       	movw	r22, r24
    3d0c:	cd 01       	movw	r24, r26
    3d0e:	0e 94 93 1a 	call	0x3526	; 0x3526 <LCD_display_WriteNumber>
    LCD_displayCharacter('.');
    3d12:	8e e2       	ldi	r24, 0x2E	; 46
    3d14:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayCharacter>
    LCD_display_WriteNumber(decimalPart);
    3d18:	89 81       	ldd	r24, Y+1	; 0x01
    3d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d1c:	aa 27       	eor	r26, r26
    3d1e:	97 fd       	sbrc	r25, 7
    3d20:	a0 95       	com	r26
    3d22:	ba 2f       	mov	r27, r26
    3d24:	bc 01       	movw	r22, r24
    3d26:	cd 01       	movw	r24, r26
    3d28:	0e 94 93 1a 	call	0x3526	; 0x3526 <LCD_display_WriteNumber>
    
}
    3d2c:	28 96       	adiw	r28, 0x08	; 8
    3d2e:	0f b6       	in	r0, 0x3f	; 63
    3d30:	f8 94       	cli
    3d32:	de bf       	out	0x3e, r29	; 62
    3d34:	0f be       	out	0x3f, r0	; 63
    3d36:	cd bf       	out	0x3d, r28	; 61
    3d38:	cf 91       	pop	r28
    3d3a:	df 91       	pop	r29
    3d3c:	08 95       	ret

00003d3e <displayMinusNumbers>:

void displayMinusNumbers(f32 number) {
    3d3e:	df 93       	push	r29
    3d40:	cf 93       	push	r28
    3d42:	00 d0       	rcall	.+0      	; 0x3d44 <displayMinusNumbers+0x6>
    3d44:	00 d0       	rcall	.+0      	; 0x3d46 <displayMinusNumbers+0x8>
    3d46:	cd b7       	in	r28, 0x3d	; 61
    3d48:	de b7       	in	r29, 0x3e	; 62
    3d4a:	69 83       	std	Y+1, r22	; 0x01
    3d4c:	7a 83       	std	Y+2, r23	; 0x02
    3d4e:	8b 83       	std	Y+3, r24	; 0x03
    3d50:	9c 83       	std	Y+4, r25	; 0x04
	
	LCD_displayCharacter('-');
    3d52:	8d e2       	ldi	r24, 0x2D	; 45
    3d54:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayCharacter>
	number = -number;
    3d58:	89 81       	ldd	r24, Y+1	; 0x01
    3d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d5c:	ab 81       	ldd	r26, Y+3	; 0x03
    3d5e:	bc 81       	ldd	r27, Y+4	; 0x04
    3d60:	b0 58       	subi	r27, 0x80	; 128
    3d62:	89 83       	std	Y+1, r24	; 0x01
    3d64:	9a 83       	std	Y+2, r25	; 0x02
    3d66:	ab 83       	std	Y+3, r26	; 0x03
    3d68:	bc 83       	std	Y+4, r27	; 0x04
    LCD_display_WriteNumber(number);   
    3d6a:	69 81       	ldd	r22, Y+1	; 0x01
    3d6c:	7a 81       	ldd	r23, Y+2	; 0x02
    3d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d70:	9c 81       	ldd	r25, Y+4	; 0x04
    3d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d76:	dc 01       	movw	r26, r24
    3d78:	cb 01       	movw	r24, r22
    3d7a:	bc 01       	movw	r22, r24
    3d7c:	cd 01       	movw	r24, r26
    3d7e:	0e 94 93 1a 	call	0x3526	; 0x3526 <LCD_display_WriteNumber>
}
    3d82:	0f 90       	pop	r0
    3d84:	0f 90       	pop	r0
    3d86:	0f 90       	pop	r0
    3d88:	0f 90       	pop	r0
    3d8a:	cf 91       	pop	r28
    3d8c:	df 91       	pop	r29
    3d8e:	08 95       	ret

00003d90 <KPD_u8GetKeyState>:
const u8 KPD_Au8RowsPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};
const u8 KPD_Au8ColsPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

/******************************************************************************************/

u8 KPD_u8GetKeyState(u8 *Copy_pu8ReturnedKey){
    3d90:	df 93       	push	r29
    3d92:	cf 93       	push	r28
    3d94:	cd b7       	in	r28, 0x3d	; 61
    3d96:	de b7       	in	r29, 0x3e	; 62
    3d98:	65 97       	sbiw	r28, 0x15	; 21
    3d9a:	0f b6       	in	r0, 0x3f	; 63
    3d9c:	f8 94       	cli
    3d9e:	de bf       	out	0x3e, r29	; 62
    3da0:	0f be       	out	0x3f, r0	; 63
    3da2:	cd bf       	out	0x3d, r28	; 61
    3da4:	9d 8b       	std	Y+21, r25	; 0x15
    3da6:	8c 8b       	std	Y+20, r24	; 0x14
	
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3da8:	81 e0       	ldi	r24, 0x01	; 1
    3daa:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowsCounter, Local_u8ColsCounter, Local_u8PinValue, Local_u8Flag = 0;
    3dac:	1f 86       	std	Y+15, r1	; 0x0f
	
	if(Copy_pu8ReturnedKey != NULL){
    3dae:	8c 89       	ldd	r24, Y+20	; 0x14
    3db0:	9d 89       	ldd	r25, Y+21	; 0x15
    3db2:	00 97       	sbiw	r24, 0x00	; 0
    3db4:	09 f4       	brne	.+2      	; 0x3db8 <KPD_u8GetKeyState+0x28>
    3db6:	f0 c0       	rjmp	.+480    	; 0x3f98 <KPD_u8GetKeyState+0x208>
		*Copy_pu8ReturnedKey = KPD_UnPressed;
    3db8:	ec 89       	ldd	r30, Y+20	; 0x14
    3dba:	fd 89       	ldd	r31, Y+21	; 0x15
    3dbc:	8f ef       	ldi	r24, 0xFF	; 255
    3dbe:	80 83       	st	Z, r24
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
    3dc0:	19 8a       	std	Y+17, r1	; 0x11
    3dc2:	e5 c0       	rjmp	.+458    	; 0x3f8e <KPD_u8GetKeyState+0x1fe>
			/* Activate Each Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_LOW);
    3dc4:	89 89       	ldd	r24, Y+17	; 0x11
    3dc6:	88 2f       	mov	r24, r24
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	fc 01       	movw	r30, r24
    3dcc:	ef 55       	subi	r30, 0x5F	; 95
    3dce:	fe 4f       	sbci	r31, 0xFE	; 254
    3dd0:	90 81       	ld	r25, Z
    3dd2:	80 e0       	ldi	r24, 0x00	; 0
    3dd4:	69 2f       	mov	r22, r25
    3dd6:	40 e0       	ldi	r20, 0x00	; 0
    3dd8:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
			/* Check which pin is zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++){
    3ddc:	18 8a       	std	Y+16, r1	; 0x10
    3dde:	c1 c0       	rjmp	.+386    	; 0x3f62 <KPD_u8GetKeyState+0x1d2>
				DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    3de0:	88 89       	ldd	r24, Y+16	; 0x10
    3de2:	88 2f       	mov	r24, r24
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	fc 01       	movw	r30, r24
    3de8:	eb 55       	subi	r30, 0x5B	; 91
    3dea:	fe 4f       	sbci	r31, 0xFE	; 254
    3dec:	90 81       	ld	r25, Z
    3dee:	9e 01       	movw	r18, r28
    3df0:	2d 5e       	subi	r18, 0xED	; 237
    3df2:	3f 4f       	sbci	r19, 0xFF	; 255
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	69 2f       	mov	r22, r25
    3df8:	a9 01       	movw	r20, r18
    3dfa:	0e 94 8b 12 	call	0x2516	; 0x2516 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW){ // Switch Is Pressed
    3dfe:	8b 89       	ldd	r24, Y+19	; 0x13
    3e00:	88 23       	and	r24, r24
    3e02:	09 f0       	breq	.+2      	; 0x3e06 <KPD_u8GetKeyState+0x76>
    3e04:	ab c0       	rjmp	.+342    	; 0x3f5c <KPD_u8GetKeyState+0x1cc>
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	a0 ea       	ldi	r26, 0xA0	; 160
    3e0c:	b1 e4       	ldi	r27, 0x41	; 65
    3e0e:	8b 87       	std	Y+11, r24	; 0x0b
    3e10:	9c 87       	std	Y+12, r25	; 0x0c
    3e12:	ad 87       	std	Y+13, r26	; 0x0d
    3e14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e16:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e18:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e1e:	20 e0       	ldi	r18, 0x00	; 0
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	4a e7       	ldi	r20, 0x7A	; 122
    3e24:	55 e4       	ldi	r21, 0x45	; 69
    3e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	8f 83       	std	Y+7, r24	; 0x07
    3e30:	98 87       	std	Y+8, r25	; 0x08
    3e32:	a9 87       	std	Y+9, r26	; 0x09
    3e34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e36:	6f 81       	ldd	r22, Y+7	; 0x07
    3e38:	78 85       	ldd	r23, Y+8	; 0x08
    3e3a:	89 85       	ldd	r24, Y+9	; 0x09
    3e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e3e:	20 e0       	ldi	r18, 0x00	; 0
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	40 e8       	ldi	r20, 0x80	; 128
    3e44:	5f e3       	ldi	r21, 0x3F	; 63
    3e46:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    3e4a:	88 23       	and	r24, r24
    3e4c:	2c f4       	brge	.+10     	; 0x3e58 <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	9e 83       	std	Y+6, r25	; 0x06
    3e54:	8d 83       	std	Y+5, r24	; 0x05
    3e56:	3f c0       	rjmp	.+126    	; 0x3ed6 <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    3e58:	6f 81       	ldd	r22, Y+7	; 0x07
    3e5a:	78 85       	ldd	r23, Y+8	; 0x08
    3e5c:	89 85       	ldd	r24, Y+9	; 0x09
    3e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e60:	20 e0       	ldi	r18, 0x00	; 0
    3e62:	3f ef       	ldi	r19, 0xFF	; 255
    3e64:	4f e7       	ldi	r20, 0x7F	; 127
    3e66:	57 e4       	ldi	r21, 0x47	; 71
    3e68:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    3e6c:	18 16       	cp	r1, r24
    3e6e:	4c f5       	brge	.+82     	; 0x3ec2 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e70:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e72:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e74:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e76:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e78:	20 e0       	ldi	r18, 0x00	; 0
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	40 e2       	ldi	r20, 0x20	; 32
    3e7e:	51 e4       	ldi	r21, 0x41	; 65
    3e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e84:	dc 01       	movw	r26, r24
    3e86:	cb 01       	movw	r24, r22
    3e88:	bc 01       	movw	r22, r24
    3e8a:	cd 01       	movw	r24, r26
    3e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e90:	dc 01       	movw	r26, r24
    3e92:	cb 01       	movw	r24, r22
    3e94:	9e 83       	std	Y+6, r25	; 0x06
    3e96:	8d 83       	std	Y+5, r24	; 0x05
    3e98:	0f c0       	rjmp	.+30     	; 0x3eb8 <KPD_u8GetKeyState+0x128>
    3e9a:	80 e9       	ldi	r24, 0x90	; 144
    3e9c:	91 e0       	ldi	r25, 0x01	; 1
    3e9e:	9c 83       	std	Y+4, r25	; 0x04
    3ea0:	8b 83       	std	Y+3, r24	; 0x03
    3ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ea6:	01 97       	sbiw	r24, 0x01	; 1
    3ea8:	f1 f7       	brne	.-4      	; 0x3ea6 <KPD_u8GetKeyState+0x116>
    3eaa:	9c 83       	std	Y+4, r25	; 0x04
    3eac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eae:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3eb2:	01 97       	sbiw	r24, 0x01	; 1
    3eb4:	9e 83       	std	Y+6, r25	; 0x06
    3eb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3eba:	9e 81       	ldd	r25, Y+6	; 0x06
    3ebc:	00 97       	sbiw	r24, 0x00	; 0
    3ebe:	69 f7       	brne	.-38     	; 0x3e9a <KPD_u8GetKeyState+0x10a>
    3ec0:	14 c0       	rjmp	.+40     	; 0x3eea <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ec2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ec4:	78 85       	ldd	r23, Y+8	; 0x08
    3ec6:	89 85       	ldd	r24, Y+9	; 0x09
    3ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ece:	dc 01       	movw	r26, r24
    3ed0:	cb 01       	movw	r24, r22
    3ed2:	9e 83       	std	Y+6, r25	; 0x06
    3ed4:	8d 83       	std	Y+5, r24	; 0x05
    3ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eda:	9a 83       	std	Y+2, r25	; 0x02
    3edc:	89 83       	std	Y+1, r24	; 0x01
    3ede:	89 81       	ldd	r24, Y+1	; 0x01
    3ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ee2:	01 97       	sbiw	r24, 0x01	; 1
    3ee4:	f1 f7       	brne	.-4      	; 0x3ee2 <KPD_u8GetKeyState+0x152>
    3ee6:	9a 83       	std	Y+2, r25	; 0x02
    3ee8:	89 83       	std	Y+1, r24	; 0x01
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    3eea:	88 89       	ldd	r24, Y+16	; 0x10
    3eec:	88 2f       	mov	r24, r24
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	fc 01       	movw	r30, r24
    3ef2:	eb 55       	subi	r30, 0x5B	; 91
    3ef4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ef6:	90 81       	ld	r25, Z
    3ef8:	9e 01       	movw	r18, r28
    3efa:	2d 5e       	subi	r18, 0xED	; 237
    3efc:	3f 4f       	sbci	r19, 0xFF	; 255
    3efe:	80 e0       	ldi	r24, 0x00	; 0
    3f00:	69 2f       	mov	r22, r25
    3f02:	a9 01       	movw	r20, r18
    3f04:	0e 94 8b 12 	call	0x2516	; 0x2516 <DIO_u8GetPinValue>
    3f08:	0f c0       	rjmp	.+30     	; 0x3f28 <KPD_u8GetKeyState+0x198>
					/* Check If the Pin Equal Low */
					while(Local_u8PinValue == DIO_u8_LOW){
						DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    3f0a:	88 89       	ldd	r24, Y+16	; 0x10
    3f0c:	88 2f       	mov	r24, r24
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	fc 01       	movw	r30, r24
    3f12:	eb 55       	subi	r30, 0x5B	; 91
    3f14:	fe 4f       	sbci	r31, 0xFE	; 254
    3f16:	90 81       	ld	r25, Z
    3f18:	9e 01       	movw	r18, r28
    3f1a:	2d 5e       	subi	r18, 0xED	; 237
    3f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f1e:	80 e0       	ldi	r24, 0x00	; 0
    3f20:	69 2f       	mov	r22, r25
    3f22:	a9 01       	movw	r20, r18
    3f24:	0e 94 8b 12 	call	0x2516	; 0x2516 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW){ // Switch Is Pressed
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
					/* Check If the Pin Equal Low */
					while(Local_u8PinValue == DIO_u8_LOW){
    3f28:	8b 89       	ldd	r24, Y+19	; 0x13
    3f2a:	88 23       	and	r24, r24
    3f2c:	71 f3       	breq	.-36     	; 0x3f0a <KPD_u8GetKeyState+0x17a>
						DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
					}
					
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    3f2e:	89 89       	ldd	r24, Y+17	; 0x11
    3f30:	48 2f       	mov	r20, r24
    3f32:	50 e0       	ldi	r21, 0x00	; 0
    3f34:	88 89       	ldd	r24, Y+16	; 0x10
    3f36:	28 2f       	mov	r18, r24
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	ca 01       	movw	r24, r20
    3f3c:	88 0f       	add	r24, r24
    3f3e:	99 1f       	adc	r25, r25
    3f40:	88 0f       	add	r24, r24
    3f42:	99 1f       	adc	r25, r25
    3f44:	82 0f       	add	r24, r18
    3f46:	93 1f       	adc	r25, r19
    3f48:	fc 01       	movw	r30, r24
    3f4a:	ef 56       	subi	r30, 0x6F	; 111
    3f4c:	fe 4f       	sbci	r31, 0xFE	; 254
    3f4e:	80 81       	ld	r24, Z
    3f50:	ec 89       	ldd	r30, Y+20	; 0x14
    3f52:	fd 89       	ldd	r31, Y+21	; 0x15
    3f54:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    3f58:	8f 87       	std	Y+15, r24	; 0x0f
    3f5a:	07 c0       	rjmp	.+14     	; 0x3f6a <KPD_u8GetKeyState+0x1da>
		*Copy_pu8ReturnedKey = KPD_UnPressed;
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
			/* Activate Each Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_LOW);
			/* Check which pin is zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++){
    3f5c:	88 89       	ldd	r24, Y+16	; 0x10
    3f5e:	8f 5f       	subi	r24, 0xFF	; 255
    3f60:	88 8b       	std	Y+16, r24	; 0x10
    3f62:	88 89       	ldd	r24, Y+16	; 0x10
    3f64:	84 30       	cpi	r24, 0x04	; 4
    3f66:	08 f4       	brcc	.+2      	; 0x3f6a <KPD_u8GetKeyState+0x1da>
    3f68:	3b cf       	rjmp	.-394    	; 0x3de0 <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;
				}
			}
			/* Deactivate Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_HIGH);
    3f6a:	89 89       	ldd	r24, Y+17	; 0x11
    3f6c:	88 2f       	mov	r24, r24
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	fc 01       	movw	r30, r24
    3f72:	ef 55       	subi	r30, 0x5F	; 95
    3f74:	fe 4f       	sbci	r31, 0xFE	; 254
    3f76:	90 81       	ld	r25, Z
    3f78:	80 e0       	ldi	r24, 0x00	; 0
    3f7a:	69 2f       	mov	r22, r25
    3f7c:	41 e0       	ldi	r20, 0x01	; 1
    3f7e:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
			if(Local_u8Flag){
    3f82:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f84:	88 23       	and	r24, r24
    3f86:	49 f4       	brne	.+18     	; 0x3f9a <KPD_u8GetKeyState+0x20a>
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u8 Local_u8RowsCounter, Local_u8ColsCounter, Local_u8PinValue, Local_u8Flag = 0;
	
	if(Copy_pu8ReturnedKey != NULL){
		*Copy_pu8ReturnedKey = KPD_UnPressed;
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
    3f88:	89 89       	ldd	r24, Y+17	; 0x11
    3f8a:	8f 5f       	subi	r24, 0xFF	; 255
    3f8c:	89 8b       	std	Y+17, r24	; 0x11
    3f8e:	89 89       	ldd	r24, Y+17	; 0x11
    3f90:	84 30       	cpi	r24, 0x04	; 4
    3f92:	08 f4       	brcc	.+2      	; 0x3f96 <KPD_u8GetKeyState+0x206>
    3f94:	17 cf       	rjmp	.-466    	; 0x3dc4 <KPD_u8GetKeyState+0x34>
    3f96:	01 c0       	rjmp	.+2      	; 0x3f9a <KPD_u8GetKeyState+0x20a>
				break;
			}
		}
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    3f98:	1a 8a       	std	Y+18, r1	; 0x12
	}
	
	return Local_u8ErrorState;
    3f9a:	8a 89       	ldd	r24, Y+18	; 0x12
}
    3f9c:	65 96       	adiw	r28, 0x15	; 21
    3f9e:	0f b6       	in	r0, 0x3f	; 63
    3fa0:	f8 94       	cli
    3fa2:	de bf       	out	0x3e, r29	; 62
    3fa4:	0f be       	out	0x3f, r0	; 63
    3fa6:	cd bf       	out	0x3d, r28	; 61
    3fa8:	cf 91       	pop	r28
    3faa:	df 91       	pop	r29
    3fac:	08 95       	ret

00003fae <KPD_voidInit>:




void KPD_voidInit(void){
    3fae:	df 93       	push	r29
    3fb0:	cf 93       	push	r28
    3fb2:	00 d0       	rcall	.+0      	; 0x3fb4 <KPD_voidInit+0x6>
    3fb4:	cd b7       	in	r28, 0x3d	; 61
    3fb6:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0; i <= 3; i++){
    3fb8:	1a 82       	std	Y+2, r1	; 0x02
    3fba:	19 82       	std	Y+1, r1	; 0x01
    3fbc:	31 c0       	rjmp	.+98     	; 0x4020 <KPD_voidInit+0x72>
		/* Rows */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8RowsPins[i], DIO_u8_OUTPUT);
    3fbe:	89 81       	ldd	r24, Y+1	; 0x01
    3fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc2:	fc 01       	movw	r30, r24
    3fc4:	ef 55       	subi	r30, 0x5F	; 95
    3fc6:	fe 4f       	sbci	r31, 0xFE	; 254
    3fc8:	90 81       	ld	r25, Z
    3fca:	80 e0       	ldi	r24, 0x00	; 0
    3fcc:	69 2f       	mov	r22, r25
    3fce:	41 e0       	ldi	r20, 0x01	; 1
    3fd0:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[i], DIO_u8_OUTPUT_HIGH);
    3fd4:	89 81       	ldd	r24, Y+1	; 0x01
    3fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fd8:	fc 01       	movw	r30, r24
    3fda:	ef 55       	subi	r30, 0x5F	; 95
    3fdc:	fe 4f       	sbci	r31, 0xFE	; 254
    3fde:	90 81       	ld	r25, Z
    3fe0:	80 e0       	ldi	r24, 0x00	; 0
    3fe2:	69 2f       	mov	r22, r25
    3fe4:	41 e0       	ldi	r20, 0x01	; 1
    3fe6:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
		
		/* Cols */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT);
    3fea:	89 81       	ldd	r24, Y+1	; 0x01
    3fec:	9a 81       	ldd	r25, Y+2	; 0x02
    3fee:	fc 01       	movw	r30, r24
    3ff0:	eb 55       	subi	r30, 0x5B	; 91
    3ff2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ff4:	90 81       	ld	r25, Z
    3ff6:	80 e0       	ldi	r24, 0x00	; 0
    3ff8:	69 2f       	mov	r22, r25
    3ffa:	40 e0       	ldi	r20, 0x00	; 0
    3ffc:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT_PULLUP);
    4000:	89 81       	ldd	r24, Y+1	; 0x01
    4002:	9a 81       	ldd	r25, Y+2	; 0x02
    4004:	fc 01       	movw	r30, r24
    4006:	eb 55       	subi	r30, 0x5B	; 91
    4008:	fe 4f       	sbci	r31, 0xFE	; 254
    400a:	90 81       	ld	r25, Z
    400c:	80 e0       	ldi	r24, 0x00	; 0
    400e:	69 2f       	mov	r22, r25
    4010:	41 e0       	ldi	r20, 0x01	; 1
    4012:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>




void KPD_voidInit(void){
	for(int i = 0; i <= 3; i++){
    4016:	89 81       	ldd	r24, Y+1	; 0x01
    4018:	9a 81       	ldd	r25, Y+2	; 0x02
    401a:	01 96       	adiw	r24, 0x01	; 1
    401c:	9a 83       	std	Y+2, r25	; 0x02
    401e:	89 83       	std	Y+1, r24	; 0x01
    4020:	89 81       	ldd	r24, Y+1	; 0x01
    4022:	9a 81       	ldd	r25, Y+2	; 0x02
    4024:	84 30       	cpi	r24, 0x04	; 4
    4026:	91 05       	cpc	r25, r1
    4028:	54 f2       	brlt	.-108    	; 0x3fbe <KPD_voidInit+0x10>
		
		/* Cols */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT);
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT_PULLUP);
	}
}
    402a:	0f 90       	pop	r0
    402c:	0f 90       	pop	r0
    402e:	cf 91       	pop	r28
    4030:	df 91       	pop	r29
    4032:	08 95       	ret

00004034 <DC_Motor_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";

#include "DC_Motor_Config.h";
#include "DC_Motor_Private.h";

u8 DC_Motor_Init(u8 Copy_u8_Motor1, u8 Copy_u8_Motor2){
    4034:	df 93       	push	r29
    4036:	cf 93       	push	r28
    4038:	00 d0       	rcall	.+0      	; 0x403a <DC_Motor_Init+0x6>
    403a:	0f 92       	push	r0
    403c:	cd b7       	in	r28, 0x3d	; 61
    403e:	de b7       	in	r29, 0x3e	; 62
    4040:	8a 83       	std	Y+2, r24	; 0x02
    4042:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    4044:	81 e0       	ldi	r24, 0x01	; 1
    4046:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor1 == MOTOR_Connected){
    4048:	8a 81       	ldd	r24, Y+2	; 0x02
    404a:	81 30       	cpi	r24, 0x01	; 1
    404c:	81 f4       	brne	.+32     	; 0x406e <DC_Motor_Init+0x3a>
		DIO_u8SetPinDirection(MOTOR_EN1_PORT, MOTOR_EN1_PIN, PIN_OUTPUT);
    404e:	80 e0       	ldi	r24, 0x00	; 0
    4050:	61 e0       	ldi	r22, 0x01	; 1
    4052:	41 e0       	ldi	r20, 0x01	; 1
    4054:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, PIN_OUTPUT);
    4058:	80 e0       	ldi	r24, 0x00	; 0
    405a:	63 e0       	ldi	r22, 0x03	; 3
    405c:	41 e0       	ldi	r20, 0x01	; 1
    405e:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, PIN_OUTPUT);
    4062:	80 e0       	ldi	r24, 0x00	; 0
    4064:	62 e0       	ldi	r22, 0x02	; 2
    4066:	41 e0       	ldi	r20, 0x01	; 1
    4068:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_u8SetPinDirection>
    406c:	14 c0       	rjmp	.+40     	; 0x4096 <DC_Motor_Init+0x62>
	}

	else if(Copy_u8_Motor2 == MOTOR_Connected){
    406e:	8b 81       	ldd	r24, Y+3	; 0x03
    4070:	81 30       	cpi	r24, 0x01	; 1
    4072:	81 f4       	brne	.+32     	; 0x4094 <DC_Motor_Init+0x60>
		DIO_u8SetPinDirection(MOTOR_EN2_PORT, MOTOR_EN2_PIN, PIN_OUTPUT);
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	62 e0       	ldi	r22, 0x02	; 2
    4078:	41 e0       	ldi	r20, 0x01	; 1
    407a:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, PIN_OUTPUT);
    407e:	81 e0       	ldi	r24, 0x01	; 1
    4080:	61 e0       	ldi	r22, 0x01	; 1
    4082:	41 e0       	ldi	r20, 0x01	; 1
    4084:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, PIN_OUTPUT);
    4088:	81 e0       	ldi	r24, 0x01	; 1
    408a:	60 e0       	ldi	r22, 0x00	; 0
    408c:	41 e0       	ldi	r20, 0x01	; 1
    408e:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_u8SetPinDirection>
    4092:	01 c0       	rjmp	.+2      	; 0x4096 <DC_Motor_Init+0x62>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    4094:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    4096:	89 81       	ldd	r24, Y+1	; 0x01
}
    4098:	0f 90       	pop	r0
    409a:	0f 90       	pop	r0
    409c:	0f 90       	pop	r0
    409e:	cf 91       	pop	r28
    40a0:	df 91       	pop	r29
    40a2:	08 95       	ret

000040a4 <DC_Motor_Rotate>:


u8 DC_Motor_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Motor_Dirction){
    40a4:	df 93       	push	r29
    40a6:	cf 93       	push	r28
    40a8:	cd b7       	in	r28, 0x3d	; 61
    40aa:	de b7       	in	r29, 0x3e	; 62
    40ac:	29 97       	sbiw	r28, 0x09	; 9
    40ae:	0f b6       	in	r0, 0x3f	; 63
    40b0:	f8 94       	cli
    40b2:	de bf       	out	0x3e, r29	; 62
    40b4:	0f be       	out	0x3f, r0	; 63
    40b6:	cd bf       	out	0x3d, r28	; 61
    40b8:	8a 83       	std	Y+2, r24	; 0x02
    40ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8_Motor){
    40c0:	8a 81       	ldd	r24, Y+2	; 0x02
    40c2:	28 2f       	mov	r18, r24
    40c4:	30 e0       	ldi	r19, 0x00	; 0
    40c6:	39 87       	std	Y+9, r19	; 0x09
    40c8:	28 87       	std	Y+8, r18	; 0x08
    40ca:	88 85       	ldd	r24, Y+8	; 0x08
    40cc:	99 85       	ldd	r25, Y+9	; 0x09
    40ce:	00 97       	sbiw	r24, 0x00	; 0
    40d0:	31 f0       	breq	.+12     	; 0x40de <DC_Motor_Rotate+0x3a>
    40d2:	28 85       	ldd	r18, Y+8	; 0x08
    40d4:	39 85       	ldd	r19, Y+9	; 0x09
    40d6:	21 30       	cpi	r18, 0x01	; 1
    40d8:	31 05       	cpc	r19, r1
    40da:	89 f1       	breq	.+98     	; 0x413e <DC_Motor_Rotate+0x9a>
    40dc:	60 c0       	rjmp	.+192    	; 0x419e <DC_Motor_Rotate+0xfa>
		case Motor1:
			switch(Copy_u8_Motor_Dirction){
    40de:	8b 81       	ldd	r24, Y+3	; 0x03
    40e0:	28 2f       	mov	r18, r24
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	3f 83       	std	Y+7, r19	; 0x07
    40e6:	2e 83       	std	Y+6, r18	; 0x06
    40e8:	8e 81       	ldd	r24, Y+6	; 0x06
    40ea:	9f 81       	ldd	r25, Y+7	; 0x07
    40ec:	00 97       	sbiw	r24, 0x00	; 0
    40ee:	a9 f0       	breq	.+42     	; 0x411a <DC_Motor_Rotate+0x76>
    40f0:	2e 81       	ldd	r18, Y+6	; 0x06
    40f2:	3f 81       	ldd	r19, Y+7	; 0x07
    40f4:	21 30       	cpi	r18, 0x01	; 1
    40f6:	31 05       	cpc	r19, r1
    40f8:	01 f5       	brne	.+64     	; 0x413a <DC_Motor_Rotate+0x96>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    40fa:	80 e0       	ldi	r24, 0x00	; 0
    40fc:	61 e0       	ldi	r22, 0x01	; 1
    40fe:	41 e0       	ldi	r20, 0x01	; 1
    4100:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_HIGH);
    4104:	80 e0       	ldi	r24, 0x00	; 0
    4106:	63 e0       	ldi	r22, 0x03	; 3
    4108:	41 e0       	ldi	r20, 0x01	; 1
    410a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_LOW);
    410e:	80 e0       	ldi	r24, 0x00	; 0
    4110:	62 e0       	ldi	r22, 0x02	; 2
    4112:	40 e0       	ldi	r20, 0x00	; 0
    4114:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
    4118:	43 c0       	rjmp	.+134    	; 0x41a0 <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    411a:	80 e0       	ldi	r24, 0x00	; 0
    411c:	61 e0       	ldi	r22, 0x01	; 1
    411e:	41 e0       	ldi	r20, 0x01	; 1
    4120:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_LOW);
    4124:	80 e0       	ldi	r24, 0x00	; 0
    4126:	63 e0       	ldi	r22, 0x03	; 3
    4128:	40 e0       	ldi	r20, 0x00	; 0
    412a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_HIGH);
    412e:	80 e0       	ldi	r24, 0x00	; 0
    4130:	62 e0       	ldi	r22, 0x02	; 2
    4132:	41 e0       	ldi	r20, 0x01	; 1
    4134:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
    4138:	33 c0       	rjmp	.+102    	; 0x41a0 <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    413a:	19 82       	std	Y+1, r1	; 0x01
    413c:	31 c0       	rjmp	.+98     	; 0x41a0 <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		case Motor2:
			switch(Copy_u8_Motor_Dirction){
    413e:	8b 81       	ldd	r24, Y+3	; 0x03
    4140:	28 2f       	mov	r18, r24
    4142:	30 e0       	ldi	r19, 0x00	; 0
    4144:	3d 83       	std	Y+5, r19	; 0x05
    4146:	2c 83       	std	Y+4, r18	; 0x04
    4148:	8c 81       	ldd	r24, Y+4	; 0x04
    414a:	9d 81       	ldd	r25, Y+5	; 0x05
    414c:	00 97       	sbiw	r24, 0x00	; 0
    414e:	a9 f0       	breq	.+42     	; 0x417a <DC_Motor_Rotate+0xd6>
    4150:	2c 81       	ldd	r18, Y+4	; 0x04
    4152:	3d 81       	ldd	r19, Y+5	; 0x05
    4154:	21 30       	cpi	r18, 0x01	; 1
    4156:	31 05       	cpc	r19, r1
    4158:	01 f5       	brne	.+64     	; 0x419a <DC_Motor_Rotate+0xf6>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    415a:	81 e0       	ldi	r24, 0x01	; 1
    415c:	62 e0       	ldi	r22, 0x02	; 2
    415e:	41 e0       	ldi	r20, 0x01	; 1
    4160:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_HIGH);
    4164:	81 e0       	ldi	r24, 0x01	; 1
    4166:	61 e0       	ldi	r22, 0x01	; 1
    4168:	41 e0       	ldi	r20, 0x01	; 1
    416a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_LOW);
    416e:	81 e0       	ldi	r24, 0x01	; 1
    4170:	60 e0       	ldi	r22, 0x00	; 0
    4172:	40 e0       	ldi	r20, 0x00	; 0
    4174:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
    4178:	13 c0       	rjmp	.+38     	; 0x41a0 <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    417a:	81 e0       	ldi	r24, 0x01	; 1
    417c:	62 e0       	ldi	r22, 0x02	; 2
    417e:	41 e0       	ldi	r20, 0x01	; 1
    4180:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_LOW);
    4184:	81 e0       	ldi	r24, 0x01	; 1
    4186:	61 e0       	ldi	r22, 0x01	; 1
    4188:	40 e0       	ldi	r20, 0x00	; 0
    418a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_HIGH);
    418e:	81 e0       	ldi	r24, 0x01	; 1
    4190:	60 e0       	ldi	r22, 0x00	; 0
    4192:	41 e0       	ldi	r20, 0x01	; 1
    4194:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
    4198:	03 c0       	rjmp	.+6      	; 0x41a0 <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    419a:	19 82       	std	Y+1, r1	; 0x01
    419c:	01 c0       	rjmp	.+2      	; 0x41a0 <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		default:
			Local_u8_Error_State = State_NOT_OK;
    419e:	19 82       	std	Y+1, r1	; 0x01
			break;
	}

	return Local_u8_Error_State;
    41a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    41a2:	29 96       	adiw	r28, 0x09	; 9
    41a4:	0f b6       	in	r0, 0x3f	; 63
    41a6:	f8 94       	cli
    41a8:	de bf       	out	0x3e, r29	; 62
    41aa:	0f be       	out	0x3f, r0	; 63
    41ac:	cd bf       	out	0x3d, r28	; 61
    41ae:	cf 91       	pop	r28
    41b0:	df 91       	pop	r29
    41b2:	08 95       	ret

000041b4 <DC_Motor_Stop>:


u8 DC_Motor_Stop(u8 Copy_u8_Motor){
    41b4:	df 93       	push	r29
    41b6:	cf 93       	push	r28
    41b8:	00 d0       	rcall	.+0      	; 0x41ba <DC_Motor_Stop+0x6>
    41ba:	cd b7       	in	r28, 0x3d	; 61
    41bc:	de b7       	in	r29, 0x3e	; 62
    41be:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Error_State = State_OK;
    41c0:	81 e0       	ldi	r24, 0x01	; 1
    41c2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor == Motor1){
    41c4:	8a 81       	ldd	r24, Y+2	; 0x02
    41c6:	88 23       	and	r24, r24
    41c8:	31 f4       	brne	.+12     	; 0x41d6 <DC_Motor_Stop+0x22>
		DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_LOW);
    41ca:	80 e0       	ldi	r24, 0x00	; 0
    41cc:	61 e0       	ldi	r22, 0x01	; 1
    41ce:	40 e0       	ldi	r20, 0x00	; 0
    41d0:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
    41d4:	0a c0       	rjmp	.+20     	; 0x41ea <DC_Motor_Stop+0x36>
	}

	else if(Copy_u8_Motor == Motor2){
    41d6:	8a 81       	ldd	r24, Y+2	; 0x02
    41d8:	81 30       	cpi	r24, 0x01	; 1
    41da:	31 f4       	brne	.+12     	; 0x41e8 <DC_Motor_Stop+0x34>
		DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_LOW);
    41dc:	81 e0       	ldi	r24, 0x01	; 1
    41de:	62 e0       	ldi	r22, 0x02	; 2
    41e0:	40 e0       	ldi	r20, 0x00	; 0
    41e2:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8SetPinValue>
    41e6:	01 c0       	rjmp	.+2      	; 0x41ea <DC_Motor_Stop+0x36>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    41e8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    41ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    41ec:	0f 90       	pop	r0
    41ee:	0f 90       	pop	r0
    41f0:	cf 91       	pop	r28
    41f2:	df 91       	pop	r29
    41f4:	08 95       	ret

000041f6 <SevenSegment_Init>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "SevenSegment_Private.h"

void SevenSegment_Init(u8 Copy_u8PortId){
    41f6:	df 93       	push	r29
    41f8:	cf 93       	push	r28
    41fa:	0f 92       	push	r0
    41fc:	cd b7       	in	r28, 0x3d	; 61
    41fe:	de b7       	in	r29, 0x3e	; 62
    4200:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortDirection(Copy_u8PortId, DIO_u8_HIGH);
    4202:	89 81       	ldd	r24, Y+1	; 0x01
    4204:	61 e0       	ldi	r22, 0x01	; 1
    4206:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_u8SetPortDirection>
}
    420a:	0f 90       	pop	r0
    420c:	cf 91       	pop	r28
    420e:	df 91       	pop	r29
    4210:	08 95       	ret

00004212 <SevenSegment_Display>:

void SevenSegment_Display(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6)
{
    4212:	af 92       	push	r10
    4214:	cf 92       	push	r12
    4216:	ef 92       	push	r14
    4218:	0f 93       	push	r16
    421a:	df 93       	push	r29
    421c:	cf 93       	push	r28
    421e:	cd b7       	in	r28, 0x3d	; 61
    4220:	de b7       	in	r29, 0x3e	; 62
    4222:	2a 97       	sbiw	r28, 0x0a	; 10
    4224:	0f b6       	in	r0, 0x3f	; 63
    4226:	f8 94       	cli
    4228:	de bf       	out	0x3e, r29	; 62
    422a:	0f be       	out	0x3f, r0	; 63
    422c:	cd bf       	out	0x3d, r28	; 61
    422e:	89 83       	std	Y+1, r24	; 0x01
    4230:	6a 83       	std	Y+2, r22	; 0x02
    4232:	4b 83       	std	Y+3, r20	; 0x03
    4234:	2c 83       	std	Y+4, r18	; 0x04
    4236:	0d 83       	std	Y+5, r16	; 0x05
    4238:	ee 82       	std	Y+6, r14	; 0x06
    423a:	cf 82       	std	Y+7, r12	; 0x07
    423c:	a8 86       	std	Y+8, r10	; 0x08
	switch (Copy_u8PortId)
    423e:	89 81       	ldd	r24, Y+1	; 0x01
    4240:	28 2f       	mov	r18, r24
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	3a 87       	std	Y+10, r19	; 0x0a
    4246:	29 87       	std	Y+9, r18	; 0x09
    4248:	89 85       	ldd	r24, Y+9	; 0x09
    424a:	9a 85       	ldd	r25, Y+10	; 0x0a
    424c:	81 30       	cpi	r24, 0x01	; 1
    424e:	91 05       	cpc	r25, r1
    4250:	09 f4       	brne	.+2      	; 0x4254 <SevenSegment_Display+0x42>
    4252:	96 c0       	rjmp	.+300    	; 0x4380 <SevenSegment_Display+0x16e>
    4254:	29 85       	ldd	r18, Y+9	; 0x09
    4256:	3a 85       	ldd	r19, Y+10	; 0x0a
    4258:	22 30       	cpi	r18, 0x02	; 2
    425a:	31 05       	cpc	r19, r1
    425c:	2c f4       	brge	.+10     	; 0x4268 <SevenSegment_Display+0x56>
    425e:	89 85       	ldd	r24, Y+9	; 0x09
    4260:	9a 85       	ldd	r25, Y+10	; 0x0a
    4262:	00 97       	sbiw	r24, 0x00	; 0
    4264:	71 f0       	breq	.+28     	; 0x4282 <SevenSegment_Display+0x70>
    4266:	08 c2       	rjmp	.+1040   	; 0x4678 <SevenSegment_Display+0x466>
    4268:	29 85       	ldd	r18, Y+9	; 0x09
    426a:	3a 85       	ldd	r19, Y+10	; 0x0a
    426c:	22 30       	cpi	r18, 0x02	; 2
    426e:	31 05       	cpc	r19, r1
    4270:	09 f4       	brne	.+2      	; 0x4274 <SevenSegment_Display+0x62>
    4272:	05 c1       	rjmp	.+522    	; 0x447e <SevenSegment_Display+0x26c>
    4274:	89 85       	ldd	r24, Y+9	; 0x09
    4276:	9a 85       	ldd	r25, Y+10	; 0x0a
    4278:	83 30       	cpi	r24, 0x03	; 3
    427a:	91 05       	cpc	r25, r1
    427c:	09 f4       	brne	.+2      	; 0x4280 <SevenSegment_Display+0x6e>
    427e:	7e c1       	rjmp	.+764    	; 0x457c <SevenSegment_Display+0x36a>
    4280:	fb c1       	rjmp	.+1014   	; 0x4678 <SevenSegment_Display+0x466>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    4282:	8a 81       	ldd	r24, Y+2	; 0x02
    4284:	81 30       	cpi	r24, 0x01	; 1
    4286:	41 f4       	brne	.+16     	; 0x4298 <SevenSegment_Display+0x86>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    4288:	ab e3       	ldi	r26, 0x3B	; 59
    428a:	b0 e0       	ldi	r27, 0x00	; 0
    428c:	eb e3       	ldi	r30, 0x3B	; 59
    428e:	f0 e0       	ldi	r31, 0x00	; 0
    4290:	80 81       	ld	r24, Z
    4292:	81 60       	ori	r24, 0x01	; 1
    4294:	8c 93       	st	X, r24
    4296:	07 c0       	rjmp	.+14     	; 0x42a6 <SevenSegment_Display+0x94>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    4298:	ab e3       	ldi	r26, 0x3B	; 59
    429a:	b0 e0       	ldi	r27, 0x00	; 0
    429c:	eb e3       	ldi	r30, 0x3B	; 59
    429e:	f0 e0       	ldi	r31, 0x00	; 0
    42a0:	80 81       	ld	r24, Z
    42a2:	8e 7f       	andi	r24, 0xFE	; 254
    42a4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    42a6:	8b 81       	ldd	r24, Y+3	; 0x03
    42a8:	81 30       	cpi	r24, 0x01	; 1
    42aa:	41 f4       	brne	.+16     	; 0x42bc <SevenSegment_Display+0xaa>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    42ac:	ab e3       	ldi	r26, 0x3B	; 59
    42ae:	b0 e0       	ldi	r27, 0x00	; 0
    42b0:	eb e3       	ldi	r30, 0x3B	; 59
    42b2:	f0 e0       	ldi	r31, 0x00	; 0
    42b4:	80 81       	ld	r24, Z
    42b6:	82 60       	ori	r24, 0x02	; 2
    42b8:	8c 93       	st	X, r24
    42ba:	07 c0       	rjmp	.+14     	; 0x42ca <SevenSegment_Display+0xb8>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    42bc:	ab e3       	ldi	r26, 0x3B	; 59
    42be:	b0 e0       	ldi	r27, 0x00	; 0
    42c0:	eb e3       	ldi	r30, 0x3B	; 59
    42c2:	f0 e0       	ldi	r31, 0x00	; 0
    42c4:	80 81       	ld	r24, Z
    42c6:	8d 7f       	andi	r24, 0xFD	; 253
    42c8:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    42ca:	8c 81       	ldd	r24, Y+4	; 0x04
    42cc:	81 30       	cpi	r24, 0x01	; 1
    42ce:	41 f4       	brne	.+16     	; 0x42e0 <SevenSegment_Display+0xce>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    42d0:	ab e3       	ldi	r26, 0x3B	; 59
    42d2:	b0 e0       	ldi	r27, 0x00	; 0
    42d4:	eb e3       	ldi	r30, 0x3B	; 59
    42d6:	f0 e0       	ldi	r31, 0x00	; 0
    42d8:	80 81       	ld	r24, Z
    42da:	84 60       	ori	r24, 0x04	; 4
    42dc:	8c 93       	st	X, r24
    42de:	07 c0       	rjmp	.+14     	; 0x42ee <SevenSegment_Display+0xdc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    42e0:	ab e3       	ldi	r26, 0x3B	; 59
    42e2:	b0 e0       	ldi	r27, 0x00	; 0
    42e4:	eb e3       	ldi	r30, 0x3B	; 59
    42e6:	f0 e0       	ldi	r31, 0x00	; 0
    42e8:	80 81       	ld	r24, Z
    42ea:	8b 7f       	andi	r24, 0xFB	; 251
    42ec:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    42ee:	8d 81       	ldd	r24, Y+5	; 0x05
    42f0:	81 30       	cpi	r24, 0x01	; 1
    42f2:	41 f4       	brne	.+16     	; 0x4304 <SevenSegment_Display+0xf2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    42f4:	ab e3       	ldi	r26, 0x3B	; 59
    42f6:	b0 e0       	ldi	r27, 0x00	; 0
    42f8:	eb e3       	ldi	r30, 0x3B	; 59
    42fa:	f0 e0       	ldi	r31, 0x00	; 0
    42fc:	80 81       	ld	r24, Z
    42fe:	88 60       	ori	r24, 0x08	; 8
    4300:	8c 93       	st	X, r24
    4302:	07 c0       	rjmp	.+14     	; 0x4312 <SevenSegment_Display+0x100>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    4304:	ab e3       	ldi	r26, 0x3B	; 59
    4306:	b0 e0       	ldi	r27, 0x00	; 0
    4308:	eb e3       	ldi	r30, 0x3B	; 59
    430a:	f0 e0       	ldi	r31, 0x00	; 0
    430c:	80 81       	ld	r24, Z
    430e:	87 7f       	andi	r24, 0xF7	; 247
    4310:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    4312:	8e 81       	ldd	r24, Y+6	; 0x06
    4314:	81 30       	cpi	r24, 0x01	; 1
    4316:	41 f4       	brne	.+16     	; 0x4328 <SevenSegment_Display+0x116>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    4318:	ab e3       	ldi	r26, 0x3B	; 59
    431a:	b0 e0       	ldi	r27, 0x00	; 0
    431c:	eb e3       	ldi	r30, 0x3B	; 59
    431e:	f0 e0       	ldi	r31, 0x00	; 0
    4320:	80 81       	ld	r24, Z
    4322:	80 61       	ori	r24, 0x10	; 16
    4324:	8c 93       	st	X, r24
    4326:	07 c0       	rjmp	.+14     	; 0x4336 <SevenSegment_Display+0x124>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    4328:	ab e3       	ldi	r26, 0x3B	; 59
    432a:	b0 e0       	ldi	r27, 0x00	; 0
    432c:	eb e3       	ldi	r30, 0x3B	; 59
    432e:	f0 e0       	ldi	r31, 0x00	; 0
    4330:	80 81       	ld	r24, Z
    4332:	8f 7e       	andi	r24, 0xEF	; 239
    4334:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4336:	8f 81       	ldd	r24, Y+7	; 0x07
    4338:	81 30       	cpi	r24, 0x01	; 1
    433a:	41 f4       	brne	.+16     	; 0x434c <SevenSegment_Display+0x13a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    433c:	ab e3       	ldi	r26, 0x3B	; 59
    433e:	b0 e0       	ldi	r27, 0x00	; 0
    4340:	eb e3       	ldi	r30, 0x3B	; 59
    4342:	f0 e0       	ldi	r31, 0x00	; 0
    4344:	80 81       	ld	r24, Z
    4346:	80 62       	ori	r24, 0x20	; 32
    4348:	8c 93       	st	X, r24
    434a:	07 c0       	rjmp	.+14     	; 0x435a <SevenSegment_Display+0x148>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    434c:	ab e3       	ldi	r26, 0x3B	; 59
    434e:	b0 e0       	ldi	r27, 0x00	; 0
    4350:	eb e3       	ldi	r30, 0x3B	; 59
    4352:	f0 e0       	ldi	r31, 0x00	; 0
    4354:	80 81       	ld	r24, Z
    4356:	8f 7d       	andi	r24, 0xDF	; 223
    4358:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    435a:	88 85       	ldd	r24, Y+8	; 0x08
    435c:	81 30       	cpi	r24, 0x01	; 1
    435e:	41 f4       	brne	.+16     	; 0x4370 <SevenSegment_Display+0x15e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    4360:	ab e3       	ldi	r26, 0x3B	; 59
    4362:	b0 e0       	ldi	r27, 0x00	; 0
    4364:	eb e3       	ldi	r30, 0x3B	; 59
    4366:	f0 e0       	ldi	r31, 0x00	; 0
    4368:	80 81       	ld	r24, Z
    436a:	80 64       	ori	r24, 0x40	; 64
    436c:	8c 93       	st	X, r24
    436e:	84 c1       	rjmp	.+776    	; 0x4678 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    4370:	ab e3       	ldi	r26, 0x3B	; 59
    4372:	b0 e0       	ldi	r27, 0x00	; 0
    4374:	eb e3       	ldi	r30, 0x3B	; 59
    4376:	f0 e0       	ldi	r31, 0x00	; 0
    4378:	80 81       	ld	r24, Z
    437a:	8f 7b       	andi	r24, 0xBF	; 191
    437c:	8c 93       	st	X, r24
    437e:	7c c1       	rjmp	.+760    	; 0x4678 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    4380:	8a 81       	ldd	r24, Y+2	; 0x02
    4382:	81 30       	cpi	r24, 0x01	; 1
    4384:	41 f4       	brne	.+16     	; 0x4396 <SevenSegment_Display+0x184>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    4386:	a8 e3       	ldi	r26, 0x38	; 56
    4388:	b0 e0       	ldi	r27, 0x00	; 0
    438a:	e8 e3       	ldi	r30, 0x38	; 56
    438c:	f0 e0       	ldi	r31, 0x00	; 0
    438e:	80 81       	ld	r24, Z
    4390:	81 60       	ori	r24, 0x01	; 1
    4392:	8c 93       	st	X, r24
    4394:	07 c0       	rjmp	.+14     	; 0x43a4 <SevenSegment_Display+0x192>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    4396:	a8 e3       	ldi	r26, 0x38	; 56
    4398:	b0 e0       	ldi	r27, 0x00	; 0
    439a:	e8 e3       	ldi	r30, 0x38	; 56
    439c:	f0 e0       	ldi	r31, 0x00	; 0
    439e:	80 81       	ld	r24, Z
    43a0:	8e 7f       	andi	r24, 0xFE	; 254
    43a2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    43a4:	8b 81       	ldd	r24, Y+3	; 0x03
    43a6:	81 30       	cpi	r24, 0x01	; 1
    43a8:	41 f4       	brne	.+16     	; 0x43ba <SevenSegment_Display+0x1a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    43aa:	a8 e3       	ldi	r26, 0x38	; 56
    43ac:	b0 e0       	ldi	r27, 0x00	; 0
    43ae:	e8 e3       	ldi	r30, 0x38	; 56
    43b0:	f0 e0       	ldi	r31, 0x00	; 0
    43b2:	80 81       	ld	r24, Z
    43b4:	82 60       	ori	r24, 0x02	; 2
    43b6:	8c 93       	st	X, r24
    43b8:	07 c0       	rjmp	.+14     	; 0x43c8 <SevenSegment_Display+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    43ba:	a8 e3       	ldi	r26, 0x38	; 56
    43bc:	b0 e0       	ldi	r27, 0x00	; 0
    43be:	e8 e3       	ldi	r30, 0x38	; 56
    43c0:	f0 e0       	ldi	r31, 0x00	; 0
    43c2:	80 81       	ld	r24, Z
    43c4:	8d 7f       	andi	r24, 0xFD	; 253
    43c6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    43c8:	8c 81       	ldd	r24, Y+4	; 0x04
    43ca:	81 30       	cpi	r24, 0x01	; 1
    43cc:	41 f4       	brne	.+16     	; 0x43de <SevenSegment_Display+0x1cc>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    43ce:	a8 e3       	ldi	r26, 0x38	; 56
    43d0:	b0 e0       	ldi	r27, 0x00	; 0
    43d2:	e8 e3       	ldi	r30, 0x38	; 56
    43d4:	f0 e0       	ldi	r31, 0x00	; 0
    43d6:	80 81       	ld	r24, Z
    43d8:	84 60       	ori	r24, 0x04	; 4
    43da:	8c 93       	st	X, r24
    43dc:	07 c0       	rjmp	.+14     	; 0x43ec <SevenSegment_Display+0x1da>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    43de:	a8 e3       	ldi	r26, 0x38	; 56
    43e0:	b0 e0       	ldi	r27, 0x00	; 0
    43e2:	e8 e3       	ldi	r30, 0x38	; 56
    43e4:	f0 e0       	ldi	r31, 0x00	; 0
    43e6:	80 81       	ld	r24, Z
    43e8:	8b 7f       	andi	r24, 0xFB	; 251
    43ea:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    43ec:	8d 81       	ldd	r24, Y+5	; 0x05
    43ee:	81 30       	cpi	r24, 0x01	; 1
    43f0:	41 f4       	brne	.+16     	; 0x4402 <SevenSegment_Display+0x1f0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    43f2:	a8 e3       	ldi	r26, 0x38	; 56
    43f4:	b0 e0       	ldi	r27, 0x00	; 0
    43f6:	e8 e3       	ldi	r30, 0x38	; 56
    43f8:	f0 e0       	ldi	r31, 0x00	; 0
    43fa:	80 81       	ld	r24, Z
    43fc:	88 60       	ori	r24, 0x08	; 8
    43fe:	8c 93       	st	X, r24
    4400:	07 c0       	rjmp	.+14     	; 0x4410 <SevenSegment_Display+0x1fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    4402:	a8 e3       	ldi	r26, 0x38	; 56
    4404:	b0 e0       	ldi	r27, 0x00	; 0
    4406:	e8 e3       	ldi	r30, 0x38	; 56
    4408:	f0 e0       	ldi	r31, 0x00	; 0
    440a:	80 81       	ld	r24, Z
    440c:	87 7f       	andi	r24, 0xF7	; 247
    440e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    4410:	8e 81       	ldd	r24, Y+6	; 0x06
    4412:	81 30       	cpi	r24, 0x01	; 1
    4414:	41 f4       	brne	.+16     	; 0x4426 <SevenSegment_Display+0x214>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    4416:	a8 e3       	ldi	r26, 0x38	; 56
    4418:	b0 e0       	ldi	r27, 0x00	; 0
    441a:	e8 e3       	ldi	r30, 0x38	; 56
    441c:	f0 e0       	ldi	r31, 0x00	; 0
    441e:	80 81       	ld	r24, Z
    4420:	80 61       	ori	r24, 0x10	; 16
    4422:	8c 93       	st	X, r24
    4424:	07 c0       	rjmp	.+14     	; 0x4434 <SevenSegment_Display+0x222>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    4426:	a8 e3       	ldi	r26, 0x38	; 56
    4428:	b0 e0       	ldi	r27, 0x00	; 0
    442a:	e8 e3       	ldi	r30, 0x38	; 56
    442c:	f0 e0       	ldi	r31, 0x00	; 0
    442e:	80 81       	ld	r24, Z
    4430:	8f 7e       	andi	r24, 0xEF	; 239
    4432:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4434:	8f 81       	ldd	r24, Y+7	; 0x07
    4436:	81 30       	cpi	r24, 0x01	; 1
    4438:	41 f4       	brne	.+16     	; 0x444a <SevenSegment_Display+0x238>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    443a:	a8 e3       	ldi	r26, 0x38	; 56
    443c:	b0 e0       	ldi	r27, 0x00	; 0
    443e:	e8 e3       	ldi	r30, 0x38	; 56
    4440:	f0 e0       	ldi	r31, 0x00	; 0
    4442:	80 81       	ld	r24, Z
    4444:	80 62       	ori	r24, 0x20	; 32
    4446:	8c 93       	st	X, r24
    4448:	07 c0       	rjmp	.+14     	; 0x4458 <SevenSegment_Display+0x246>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    444a:	a8 e3       	ldi	r26, 0x38	; 56
    444c:	b0 e0       	ldi	r27, 0x00	; 0
    444e:	e8 e3       	ldi	r30, 0x38	; 56
    4450:	f0 e0       	ldi	r31, 0x00	; 0
    4452:	80 81       	ld	r24, Z
    4454:	8f 7d       	andi	r24, 0xDF	; 223
    4456:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4458:	88 85       	ldd	r24, Y+8	; 0x08
    445a:	81 30       	cpi	r24, 0x01	; 1
    445c:	41 f4       	brne	.+16     	; 0x446e <SevenSegment_Display+0x25c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    445e:	a8 e3       	ldi	r26, 0x38	; 56
    4460:	b0 e0       	ldi	r27, 0x00	; 0
    4462:	e8 e3       	ldi	r30, 0x38	; 56
    4464:	f0 e0       	ldi	r31, 0x00	; 0
    4466:	80 81       	ld	r24, Z
    4468:	80 64       	ori	r24, 0x40	; 64
    446a:	8c 93       	st	X, r24
    446c:	05 c1       	rjmp	.+522    	; 0x4678 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    446e:	a8 e3       	ldi	r26, 0x38	; 56
    4470:	b0 e0       	ldi	r27, 0x00	; 0
    4472:	e8 e3       	ldi	r30, 0x38	; 56
    4474:	f0 e0       	ldi	r31, 0x00	; 0
    4476:	80 81       	ld	r24, Z
    4478:	8f 7b       	andi	r24, 0xBF	; 191
    447a:	8c 93       	st	X, r24
    447c:	fd c0       	rjmp	.+506    	; 0x4678 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    447e:	8a 81       	ldd	r24, Y+2	; 0x02
    4480:	81 30       	cpi	r24, 0x01	; 1
    4482:	41 f4       	brne	.+16     	; 0x4494 <SevenSegment_Display+0x282>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    4484:	a5 e3       	ldi	r26, 0x35	; 53
    4486:	b0 e0       	ldi	r27, 0x00	; 0
    4488:	e5 e3       	ldi	r30, 0x35	; 53
    448a:	f0 e0       	ldi	r31, 0x00	; 0
    448c:	80 81       	ld	r24, Z
    448e:	81 60       	ori	r24, 0x01	; 1
    4490:	8c 93       	st	X, r24
    4492:	07 c0       	rjmp	.+14     	; 0x44a2 <SevenSegment_Display+0x290>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    4494:	a5 e3       	ldi	r26, 0x35	; 53
    4496:	b0 e0       	ldi	r27, 0x00	; 0
    4498:	e5 e3       	ldi	r30, 0x35	; 53
    449a:	f0 e0       	ldi	r31, 0x00	; 0
    449c:	80 81       	ld	r24, Z
    449e:	8e 7f       	andi	r24, 0xFE	; 254
    44a0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    44a2:	8b 81       	ldd	r24, Y+3	; 0x03
    44a4:	81 30       	cpi	r24, 0x01	; 1
    44a6:	41 f4       	brne	.+16     	; 0x44b8 <SevenSegment_Display+0x2a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    44a8:	a5 e3       	ldi	r26, 0x35	; 53
    44aa:	b0 e0       	ldi	r27, 0x00	; 0
    44ac:	e5 e3       	ldi	r30, 0x35	; 53
    44ae:	f0 e0       	ldi	r31, 0x00	; 0
    44b0:	80 81       	ld	r24, Z
    44b2:	82 60       	ori	r24, 0x02	; 2
    44b4:	8c 93       	st	X, r24
    44b6:	07 c0       	rjmp	.+14     	; 0x44c6 <SevenSegment_Display+0x2b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    44b8:	a5 e3       	ldi	r26, 0x35	; 53
    44ba:	b0 e0       	ldi	r27, 0x00	; 0
    44bc:	e5 e3       	ldi	r30, 0x35	; 53
    44be:	f0 e0       	ldi	r31, 0x00	; 0
    44c0:	80 81       	ld	r24, Z
    44c2:	8d 7f       	andi	r24, 0xFD	; 253
    44c4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    44c6:	8c 81       	ldd	r24, Y+4	; 0x04
    44c8:	81 30       	cpi	r24, 0x01	; 1
    44ca:	41 f4       	brne	.+16     	; 0x44dc <SevenSegment_Display+0x2ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    44cc:	a5 e3       	ldi	r26, 0x35	; 53
    44ce:	b0 e0       	ldi	r27, 0x00	; 0
    44d0:	e5 e3       	ldi	r30, 0x35	; 53
    44d2:	f0 e0       	ldi	r31, 0x00	; 0
    44d4:	80 81       	ld	r24, Z
    44d6:	84 60       	ori	r24, 0x04	; 4
    44d8:	8c 93       	st	X, r24
    44da:	07 c0       	rjmp	.+14     	; 0x44ea <SevenSegment_Display+0x2d8>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    44dc:	a5 e3       	ldi	r26, 0x35	; 53
    44de:	b0 e0       	ldi	r27, 0x00	; 0
    44e0:	e5 e3       	ldi	r30, 0x35	; 53
    44e2:	f0 e0       	ldi	r31, 0x00	; 0
    44e4:	80 81       	ld	r24, Z
    44e6:	8b 7f       	andi	r24, 0xFB	; 251
    44e8:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    44ea:	8d 81       	ldd	r24, Y+5	; 0x05
    44ec:	81 30       	cpi	r24, 0x01	; 1
    44ee:	41 f4       	brne	.+16     	; 0x4500 <SevenSegment_Display+0x2ee>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    44f0:	a5 e3       	ldi	r26, 0x35	; 53
    44f2:	b0 e0       	ldi	r27, 0x00	; 0
    44f4:	e5 e3       	ldi	r30, 0x35	; 53
    44f6:	f0 e0       	ldi	r31, 0x00	; 0
    44f8:	80 81       	ld	r24, Z
    44fa:	88 60       	ori	r24, 0x08	; 8
    44fc:	8c 93       	st	X, r24
    44fe:	07 c0       	rjmp	.+14     	; 0x450e <SevenSegment_Display+0x2fc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    4500:	a5 e3       	ldi	r26, 0x35	; 53
    4502:	b0 e0       	ldi	r27, 0x00	; 0
    4504:	e5 e3       	ldi	r30, 0x35	; 53
    4506:	f0 e0       	ldi	r31, 0x00	; 0
    4508:	80 81       	ld	r24, Z
    450a:	87 7f       	andi	r24, 0xF7	; 247
    450c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    450e:	8e 81       	ldd	r24, Y+6	; 0x06
    4510:	81 30       	cpi	r24, 0x01	; 1
    4512:	41 f4       	brne	.+16     	; 0x4524 <SevenSegment_Display+0x312>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    4514:	a5 e3       	ldi	r26, 0x35	; 53
    4516:	b0 e0       	ldi	r27, 0x00	; 0
    4518:	e5 e3       	ldi	r30, 0x35	; 53
    451a:	f0 e0       	ldi	r31, 0x00	; 0
    451c:	80 81       	ld	r24, Z
    451e:	80 61       	ori	r24, 0x10	; 16
    4520:	8c 93       	st	X, r24
    4522:	07 c0       	rjmp	.+14     	; 0x4532 <SevenSegment_Display+0x320>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    4524:	a5 e3       	ldi	r26, 0x35	; 53
    4526:	b0 e0       	ldi	r27, 0x00	; 0
    4528:	e5 e3       	ldi	r30, 0x35	; 53
    452a:	f0 e0       	ldi	r31, 0x00	; 0
    452c:	80 81       	ld	r24, Z
    452e:	8f 7e       	andi	r24, 0xEF	; 239
    4530:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4532:	8f 81       	ldd	r24, Y+7	; 0x07
    4534:	81 30       	cpi	r24, 0x01	; 1
    4536:	41 f4       	brne	.+16     	; 0x4548 <SevenSegment_Display+0x336>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    4538:	a5 e3       	ldi	r26, 0x35	; 53
    453a:	b0 e0       	ldi	r27, 0x00	; 0
    453c:	e5 e3       	ldi	r30, 0x35	; 53
    453e:	f0 e0       	ldi	r31, 0x00	; 0
    4540:	80 81       	ld	r24, Z
    4542:	80 62       	ori	r24, 0x20	; 32
    4544:	8c 93       	st	X, r24
    4546:	07 c0       	rjmp	.+14     	; 0x4556 <SevenSegment_Display+0x344>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    4548:	a5 e3       	ldi	r26, 0x35	; 53
    454a:	b0 e0       	ldi	r27, 0x00	; 0
    454c:	e5 e3       	ldi	r30, 0x35	; 53
    454e:	f0 e0       	ldi	r31, 0x00	; 0
    4550:	80 81       	ld	r24, Z
    4552:	8f 7d       	andi	r24, 0xDF	; 223
    4554:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4556:	88 85       	ldd	r24, Y+8	; 0x08
    4558:	81 30       	cpi	r24, 0x01	; 1
    455a:	41 f4       	brne	.+16     	; 0x456c <SevenSegment_Display+0x35a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    455c:	a5 e3       	ldi	r26, 0x35	; 53
    455e:	b0 e0       	ldi	r27, 0x00	; 0
    4560:	e5 e3       	ldi	r30, 0x35	; 53
    4562:	f0 e0       	ldi	r31, 0x00	; 0
    4564:	80 81       	ld	r24, Z
    4566:	80 64       	ori	r24, 0x40	; 64
    4568:	8c 93       	st	X, r24
    456a:	86 c0       	rjmp	.+268    	; 0x4678 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    456c:	a5 e3       	ldi	r26, 0x35	; 53
    456e:	b0 e0       	ldi	r27, 0x00	; 0
    4570:	e5 e3       	ldi	r30, 0x35	; 53
    4572:	f0 e0       	ldi	r31, 0x00	; 0
    4574:	80 81       	ld	r24, Z
    4576:	8f 7b       	andi	r24, 0xBF	; 191
    4578:	8c 93       	st	X, r24
    457a:	7e c0       	rjmp	.+252    	; 0x4678 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    457c:	8a 81       	ldd	r24, Y+2	; 0x02
    457e:	81 30       	cpi	r24, 0x01	; 1
    4580:	41 f4       	brne	.+16     	; 0x4592 <SevenSegment_Display+0x380>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    4582:	a2 e3       	ldi	r26, 0x32	; 50
    4584:	b0 e0       	ldi	r27, 0x00	; 0
    4586:	e2 e3       	ldi	r30, 0x32	; 50
    4588:	f0 e0       	ldi	r31, 0x00	; 0
    458a:	80 81       	ld	r24, Z
    458c:	81 60       	ori	r24, 0x01	; 1
    458e:	8c 93       	st	X, r24
    4590:	07 c0       	rjmp	.+14     	; 0x45a0 <SevenSegment_Display+0x38e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    4592:	a2 e3       	ldi	r26, 0x32	; 50
    4594:	b0 e0       	ldi	r27, 0x00	; 0
    4596:	e2 e3       	ldi	r30, 0x32	; 50
    4598:	f0 e0       	ldi	r31, 0x00	; 0
    459a:	80 81       	ld	r24, Z
    459c:	8e 7f       	andi	r24, 0xFE	; 254
    459e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    45a0:	8b 81       	ldd	r24, Y+3	; 0x03
    45a2:	81 30       	cpi	r24, 0x01	; 1
    45a4:	41 f4       	brne	.+16     	; 0x45b6 <SevenSegment_Display+0x3a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    45a6:	a2 e3       	ldi	r26, 0x32	; 50
    45a8:	b0 e0       	ldi	r27, 0x00	; 0
    45aa:	e2 e3       	ldi	r30, 0x32	; 50
    45ac:	f0 e0       	ldi	r31, 0x00	; 0
    45ae:	80 81       	ld	r24, Z
    45b0:	82 60       	ori	r24, 0x02	; 2
    45b2:	8c 93       	st	X, r24
    45b4:	07 c0       	rjmp	.+14     	; 0x45c4 <SevenSegment_Display+0x3b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    45b6:	a2 e3       	ldi	r26, 0x32	; 50
    45b8:	b0 e0       	ldi	r27, 0x00	; 0
    45ba:	e2 e3       	ldi	r30, 0x32	; 50
    45bc:	f0 e0       	ldi	r31, 0x00	; 0
    45be:	80 81       	ld	r24, Z
    45c0:	8d 7f       	andi	r24, 0xFD	; 253
    45c2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    45c4:	8c 81       	ldd	r24, Y+4	; 0x04
    45c6:	81 30       	cpi	r24, 0x01	; 1
    45c8:	41 f4       	brne	.+16     	; 0x45da <SevenSegment_Display+0x3c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    45ca:	a2 e3       	ldi	r26, 0x32	; 50
    45cc:	b0 e0       	ldi	r27, 0x00	; 0
    45ce:	e2 e3       	ldi	r30, 0x32	; 50
    45d0:	f0 e0       	ldi	r31, 0x00	; 0
    45d2:	80 81       	ld	r24, Z
    45d4:	84 60       	ori	r24, 0x04	; 4
    45d6:	8c 93       	st	X, r24
    45d8:	07 c0       	rjmp	.+14     	; 0x45e8 <SevenSegment_Display+0x3d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    45da:	a2 e3       	ldi	r26, 0x32	; 50
    45dc:	b0 e0       	ldi	r27, 0x00	; 0
    45de:	e2 e3       	ldi	r30, 0x32	; 50
    45e0:	f0 e0       	ldi	r31, 0x00	; 0
    45e2:	80 81       	ld	r24, Z
    45e4:	8b 7f       	andi	r24, 0xFB	; 251
    45e6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    45e8:	8d 81       	ldd	r24, Y+5	; 0x05
    45ea:	81 30       	cpi	r24, 0x01	; 1
    45ec:	41 f4       	brne	.+16     	; 0x45fe <SevenSegment_Display+0x3ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    45ee:	a2 e3       	ldi	r26, 0x32	; 50
    45f0:	b0 e0       	ldi	r27, 0x00	; 0
    45f2:	e2 e3       	ldi	r30, 0x32	; 50
    45f4:	f0 e0       	ldi	r31, 0x00	; 0
    45f6:	80 81       	ld	r24, Z
    45f8:	88 60       	ori	r24, 0x08	; 8
    45fa:	8c 93       	st	X, r24
    45fc:	07 c0       	rjmp	.+14     	; 0x460c <SevenSegment_Display+0x3fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    45fe:	a2 e3       	ldi	r26, 0x32	; 50
    4600:	b0 e0       	ldi	r27, 0x00	; 0
    4602:	e2 e3       	ldi	r30, 0x32	; 50
    4604:	f0 e0       	ldi	r31, 0x00	; 0
    4606:	80 81       	ld	r24, Z
    4608:	87 7f       	andi	r24, 0xF7	; 247
    460a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    460c:	8e 81       	ldd	r24, Y+6	; 0x06
    460e:	81 30       	cpi	r24, 0x01	; 1
    4610:	41 f4       	brne	.+16     	; 0x4622 <SevenSegment_Display+0x410>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    4612:	a2 e3       	ldi	r26, 0x32	; 50
    4614:	b0 e0       	ldi	r27, 0x00	; 0
    4616:	e2 e3       	ldi	r30, 0x32	; 50
    4618:	f0 e0       	ldi	r31, 0x00	; 0
    461a:	80 81       	ld	r24, Z
    461c:	80 61       	ori	r24, 0x10	; 16
    461e:	8c 93       	st	X, r24
    4620:	07 c0       	rjmp	.+14     	; 0x4630 <SevenSegment_Display+0x41e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    4622:	a2 e3       	ldi	r26, 0x32	; 50
    4624:	b0 e0       	ldi	r27, 0x00	; 0
    4626:	e2 e3       	ldi	r30, 0x32	; 50
    4628:	f0 e0       	ldi	r31, 0x00	; 0
    462a:	80 81       	ld	r24, Z
    462c:	8f 7e       	andi	r24, 0xEF	; 239
    462e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4630:	8f 81       	ldd	r24, Y+7	; 0x07
    4632:	81 30       	cpi	r24, 0x01	; 1
    4634:	41 f4       	brne	.+16     	; 0x4646 <SevenSegment_Display+0x434>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    4636:	a2 e3       	ldi	r26, 0x32	; 50
    4638:	b0 e0       	ldi	r27, 0x00	; 0
    463a:	e2 e3       	ldi	r30, 0x32	; 50
    463c:	f0 e0       	ldi	r31, 0x00	; 0
    463e:	80 81       	ld	r24, Z
    4640:	80 62       	ori	r24, 0x20	; 32
    4642:	8c 93       	st	X, r24
    4644:	07 c0       	rjmp	.+14     	; 0x4654 <SevenSegment_Display+0x442>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    4646:	a2 e3       	ldi	r26, 0x32	; 50
    4648:	b0 e0       	ldi	r27, 0x00	; 0
    464a:	e2 e3       	ldi	r30, 0x32	; 50
    464c:	f0 e0       	ldi	r31, 0x00	; 0
    464e:	80 81       	ld	r24, Z
    4650:	8f 7d       	andi	r24, 0xDF	; 223
    4652:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4654:	88 85       	ldd	r24, Y+8	; 0x08
    4656:	81 30       	cpi	r24, 0x01	; 1
    4658:	41 f4       	brne	.+16     	; 0x466a <SevenSegment_Display+0x458>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    465a:	a2 e3       	ldi	r26, 0x32	; 50
    465c:	b0 e0       	ldi	r27, 0x00	; 0
    465e:	e2 e3       	ldi	r30, 0x32	; 50
    4660:	f0 e0       	ldi	r31, 0x00	; 0
    4662:	80 81       	ld	r24, Z
    4664:	80 64       	ori	r24, 0x40	; 64
    4666:	8c 93       	st	X, r24
    4668:	07 c0       	rjmp	.+14     	; 0x4678 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    466a:	a2 e3       	ldi	r26, 0x32	; 50
    466c:	b0 e0       	ldi	r27, 0x00	; 0
    466e:	e2 e3       	ldi	r30, 0x32	; 50
    4670:	f0 e0       	ldi	r31, 0x00	; 0
    4672:	80 81       	ld	r24, Z
    4674:	8f 7b       	andi	r24, 0xBF	; 191
    4676:	8c 93       	st	X, r24
		}
		break;
	}
}
    4678:	2a 96       	adiw	r28, 0x0a	; 10
    467a:	0f b6       	in	r0, 0x3f	; 63
    467c:	f8 94       	cli
    467e:	de bf       	out	0x3e, r29	; 62
    4680:	0f be       	out	0x3f, r0	; 63
    4682:	cd bf       	out	0x3d, r28	; 61
    4684:	cf 91       	pop	r28
    4686:	df 91       	pop	r29
    4688:	0f 91       	pop	r16
    468a:	ef 90       	pop	r14
    468c:	cf 90       	pop	r12
    468e:	af 90       	pop	r10
    4690:	08 95       	ret

00004692 <SevenSegment_From0To9>:

void SevenSegment_From0To9(void){
    4692:	af 92       	push	r10
    4694:	cf 92       	push	r12
    4696:	ef 92       	push	r14
    4698:	0f 93       	push	r16
    469a:	1f 93       	push	r17
    469c:	df 93       	push	r29
    469e:	cf 93       	push	r28
    46a0:	cd b7       	in	r28, 0x3d	; 61
    46a2:	de b7       	in	r29, 0x3e	; 62
    46a4:	cc 58       	subi	r28, 0x8C	; 140
    46a6:	d0 40       	sbci	r29, 0x00	; 0
    46a8:	0f b6       	in	r0, 0x3f	; 63
    46aa:	f8 94       	cli
    46ac:	de bf       	out	0x3e, r29	; 62
    46ae:	0f be       	out	0x3f, r0	; 63
    46b0:	cd bf       	out	0x3d, r28	; 61
	while(1){
		SevenSegment_Display(2, 1, 1, 1, 1, 1, 1, 0); // 0
    46b2:	82 e0       	ldi	r24, 0x02	; 2
    46b4:	61 e0       	ldi	r22, 0x01	; 1
    46b6:	41 e0       	ldi	r20, 0x01	; 1
    46b8:	21 e0       	ldi	r18, 0x01	; 1
    46ba:	01 e0       	ldi	r16, 0x01	; 1
    46bc:	ee 24       	eor	r14, r14
    46be:	e3 94       	inc	r14
    46c0:	cc 24       	eor	r12, r12
    46c2:	c3 94       	inc	r12
    46c4:	aa 24       	eor	r10, r10
    46c6:	0e 94 09 21 	call	0x4212	; 0x4212 <SevenSegment_Display>
    46ca:	fe 01       	movw	r30, r28
    46cc:	e7 57       	subi	r30, 0x77	; 119
    46ce:	ff 4f       	sbci	r31, 0xFF	; 255
    46d0:	80 e0       	ldi	r24, 0x00	; 0
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	a8 e4       	ldi	r26, 0x48	; 72
    46d6:	b2 e4       	ldi	r27, 0x42	; 66
    46d8:	80 83       	st	Z, r24
    46da:	91 83       	std	Z+1, r25	; 0x01
    46dc:	a2 83       	std	Z+2, r26	; 0x02
    46de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46e0:	8e 01       	movw	r16, r28
    46e2:	0b 57       	subi	r16, 0x7B	; 123
    46e4:	1f 4f       	sbci	r17, 0xFF	; 255
    46e6:	fe 01       	movw	r30, r28
    46e8:	e7 57       	subi	r30, 0x77	; 119
    46ea:	ff 4f       	sbci	r31, 0xFF	; 255
    46ec:	60 81       	ld	r22, Z
    46ee:	71 81       	ldd	r23, Z+1	; 0x01
    46f0:	82 81       	ldd	r24, Z+2	; 0x02
    46f2:	93 81       	ldd	r25, Z+3	; 0x03
    46f4:	20 e0       	ldi	r18, 0x00	; 0
    46f6:	30 e0       	ldi	r19, 0x00	; 0
    46f8:	4a e7       	ldi	r20, 0x7A	; 122
    46fa:	55 e4       	ldi	r21, 0x45	; 69
    46fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4700:	dc 01       	movw	r26, r24
    4702:	cb 01       	movw	r24, r22
    4704:	f8 01       	movw	r30, r16
    4706:	80 83       	st	Z, r24
    4708:	91 83       	std	Z+1, r25	; 0x01
    470a:	a2 83       	std	Z+2, r26	; 0x02
    470c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    470e:	fe 01       	movw	r30, r28
    4710:	eb 57       	subi	r30, 0x7B	; 123
    4712:	ff 4f       	sbci	r31, 0xFF	; 255
    4714:	60 81       	ld	r22, Z
    4716:	71 81       	ldd	r23, Z+1	; 0x01
    4718:	82 81       	ldd	r24, Z+2	; 0x02
    471a:	93 81       	ldd	r25, Z+3	; 0x03
    471c:	20 e0       	ldi	r18, 0x00	; 0
    471e:	30 e0       	ldi	r19, 0x00	; 0
    4720:	40 e8       	ldi	r20, 0x80	; 128
    4722:	5f e3       	ldi	r21, 0x3F	; 63
    4724:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    4728:	88 23       	and	r24, r24
    472a:	44 f4       	brge	.+16     	; 0x473c <SevenSegment_From0To9+0xaa>
		__ticks = 1;
    472c:	fe 01       	movw	r30, r28
    472e:	ed 57       	subi	r30, 0x7D	; 125
    4730:	ff 4f       	sbci	r31, 0xFF	; 255
    4732:	81 e0       	ldi	r24, 0x01	; 1
    4734:	90 e0       	ldi	r25, 0x00	; 0
    4736:	91 83       	std	Z+1, r25	; 0x01
    4738:	80 83       	st	Z, r24
    473a:	64 c0       	rjmp	.+200    	; 0x4804 <SevenSegment_From0To9+0x172>
	else if (__tmp > 65535)
    473c:	fe 01       	movw	r30, r28
    473e:	eb 57       	subi	r30, 0x7B	; 123
    4740:	ff 4f       	sbci	r31, 0xFF	; 255
    4742:	60 81       	ld	r22, Z
    4744:	71 81       	ldd	r23, Z+1	; 0x01
    4746:	82 81       	ldd	r24, Z+2	; 0x02
    4748:	93 81       	ldd	r25, Z+3	; 0x03
    474a:	20 e0       	ldi	r18, 0x00	; 0
    474c:	3f ef       	ldi	r19, 0xFF	; 255
    474e:	4f e7       	ldi	r20, 0x7F	; 127
    4750:	57 e4       	ldi	r21, 0x47	; 71
    4752:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    4756:	18 16       	cp	r1, r24
    4758:	0c f0       	brlt	.+2      	; 0x475c <SevenSegment_From0To9+0xca>
    475a:	43 c0       	rjmp	.+134    	; 0x47e2 <SevenSegment_From0To9+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    475c:	fe 01       	movw	r30, r28
    475e:	e7 57       	subi	r30, 0x77	; 119
    4760:	ff 4f       	sbci	r31, 0xFF	; 255
    4762:	60 81       	ld	r22, Z
    4764:	71 81       	ldd	r23, Z+1	; 0x01
    4766:	82 81       	ldd	r24, Z+2	; 0x02
    4768:	93 81       	ldd	r25, Z+3	; 0x03
    476a:	20 e0       	ldi	r18, 0x00	; 0
    476c:	30 e0       	ldi	r19, 0x00	; 0
    476e:	40 e2       	ldi	r20, 0x20	; 32
    4770:	51 e4       	ldi	r21, 0x41	; 65
    4772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4776:	dc 01       	movw	r26, r24
    4778:	cb 01       	movw	r24, r22
    477a:	8e 01       	movw	r16, r28
    477c:	0d 57       	subi	r16, 0x7D	; 125
    477e:	1f 4f       	sbci	r17, 0xFF	; 255
    4780:	bc 01       	movw	r22, r24
    4782:	cd 01       	movw	r24, r26
    4784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4788:	dc 01       	movw	r26, r24
    478a:	cb 01       	movw	r24, r22
    478c:	f8 01       	movw	r30, r16
    478e:	91 83       	std	Z+1, r25	; 0x01
    4790:	80 83       	st	Z, r24
    4792:	1f c0       	rjmp	.+62     	; 0x47d2 <SevenSegment_From0To9+0x140>
    4794:	fe 01       	movw	r30, r28
    4796:	ef 57       	subi	r30, 0x7F	; 127
    4798:	ff 4f       	sbci	r31, 0xFF	; 255
    479a:	80 e9       	ldi	r24, 0x90	; 144
    479c:	91 e0       	ldi	r25, 0x01	; 1
    479e:	91 83       	std	Z+1, r25	; 0x01
    47a0:	80 83       	st	Z, r24
    47a2:	fe 01       	movw	r30, r28
    47a4:	ef 57       	subi	r30, 0x7F	; 127
    47a6:	ff 4f       	sbci	r31, 0xFF	; 255
    47a8:	80 81       	ld	r24, Z
    47aa:	91 81       	ldd	r25, Z+1	; 0x01
    47ac:	01 97       	sbiw	r24, 0x01	; 1
    47ae:	f1 f7       	brne	.-4      	; 0x47ac <SevenSegment_From0To9+0x11a>
    47b0:	fe 01       	movw	r30, r28
    47b2:	ef 57       	subi	r30, 0x7F	; 127
    47b4:	ff 4f       	sbci	r31, 0xFF	; 255
    47b6:	91 83       	std	Z+1, r25	; 0x01
    47b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47ba:	de 01       	movw	r26, r28
    47bc:	ad 57       	subi	r26, 0x7D	; 125
    47be:	bf 4f       	sbci	r27, 0xFF	; 255
    47c0:	fe 01       	movw	r30, r28
    47c2:	ed 57       	subi	r30, 0x7D	; 125
    47c4:	ff 4f       	sbci	r31, 0xFF	; 255
    47c6:	80 81       	ld	r24, Z
    47c8:	91 81       	ldd	r25, Z+1	; 0x01
    47ca:	01 97       	sbiw	r24, 0x01	; 1
    47cc:	11 96       	adiw	r26, 0x01	; 1
    47ce:	9c 93       	st	X, r25
    47d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47d2:	fe 01       	movw	r30, r28
    47d4:	ed 57       	subi	r30, 0x7D	; 125
    47d6:	ff 4f       	sbci	r31, 0xFF	; 255
    47d8:	80 81       	ld	r24, Z
    47da:	91 81       	ldd	r25, Z+1	; 0x01
    47dc:	00 97       	sbiw	r24, 0x00	; 0
    47de:	d1 f6       	brne	.-76     	; 0x4794 <SevenSegment_From0To9+0x102>
    47e0:	27 c0       	rjmp	.+78     	; 0x4830 <SevenSegment_From0To9+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47e2:	8e 01       	movw	r16, r28
    47e4:	0d 57       	subi	r16, 0x7D	; 125
    47e6:	1f 4f       	sbci	r17, 0xFF	; 255
    47e8:	fe 01       	movw	r30, r28
    47ea:	eb 57       	subi	r30, 0x7B	; 123
    47ec:	ff 4f       	sbci	r31, 0xFF	; 255
    47ee:	60 81       	ld	r22, Z
    47f0:	71 81       	ldd	r23, Z+1	; 0x01
    47f2:	82 81       	ldd	r24, Z+2	; 0x02
    47f4:	93 81       	ldd	r25, Z+3	; 0x03
    47f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47fa:	dc 01       	movw	r26, r24
    47fc:	cb 01       	movw	r24, r22
    47fe:	f8 01       	movw	r30, r16
    4800:	91 83       	std	Z+1, r25	; 0x01
    4802:	80 83       	st	Z, r24
    4804:	de 01       	movw	r26, r28
    4806:	a1 58       	subi	r26, 0x81	; 129
    4808:	bf 4f       	sbci	r27, 0xFF	; 255
    480a:	fe 01       	movw	r30, r28
    480c:	ed 57       	subi	r30, 0x7D	; 125
    480e:	ff 4f       	sbci	r31, 0xFF	; 255
    4810:	80 81       	ld	r24, Z
    4812:	91 81       	ldd	r25, Z+1	; 0x01
    4814:	8d 93       	st	X+, r24
    4816:	9c 93       	st	X, r25
    4818:	fe 01       	movw	r30, r28
    481a:	e1 58       	subi	r30, 0x81	; 129
    481c:	ff 4f       	sbci	r31, 0xFF	; 255
    481e:	80 81       	ld	r24, Z
    4820:	91 81       	ldd	r25, Z+1	; 0x01
    4822:	01 97       	sbiw	r24, 0x01	; 1
    4824:	f1 f7       	brne	.-4      	; 0x4822 <SevenSegment_From0To9+0x190>
    4826:	fe 01       	movw	r30, r28
    4828:	e1 58       	subi	r30, 0x81	; 129
    482a:	ff 4f       	sbci	r31, 0xFF	; 255
    482c:	91 83       	std	Z+1, r25	; 0x01
    482e:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(2, 0, 1, 1, 0, 0, 0, 0); // 1
    4830:	82 e0       	ldi	r24, 0x02	; 2
    4832:	60 e0       	ldi	r22, 0x00	; 0
    4834:	41 e0       	ldi	r20, 0x01	; 1
    4836:	21 e0       	ldi	r18, 0x01	; 1
    4838:	00 e0       	ldi	r16, 0x00	; 0
    483a:	ee 24       	eor	r14, r14
    483c:	cc 24       	eor	r12, r12
    483e:	aa 24       	eor	r10, r10
    4840:	0e 94 09 21 	call	0x4212	; 0x4212 <SevenSegment_Display>
    4844:	fe 01       	movw	r30, r28
    4846:	e5 58       	subi	r30, 0x85	; 133
    4848:	ff 4f       	sbci	r31, 0xFF	; 255
    484a:	80 e0       	ldi	r24, 0x00	; 0
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	a8 e4       	ldi	r26, 0x48	; 72
    4850:	b2 e4       	ldi	r27, 0x42	; 66
    4852:	80 83       	st	Z, r24
    4854:	91 83       	std	Z+1, r25	; 0x01
    4856:	a2 83       	std	Z+2, r26	; 0x02
    4858:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    485a:	8e 01       	movw	r16, r28
    485c:	09 58       	subi	r16, 0x89	; 137
    485e:	1f 4f       	sbci	r17, 0xFF	; 255
    4860:	fe 01       	movw	r30, r28
    4862:	e5 58       	subi	r30, 0x85	; 133
    4864:	ff 4f       	sbci	r31, 0xFF	; 255
    4866:	60 81       	ld	r22, Z
    4868:	71 81       	ldd	r23, Z+1	; 0x01
    486a:	82 81       	ldd	r24, Z+2	; 0x02
    486c:	93 81       	ldd	r25, Z+3	; 0x03
    486e:	20 e0       	ldi	r18, 0x00	; 0
    4870:	30 e0       	ldi	r19, 0x00	; 0
    4872:	4a e7       	ldi	r20, 0x7A	; 122
    4874:	55 e4       	ldi	r21, 0x45	; 69
    4876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    487a:	dc 01       	movw	r26, r24
    487c:	cb 01       	movw	r24, r22
    487e:	f8 01       	movw	r30, r16
    4880:	80 83       	st	Z, r24
    4882:	91 83       	std	Z+1, r25	; 0x01
    4884:	a2 83       	std	Z+2, r26	; 0x02
    4886:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4888:	fe 01       	movw	r30, r28
    488a:	e9 58       	subi	r30, 0x89	; 137
    488c:	ff 4f       	sbci	r31, 0xFF	; 255
    488e:	60 81       	ld	r22, Z
    4890:	71 81       	ldd	r23, Z+1	; 0x01
    4892:	82 81       	ldd	r24, Z+2	; 0x02
    4894:	93 81       	ldd	r25, Z+3	; 0x03
    4896:	20 e0       	ldi	r18, 0x00	; 0
    4898:	30 e0       	ldi	r19, 0x00	; 0
    489a:	40 e8       	ldi	r20, 0x80	; 128
    489c:	5f e3       	ldi	r21, 0x3F	; 63
    489e:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    48a2:	88 23       	and	r24, r24
    48a4:	44 f4       	brge	.+16     	; 0x48b6 <SevenSegment_From0To9+0x224>
		__ticks = 1;
    48a6:	fe 01       	movw	r30, r28
    48a8:	eb 58       	subi	r30, 0x8B	; 139
    48aa:	ff 4f       	sbci	r31, 0xFF	; 255
    48ac:	81 e0       	ldi	r24, 0x01	; 1
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	91 83       	std	Z+1, r25	; 0x01
    48b2:	80 83       	st	Z, r24
    48b4:	64 c0       	rjmp	.+200    	; 0x497e <SevenSegment_From0To9+0x2ec>
	else if (__tmp > 65535)
    48b6:	fe 01       	movw	r30, r28
    48b8:	e9 58       	subi	r30, 0x89	; 137
    48ba:	ff 4f       	sbci	r31, 0xFF	; 255
    48bc:	60 81       	ld	r22, Z
    48be:	71 81       	ldd	r23, Z+1	; 0x01
    48c0:	82 81       	ldd	r24, Z+2	; 0x02
    48c2:	93 81       	ldd	r25, Z+3	; 0x03
    48c4:	20 e0       	ldi	r18, 0x00	; 0
    48c6:	3f ef       	ldi	r19, 0xFF	; 255
    48c8:	4f e7       	ldi	r20, 0x7F	; 127
    48ca:	57 e4       	ldi	r21, 0x47	; 71
    48cc:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    48d0:	18 16       	cp	r1, r24
    48d2:	0c f0       	brlt	.+2      	; 0x48d6 <SevenSegment_From0To9+0x244>
    48d4:	43 c0       	rjmp	.+134    	; 0x495c <SevenSegment_From0To9+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48d6:	fe 01       	movw	r30, r28
    48d8:	e5 58       	subi	r30, 0x85	; 133
    48da:	ff 4f       	sbci	r31, 0xFF	; 255
    48dc:	60 81       	ld	r22, Z
    48de:	71 81       	ldd	r23, Z+1	; 0x01
    48e0:	82 81       	ldd	r24, Z+2	; 0x02
    48e2:	93 81       	ldd	r25, Z+3	; 0x03
    48e4:	20 e0       	ldi	r18, 0x00	; 0
    48e6:	30 e0       	ldi	r19, 0x00	; 0
    48e8:	40 e2       	ldi	r20, 0x20	; 32
    48ea:	51 e4       	ldi	r21, 0x41	; 65
    48ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48f0:	dc 01       	movw	r26, r24
    48f2:	cb 01       	movw	r24, r22
    48f4:	8e 01       	movw	r16, r28
    48f6:	0b 58       	subi	r16, 0x8B	; 139
    48f8:	1f 4f       	sbci	r17, 0xFF	; 255
    48fa:	bc 01       	movw	r22, r24
    48fc:	cd 01       	movw	r24, r26
    48fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4902:	dc 01       	movw	r26, r24
    4904:	cb 01       	movw	r24, r22
    4906:	f8 01       	movw	r30, r16
    4908:	91 83       	std	Z+1, r25	; 0x01
    490a:	80 83       	st	Z, r24
    490c:	1f c0       	rjmp	.+62     	; 0x494c <SevenSegment_From0To9+0x2ba>
    490e:	fe 01       	movw	r30, r28
    4910:	ed 58       	subi	r30, 0x8D	; 141
    4912:	ff 4f       	sbci	r31, 0xFF	; 255
    4914:	80 e9       	ldi	r24, 0x90	; 144
    4916:	91 e0       	ldi	r25, 0x01	; 1
    4918:	91 83       	std	Z+1, r25	; 0x01
    491a:	80 83       	st	Z, r24
    491c:	fe 01       	movw	r30, r28
    491e:	ed 58       	subi	r30, 0x8D	; 141
    4920:	ff 4f       	sbci	r31, 0xFF	; 255
    4922:	80 81       	ld	r24, Z
    4924:	91 81       	ldd	r25, Z+1	; 0x01
    4926:	01 97       	sbiw	r24, 0x01	; 1
    4928:	f1 f7       	brne	.-4      	; 0x4926 <SevenSegment_From0To9+0x294>
    492a:	fe 01       	movw	r30, r28
    492c:	ed 58       	subi	r30, 0x8D	; 141
    492e:	ff 4f       	sbci	r31, 0xFF	; 255
    4930:	91 83       	std	Z+1, r25	; 0x01
    4932:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4934:	de 01       	movw	r26, r28
    4936:	ab 58       	subi	r26, 0x8B	; 139
    4938:	bf 4f       	sbci	r27, 0xFF	; 255
    493a:	fe 01       	movw	r30, r28
    493c:	eb 58       	subi	r30, 0x8B	; 139
    493e:	ff 4f       	sbci	r31, 0xFF	; 255
    4940:	80 81       	ld	r24, Z
    4942:	91 81       	ldd	r25, Z+1	; 0x01
    4944:	01 97       	sbiw	r24, 0x01	; 1
    4946:	11 96       	adiw	r26, 0x01	; 1
    4948:	9c 93       	st	X, r25
    494a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    494c:	fe 01       	movw	r30, r28
    494e:	eb 58       	subi	r30, 0x8B	; 139
    4950:	ff 4f       	sbci	r31, 0xFF	; 255
    4952:	80 81       	ld	r24, Z
    4954:	91 81       	ldd	r25, Z+1	; 0x01
    4956:	00 97       	sbiw	r24, 0x00	; 0
    4958:	d1 f6       	brne	.-76     	; 0x490e <SevenSegment_From0To9+0x27c>
    495a:	27 c0       	rjmp	.+78     	; 0x49aa <SevenSegment_From0To9+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    495c:	8e 01       	movw	r16, r28
    495e:	0b 58       	subi	r16, 0x8B	; 139
    4960:	1f 4f       	sbci	r17, 0xFF	; 255
    4962:	fe 01       	movw	r30, r28
    4964:	e9 58       	subi	r30, 0x89	; 137
    4966:	ff 4f       	sbci	r31, 0xFF	; 255
    4968:	60 81       	ld	r22, Z
    496a:	71 81       	ldd	r23, Z+1	; 0x01
    496c:	82 81       	ldd	r24, Z+2	; 0x02
    496e:	93 81       	ldd	r25, Z+3	; 0x03
    4970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4974:	dc 01       	movw	r26, r24
    4976:	cb 01       	movw	r24, r22
    4978:	f8 01       	movw	r30, r16
    497a:	91 83       	std	Z+1, r25	; 0x01
    497c:	80 83       	st	Z, r24
    497e:	de 01       	movw	r26, r28
    4980:	af 58       	subi	r26, 0x8F	; 143
    4982:	bf 4f       	sbci	r27, 0xFF	; 255
    4984:	fe 01       	movw	r30, r28
    4986:	eb 58       	subi	r30, 0x8B	; 139
    4988:	ff 4f       	sbci	r31, 0xFF	; 255
    498a:	80 81       	ld	r24, Z
    498c:	91 81       	ldd	r25, Z+1	; 0x01
    498e:	8d 93       	st	X+, r24
    4990:	9c 93       	st	X, r25
    4992:	fe 01       	movw	r30, r28
    4994:	ef 58       	subi	r30, 0x8F	; 143
    4996:	ff 4f       	sbci	r31, 0xFF	; 255
    4998:	80 81       	ld	r24, Z
    499a:	91 81       	ldd	r25, Z+1	; 0x01
    499c:	01 97       	sbiw	r24, 0x01	; 1
    499e:	f1 f7       	brne	.-4      	; 0x499c <SevenSegment_From0To9+0x30a>
    49a0:	fe 01       	movw	r30, r28
    49a2:	ef 58       	subi	r30, 0x8F	; 143
    49a4:	ff 4f       	sbci	r31, 0xFF	; 255
    49a6:	91 83       	std	Z+1, r25	; 0x01
    49a8:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(2, 1, 1, 0, 1, 1, 0, 1); // 2
    49aa:	82 e0       	ldi	r24, 0x02	; 2
    49ac:	61 e0       	ldi	r22, 0x01	; 1
    49ae:	41 e0       	ldi	r20, 0x01	; 1
    49b0:	20 e0       	ldi	r18, 0x00	; 0
    49b2:	01 e0       	ldi	r16, 0x01	; 1
    49b4:	ee 24       	eor	r14, r14
    49b6:	e3 94       	inc	r14
    49b8:	cc 24       	eor	r12, r12
    49ba:	aa 24       	eor	r10, r10
    49bc:	a3 94       	inc	r10
    49be:	0e 94 09 21 	call	0x4212	; 0x4212 <SevenSegment_Display>
    49c2:	fe 01       	movw	r30, r28
    49c4:	e3 59       	subi	r30, 0x93	; 147
    49c6:	ff 4f       	sbci	r31, 0xFF	; 255
    49c8:	80 e0       	ldi	r24, 0x00	; 0
    49ca:	90 e0       	ldi	r25, 0x00	; 0
    49cc:	a8 e4       	ldi	r26, 0x48	; 72
    49ce:	b2 e4       	ldi	r27, 0x42	; 66
    49d0:	80 83       	st	Z, r24
    49d2:	91 83       	std	Z+1, r25	; 0x01
    49d4:	a2 83       	std	Z+2, r26	; 0x02
    49d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49d8:	8e 01       	movw	r16, r28
    49da:	07 59       	subi	r16, 0x97	; 151
    49dc:	1f 4f       	sbci	r17, 0xFF	; 255
    49de:	fe 01       	movw	r30, r28
    49e0:	e3 59       	subi	r30, 0x93	; 147
    49e2:	ff 4f       	sbci	r31, 0xFF	; 255
    49e4:	60 81       	ld	r22, Z
    49e6:	71 81       	ldd	r23, Z+1	; 0x01
    49e8:	82 81       	ldd	r24, Z+2	; 0x02
    49ea:	93 81       	ldd	r25, Z+3	; 0x03
    49ec:	20 e0       	ldi	r18, 0x00	; 0
    49ee:	30 e0       	ldi	r19, 0x00	; 0
    49f0:	4a e7       	ldi	r20, 0x7A	; 122
    49f2:	55 e4       	ldi	r21, 0x45	; 69
    49f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49f8:	dc 01       	movw	r26, r24
    49fa:	cb 01       	movw	r24, r22
    49fc:	f8 01       	movw	r30, r16
    49fe:	80 83       	st	Z, r24
    4a00:	91 83       	std	Z+1, r25	; 0x01
    4a02:	a2 83       	std	Z+2, r26	; 0x02
    4a04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a06:	fe 01       	movw	r30, r28
    4a08:	e7 59       	subi	r30, 0x97	; 151
    4a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0c:	60 81       	ld	r22, Z
    4a0e:	71 81       	ldd	r23, Z+1	; 0x01
    4a10:	82 81       	ldd	r24, Z+2	; 0x02
    4a12:	93 81       	ldd	r25, Z+3	; 0x03
    4a14:	20 e0       	ldi	r18, 0x00	; 0
    4a16:	30 e0       	ldi	r19, 0x00	; 0
    4a18:	40 e8       	ldi	r20, 0x80	; 128
    4a1a:	5f e3       	ldi	r21, 0x3F	; 63
    4a1c:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    4a20:	88 23       	and	r24, r24
    4a22:	44 f4       	brge	.+16     	; 0x4a34 <SevenSegment_From0To9+0x3a2>
		__ticks = 1;
    4a24:	fe 01       	movw	r30, r28
    4a26:	e9 59       	subi	r30, 0x99	; 153
    4a28:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2a:	81 e0       	ldi	r24, 0x01	; 1
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	91 83       	std	Z+1, r25	; 0x01
    4a30:	80 83       	st	Z, r24
    4a32:	64 c0       	rjmp	.+200    	; 0x4afc <SevenSegment_From0To9+0x46a>
	else if (__tmp > 65535)
    4a34:	fe 01       	movw	r30, r28
    4a36:	e7 59       	subi	r30, 0x97	; 151
    4a38:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3a:	60 81       	ld	r22, Z
    4a3c:	71 81       	ldd	r23, Z+1	; 0x01
    4a3e:	82 81       	ldd	r24, Z+2	; 0x02
    4a40:	93 81       	ldd	r25, Z+3	; 0x03
    4a42:	20 e0       	ldi	r18, 0x00	; 0
    4a44:	3f ef       	ldi	r19, 0xFF	; 255
    4a46:	4f e7       	ldi	r20, 0x7F	; 127
    4a48:	57 e4       	ldi	r21, 0x47	; 71
    4a4a:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    4a4e:	18 16       	cp	r1, r24
    4a50:	0c f0       	brlt	.+2      	; 0x4a54 <SevenSegment_From0To9+0x3c2>
    4a52:	43 c0       	rjmp	.+134    	; 0x4ada <SevenSegment_From0To9+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a54:	fe 01       	movw	r30, r28
    4a56:	e3 59       	subi	r30, 0x93	; 147
    4a58:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5a:	60 81       	ld	r22, Z
    4a5c:	71 81       	ldd	r23, Z+1	; 0x01
    4a5e:	82 81       	ldd	r24, Z+2	; 0x02
    4a60:	93 81       	ldd	r25, Z+3	; 0x03
    4a62:	20 e0       	ldi	r18, 0x00	; 0
    4a64:	30 e0       	ldi	r19, 0x00	; 0
    4a66:	40 e2       	ldi	r20, 0x20	; 32
    4a68:	51 e4       	ldi	r21, 0x41	; 65
    4a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a6e:	dc 01       	movw	r26, r24
    4a70:	cb 01       	movw	r24, r22
    4a72:	8e 01       	movw	r16, r28
    4a74:	09 59       	subi	r16, 0x99	; 153
    4a76:	1f 4f       	sbci	r17, 0xFF	; 255
    4a78:	bc 01       	movw	r22, r24
    4a7a:	cd 01       	movw	r24, r26
    4a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a80:	dc 01       	movw	r26, r24
    4a82:	cb 01       	movw	r24, r22
    4a84:	f8 01       	movw	r30, r16
    4a86:	91 83       	std	Z+1, r25	; 0x01
    4a88:	80 83       	st	Z, r24
    4a8a:	1f c0       	rjmp	.+62     	; 0x4aca <SevenSegment_From0To9+0x438>
    4a8c:	fe 01       	movw	r30, r28
    4a8e:	eb 59       	subi	r30, 0x9B	; 155
    4a90:	ff 4f       	sbci	r31, 0xFF	; 255
    4a92:	80 e9       	ldi	r24, 0x90	; 144
    4a94:	91 e0       	ldi	r25, 0x01	; 1
    4a96:	91 83       	std	Z+1, r25	; 0x01
    4a98:	80 83       	st	Z, r24
    4a9a:	fe 01       	movw	r30, r28
    4a9c:	eb 59       	subi	r30, 0x9B	; 155
    4a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa0:	80 81       	ld	r24, Z
    4aa2:	91 81       	ldd	r25, Z+1	; 0x01
    4aa4:	01 97       	sbiw	r24, 0x01	; 1
    4aa6:	f1 f7       	brne	.-4      	; 0x4aa4 <SevenSegment_From0To9+0x412>
    4aa8:	fe 01       	movw	r30, r28
    4aaa:	eb 59       	subi	r30, 0x9B	; 155
    4aac:	ff 4f       	sbci	r31, 0xFF	; 255
    4aae:	91 83       	std	Z+1, r25	; 0x01
    4ab0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ab2:	de 01       	movw	r26, r28
    4ab4:	a9 59       	subi	r26, 0x99	; 153
    4ab6:	bf 4f       	sbci	r27, 0xFF	; 255
    4ab8:	fe 01       	movw	r30, r28
    4aba:	e9 59       	subi	r30, 0x99	; 153
    4abc:	ff 4f       	sbci	r31, 0xFF	; 255
    4abe:	80 81       	ld	r24, Z
    4ac0:	91 81       	ldd	r25, Z+1	; 0x01
    4ac2:	01 97       	sbiw	r24, 0x01	; 1
    4ac4:	11 96       	adiw	r26, 0x01	; 1
    4ac6:	9c 93       	st	X, r25
    4ac8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aca:	fe 01       	movw	r30, r28
    4acc:	e9 59       	subi	r30, 0x99	; 153
    4ace:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad0:	80 81       	ld	r24, Z
    4ad2:	91 81       	ldd	r25, Z+1	; 0x01
    4ad4:	00 97       	sbiw	r24, 0x00	; 0
    4ad6:	d1 f6       	brne	.-76     	; 0x4a8c <SevenSegment_From0To9+0x3fa>
    4ad8:	27 c0       	rjmp	.+78     	; 0x4b28 <SevenSegment_From0To9+0x496>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ada:	8e 01       	movw	r16, r28
    4adc:	09 59       	subi	r16, 0x99	; 153
    4ade:	1f 4f       	sbci	r17, 0xFF	; 255
    4ae0:	fe 01       	movw	r30, r28
    4ae2:	e7 59       	subi	r30, 0x97	; 151
    4ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae6:	60 81       	ld	r22, Z
    4ae8:	71 81       	ldd	r23, Z+1	; 0x01
    4aea:	82 81       	ldd	r24, Z+2	; 0x02
    4aec:	93 81       	ldd	r25, Z+3	; 0x03
    4aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4af2:	dc 01       	movw	r26, r24
    4af4:	cb 01       	movw	r24, r22
    4af6:	f8 01       	movw	r30, r16
    4af8:	91 83       	std	Z+1, r25	; 0x01
    4afa:	80 83       	st	Z, r24
    4afc:	de 01       	movw	r26, r28
    4afe:	ad 59       	subi	r26, 0x9D	; 157
    4b00:	bf 4f       	sbci	r27, 0xFF	; 255
    4b02:	fe 01       	movw	r30, r28
    4b04:	e9 59       	subi	r30, 0x99	; 153
    4b06:	ff 4f       	sbci	r31, 0xFF	; 255
    4b08:	80 81       	ld	r24, Z
    4b0a:	91 81       	ldd	r25, Z+1	; 0x01
    4b0c:	8d 93       	st	X+, r24
    4b0e:	9c 93       	st	X, r25
    4b10:	fe 01       	movw	r30, r28
    4b12:	ed 59       	subi	r30, 0x9D	; 157
    4b14:	ff 4f       	sbci	r31, 0xFF	; 255
    4b16:	80 81       	ld	r24, Z
    4b18:	91 81       	ldd	r25, Z+1	; 0x01
    4b1a:	01 97       	sbiw	r24, 0x01	; 1
    4b1c:	f1 f7       	brne	.-4      	; 0x4b1a <SevenSegment_From0To9+0x488>
    4b1e:	fe 01       	movw	r30, r28
    4b20:	ed 59       	subi	r30, 0x9D	; 157
    4b22:	ff 4f       	sbci	r31, 0xFF	; 255
    4b24:	91 83       	std	Z+1, r25	; 0x01
    4b26:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(2, 1, 1, 1, 1, 0, 0, 1); // 3
    4b28:	82 e0       	ldi	r24, 0x02	; 2
    4b2a:	61 e0       	ldi	r22, 0x01	; 1
    4b2c:	41 e0       	ldi	r20, 0x01	; 1
    4b2e:	21 e0       	ldi	r18, 0x01	; 1
    4b30:	01 e0       	ldi	r16, 0x01	; 1
    4b32:	ee 24       	eor	r14, r14
    4b34:	cc 24       	eor	r12, r12
    4b36:	aa 24       	eor	r10, r10
    4b38:	a3 94       	inc	r10
    4b3a:	0e 94 09 21 	call	0x4212	; 0x4212 <SevenSegment_Display>
    4b3e:	fe 01       	movw	r30, r28
    4b40:	e1 5a       	subi	r30, 0xA1	; 161
    4b42:	ff 4f       	sbci	r31, 0xFF	; 255
    4b44:	80 e0       	ldi	r24, 0x00	; 0
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	a8 e4       	ldi	r26, 0x48	; 72
    4b4a:	b2 e4       	ldi	r27, 0x42	; 66
    4b4c:	80 83       	st	Z, r24
    4b4e:	91 83       	std	Z+1, r25	; 0x01
    4b50:	a2 83       	std	Z+2, r26	; 0x02
    4b52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b54:	8e 01       	movw	r16, r28
    4b56:	05 5a       	subi	r16, 0xA5	; 165
    4b58:	1f 4f       	sbci	r17, 0xFF	; 255
    4b5a:	fe 01       	movw	r30, r28
    4b5c:	e1 5a       	subi	r30, 0xA1	; 161
    4b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b60:	60 81       	ld	r22, Z
    4b62:	71 81       	ldd	r23, Z+1	; 0x01
    4b64:	82 81       	ldd	r24, Z+2	; 0x02
    4b66:	93 81       	ldd	r25, Z+3	; 0x03
    4b68:	20 e0       	ldi	r18, 0x00	; 0
    4b6a:	30 e0       	ldi	r19, 0x00	; 0
    4b6c:	4a e7       	ldi	r20, 0x7A	; 122
    4b6e:	55 e4       	ldi	r21, 0x45	; 69
    4b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b74:	dc 01       	movw	r26, r24
    4b76:	cb 01       	movw	r24, r22
    4b78:	f8 01       	movw	r30, r16
    4b7a:	80 83       	st	Z, r24
    4b7c:	91 83       	std	Z+1, r25	; 0x01
    4b7e:	a2 83       	std	Z+2, r26	; 0x02
    4b80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b82:	fe 01       	movw	r30, r28
    4b84:	e5 5a       	subi	r30, 0xA5	; 165
    4b86:	ff 4f       	sbci	r31, 0xFF	; 255
    4b88:	60 81       	ld	r22, Z
    4b8a:	71 81       	ldd	r23, Z+1	; 0x01
    4b8c:	82 81       	ldd	r24, Z+2	; 0x02
    4b8e:	93 81       	ldd	r25, Z+3	; 0x03
    4b90:	20 e0       	ldi	r18, 0x00	; 0
    4b92:	30 e0       	ldi	r19, 0x00	; 0
    4b94:	40 e8       	ldi	r20, 0x80	; 128
    4b96:	5f e3       	ldi	r21, 0x3F	; 63
    4b98:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    4b9c:	88 23       	and	r24, r24
    4b9e:	44 f4       	brge	.+16     	; 0x4bb0 <SevenSegment_From0To9+0x51e>
		__ticks = 1;
    4ba0:	fe 01       	movw	r30, r28
    4ba2:	e7 5a       	subi	r30, 0xA7	; 167
    4ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba6:	81 e0       	ldi	r24, 0x01	; 1
    4ba8:	90 e0       	ldi	r25, 0x00	; 0
    4baa:	91 83       	std	Z+1, r25	; 0x01
    4bac:	80 83       	st	Z, r24
    4bae:	64 c0       	rjmp	.+200    	; 0x4c78 <SevenSegment_From0To9+0x5e6>
	else if (__tmp > 65535)
    4bb0:	fe 01       	movw	r30, r28
    4bb2:	e5 5a       	subi	r30, 0xA5	; 165
    4bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb6:	60 81       	ld	r22, Z
    4bb8:	71 81       	ldd	r23, Z+1	; 0x01
    4bba:	82 81       	ldd	r24, Z+2	; 0x02
    4bbc:	93 81       	ldd	r25, Z+3	; 0x03
    4bbe:	20 e0       	ldi	r18, 0x00	; 0
    4bc0:	3f ef       	ldi	r19, 0xFF	; 255
    4bc2:	4f e7       	ldi	r20, 0x7F	; 127
    4bc4:	57 e4       	ldi	r21, 0x47	; 71
    4bc6:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    4bca:	18 16       	cp	r1, r24
    4bcc:	0c f0       	brlt	.+2      	; 0x4bd0 <SevenSegment_From0To9+0x53e>
    4bce:	43 c0       	rjmp	.+134    	; 0x4c56 <SevenSegment_From0To9+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bd0:	fe 01       	movw	r30, r28
    4bd2:	e1 5a       	subi	r30, 0xA1	; 161
    4bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd6:	60 81       	ld	r22, Z
    4bd8:	71 81       	ldd	r23, Z+1	; 0x01
    4bda:	82 81       	ldd	r24, Z+2	; 0x02
    4bdc:	93 81       	ldd	r25, Z+3	; 0x03
    4bde:	20 e0       	ldi	r18, 0x00	; 0
    4be0:	30 e0       	ldi	r19, 0x00	; 0
    4be2:	40 e2       	ldi	r20, 0x20	; 32
    4be4:	51 e4       	ldi	r21, 0x41	; 65
    4be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bea:	dc 01       	movw	r26, r24
    4bec:	cb 01       	movw	r24, r22
    4bee:	8e 01       	movw	r16, r28
    4bf0:	07 5a       	subi	r16, 0xA7	; 167
    4bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    4bf4:	bc 01       	movw	r22, r24
    4bf6:	cd 01       	movw	r24, r26
    4bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bfc:	dc 01       	movw	r26, r24
    4bfe:	cb 01       	movw	r24, r22
    4c00:	f8 01       	movw	r30, r16
    4c02:	91 83       	std	Z+1, r25	; 0x01
    4c04:	80 83       	st	Z, r24
    4c06:	1f c0       	rjmp	.+62     	; 0x4c46 <SevenSegment_From0To9+0x5b4>
    4c08:	fe 01       	movw	r30, r28
    4c0a:	e9 5a       	subi	r30, 0xA9	; 169
    4c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0e:	80 e9       	ldi	r24, 0x90	; 144
    4c10:	91 e0       	ldi	r25, 0x01	; 1
    4c12:	91 83       	std	Z+1, r25	; 0x01
    4c14:	80 83       	st	Z, r24
    4c16:	fe 01       	movw	r30, r28
    4c18:	e9 5a       	subi	r30, 0xA9	; 169
    4c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1c:	80 81       	ld	r24, Z
    4c1e:	91 81       	ldd	r25, Z+1	; 0x01
    4c20:	01 97       	sbiw	r24, 0x01	; 1
    4c22:	f1 f7       	brne	.-4      	; 0x4c20 <SevenSegment_From0To9+0x58e>
    4c24:	fe 01       	movw	r30, r28
    4c26:	e9 5a       	subi	r30, 0xA9	; 169
    4c28:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2a:	91 83       	std	Z+1, r25	; 0x01
    4c2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c2e:	de 01       	movw	r26, r28
    4c30:	a7 5a       	subi	r26, 0xA7	; 167
    4c32:	bf 4f       	sbci	r27, 0xFF	; 255
    4c34:	fe 01       	movw	r30, r28
    4c36:	e7 5a       	subi	r30, 0xA7	; 167
    4c38:	ff 4f       	sbci	r31, 0xFF	; 255
    4c3a:	80 81       	ld	r24, Z
    4c3c:	91 81       	ldd	r25, Z+1	; 0x01
    4c3e:	01 97       	sbiw	r24, 0x01	; 1
    4c40:	11 96       	adiw	r26, 0x01	; 1
    4c42:	9c 93       	st	X, r25
    4c44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c46:	fe 01       	movw	r30, r28
    4c48:	e7 5a       	subi	r30, 0xA7	; 167
    4c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4c:	80 81       	ld	r24, Z
    4c4e:	91 81       	ldd	r25, Z+1	; 0x01
    4c50:	00 97       	sbiw	r24, 0x00	; 0
    4c52:	d1 f6       	brne	.-76     	; 0x4c08 <SevenSegment_From0To9+0x576>
    4c54:	27 c0       	rjmp	.+78     	; 0x4ca4 <SevenSegment_From0To9+0x612>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c56:	8e 01       	movw	r16, r28
    4c58:	07 5a       	subi	r16, 0xA7	; 167
    4c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c5c:	fe 01       	movw	r30, r28
    4c5e:	e5 5a       	subi	r30, 0xA5	; 165
    4c60:	ff 4f       	sbci	r31, 0xFF	; 255
    4c62:	60 81       	ld	r22, Z
    4c64:	71 81       	ldd	r23, Z+1	; 0x01
    4c66:	82 81       	ldd	r24, Z+2	; 0x02
    4c68:	93 81       	ldd	r25, Z+3	; 0x03
    4c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c6e:	dc 01       	movw	r26, r24
    4c70:	cb 01       	movw	r24, r22
    4c72:	f8 01       	movw	r30, r16
    4c74:	91 83       	std	Z+1, r25	; 0x01
    4c76:	80 83       	st	Z, r24
    4c78:	de 01       	movw	r26, r28
    4c7a:	ab 5a       	subi	r26, 0xAB	; 171
    4c7c:	bf 4f       	sbci	r27, 0xFF	; 255
    4c7e:	fe 01       	movw	r30, r28
    4c80:	e7 5a       	subi	r30, 0xA7	; 167
    4c82:	ff 4f       	sbci	r31, 0xFF	; 255
    4c84:	80 81       	ld	r24, Z
    4c86:	91 81       	ldd	r25, Z+1	; 0x01
    4c88:	8d 93       	st	X+, r24
    4c8a:	9c 93       	st	X, r25
    4c8c:	fe 01       	movw	r30, r28
    4c8e:	eb 5a       	subi	r30, 0xAB	; 171
    4c90:	ff 4f       	sbci	r31, 0xFF	; 255
    4c92:	80 81       	ld	r24, Z
    4c94:	91 81       	ldd	r25, Z+1	; 0x01
    4c96:	01 97       	sbiw	r24, 0x01	; 1
    4c98:	f1 f7       	brne	.-4      	; 0x4c96 <SevenSegment_From0To9+0x604>
    4c9a:	fe 01       	movw	r30, r28
    4c9c:	eb 5a       	subi	r30, 0xAB	; 171
    4c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca0:	91 83       	std	Z+1, r25	; 0x01
    4ca2:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(2, 0, 1, 1, 0, 0, 1, 1); // 4
    4ca4:	82 e0       	ldi	r24, 0x02	; 2
    4ca6:	60 e0       	ldi	r22, 0x00	; 0
    4ca8:	41 e0       	ldi	r20, 0x01	; 1
    4caa:	21 e0       	ldi	r18, 0x01	; 1
    4cac:	00 e0       	ldi	r16, 0x00	; 0
    4cae:	ee 24       	eor	r14, r14
    4cb0:	cc 24       	eor	r12, r12
    4cb2:	c3 94       	inc	r12
    4cb4:	aa 24       	eor	r10, r10
    4cb6:	a3 94       	inc	r10
    4cb8:	0e 94 09 21 	call	0x4212	; 0x4212 <SevenSegment_Display>
    4cbc:	fe 01       	movw	r30, r28
    4cbe:	ef 5a       	subi	r30, 0xAF	; 175
    4cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc2:	80 e0       	ldi	r24, 0x00	; 0
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
    4cc6:	a8 e4       	ldi	r26, 0x48	; 72
    4cc8:	b2 e4       	ldi	r27, 0x42	; 66
    4cca:	80 83       	st	Z, r24
    4ccc:	91 83       	std	Z+1, r25	; 0x01
    4cce:	a2 83       	std	Z+2, r26	; 0x02
    4cd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cd2:	8e 01       	movw	r16, r28
    4cd4:	03 5b       	subi	r16, 0xB3	; 179
    4cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    4cd8:	fe 01       	movw	r30, r28
    4cda:	ef 5a       	subi	r30, 0xAF	; 175
    4cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cde:	60 81       	ld	r22, Z
    4ce0:	71 81       	ldd	r23, Z+1	; 0x01
    4ce2:	82 81       	ldd	r24, Z+2	; 0x02
    4ce4:	93 81       	ldd	r25, Z+3	; 0x03
    4ce6:	20 e0       	ldi	r18, 0x00	; 0
    4ce8:	30 e0       	ldi	r19, 0x00	; 0
    4cea:	4a e7       	ldi	r20, 0x7A	; 122
    4cec:	55 e4       	ldi	r21, 0x45	; 69
    4cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cf2:	dc 01       	movw	r26, r24
    4cf4:	cb 01       	movw	r24, r22
    4cf6:	f8 01       	movw	r30, r16
    4cf8:	80 83       	st	Z, r24
    4cfa:	91 83       	std	Z+1, r25	; 0x01
    4cfc:	a2 83       	std	Z+2, r26	; 0x02
    4cfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d00:	fe 01       	movw	r30, r28
    4d02:	e3 5b       	subi	r30, 0xB3	; 179
    4d04:	ff 4f       	sbci	r31, 0xFF	; 255
    4d06:	60 81       	ld	r22, Z
    4d08:	71 81       	ldd	r23, Z+1	; 0x01
    4d0a:	82 81       	ldd	r24, Z+2	; 0x02
    4d0c:	93 81       	ldd	r25, Z+3	; 0x03
    4d0e:	20 e0       	ldi	r18, 0x00	; 0
    4d10:	30 e0       	ldi	r19, 0x00	; 0
    4d12:	40 e8       	ldi	r20, 0x80	; 128
    4d14:	5f e3       	ldi	r21, 0x3F	; 63
    4d16:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    4d1a:	88 23       	and	r24, r24
    4d1c:	44 f4       	brge	.+16     	; 0x4d2e <SevenSegment_From0To9+0x69c>
		__ticks = 1;
    4d1e:	fe 01       	movw	r30, r28
    4d20:	e5 5b       	subi	r30, 0xB5	; 181
    4d22:	ff 4f       	sbci	r31, 0xFF	; 255
    4d24:	81 e0       	ldi	r24, 0x01	; 1
    4d26:	90 e0       	ldi	r25, 0x00	; 0
    4d28:	91 83       	std	Z+1, r25	; 0x01
    4d2a:	80 83       	st	Z, r24
    4d2c:	64 c0       	rjmp	.+200    	; 0x4df6 <SevenSegment_From0To9+0x764>
	else if (__tmp > 65535)
    4d2e:	fe 01       	movw	r30, r28
    4d30:	e3 5b       	subi	r30, 0xB3	; 179
    4d32:	ff 4f       	sbci	r31, 0xFF	; 255
    4d34:	60 81       	ld	r22, Z
    4d36:	71 81       	ldd	r23, Z+1	; 0x01
    4d38:	82 81       	ldd	r24, Z+2	; 0x02
    4d3a:	93 81       	ldd	r25, Z+3	; 0x03
    4d3c:	20 e0       	ldi	r18, 0x00	; 0
    4d3e:	3f ef       	ldi	r19, 0xFF	; 255
    4d40:	4f e7       	ldi	r20, 0x7F	; 127
    4d42:	57 e4       	ldi	r21, 0x47	; 71
    4d44:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    4d48:	18 16       	cp	r1, r24
    4d4a:	0c f0       	brlt	.+2      	; 0x4d4e <SevenSegment_From0To9+0x6bc>
    4d4c:	43 c0       	rjmp	.+134    	; 0x4dd4 <SevenSegment_From0To9+0x742>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d4e:	fe 01       	movw	r30, r28
    4d50:	ef 5a       	subi	r30, 0xAF	; 175
    4d52:	ff 4f       	sbci	r31, 0xFF	; 255
    4d54:	60 81       	ld	r22, Z
    4d56:	71 81       	ldd	r23, Z+1	; 0x01
    4d58:	82 81       	ldd	r24, Z+2	; 0x02
    4d5a:	93 81       	ldd	r25, Z+3	; 0x03
    4d5c:	20 e0       	ldi	r18, 0x00	; 0
    4d5e:	30 e0       	ldi	r19, 0x00	; 0
    4d60:	40 e2       	ldi	r20, 0x20	; 32
    4d62:	51 e4       	ldi	r21, 0x41	; 65
    4d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d68:	dc 01       	movw	r26, r24
    4d6a:	cb 01       	movw	r24, r22
    4d6c:	8e 01       	movw	r16, r28
    4d6e:	05 5b       	subi	r16, 0xB5	; 181
    4d70:	1f 4f       	sbci	r17, 0xFF	; 255
    4d72:	bc 01       	movw	r22, r24
    4d74:	cd 01       	movw	r24, r26
    4d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d7a:	dc 01       	movw	r26, r24
    4d7c:	cb 01       	movw	r24, r22
    4d7e:	f8 01       	movw	r30, r16
    4d80:	91 83       	std	Z+1, r25	; 0x01
    4d82:	80 83       	st	Z, r24
    4d84:	1f c0       	rjmp	.+62     	; 0x4dc4 <SevenSegment_From0To9+0x732>
    4d86:	fe 01       	movw	r30, r28
    4d88:	e7 5b       	subi	r30, 0xB7	; 183
    4d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8c:	80 e9       	ldi	r24, 0x90	; 144
    4d8e:	91 e0       	ldi	r25, 0x01	; 1
    4d90:	91 83       	std	Z+1, r25	; 0x01
    4d92:	80 83       	st	Z, r24
    4d94:	fe 01       	movw	r30, r28
    4d96:	e7 5b       	subi	r30, 0xB7	; 183
    4d98:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9a:	80 81       	ld	r24, Z
    4d9c:	91 81       	ldd	r25, Z+1	; 0x01
    4d9e:	01 97       	sbiw	r24, 0x01	; 1
    4da0:	f1 f7       	brne	.-4      	; 0x4d9e <SevenSegment_From0To9+0x70c>
    4da2:	fe 01       	movw	r30, r28
    4da4:	e7 5b       	subi	r30, 0xB7	; 183
    4da6:	ff 4f       	sbci	r31, 0xFF	; 255
    4da8:	91 83       	std	Z+1, r25	; 0x01
    4daa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dac:	de 01       	movw	r26, r28
    4dae:	a5 5b       	subi	r26, 0xB5	; 181
    4db0:	bf 4f       	sbci	r27, 0xFF	; 255
    4db2:	fe 01       	movw	r30, r28
    4db4:	e5 5b       	subi	r30, 0xB5	; 181
    4db6:	ff 4f       	sbci	r31, 0xFF	; 255
    4db8:	80 81       	ld	r24, Z
    4dba:	91 81       	ldd	r25, Z+1	; 0x01
    4dbc:	01 97       	sbiw	r24, 0x01	; 1
    4dbe:	11 96       	adiw	r26, 0x01	; 1
    4dc0:	9c 93       	st	X, r25
    4dc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dc4:	fe 01       	movw	r30, r28
    4dc6:	e5 5b       	subi	r30, 0xB5	; 181
    4dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dca:	80 81       	ld	r24, Z
    4dcc:	91 81       	ldd	r25, Z+1	; 0x01
    4dce:	00 97       	sbiw	r24, 0x00	; 0
    4dd0:	d1 f6       	brne	.-76     	; 0x4d86 <SevenSegment_From0To9+0x6f4>
    4dd2:	27 c0       	rjmp	.+78     	; 0x4e22 <SevenSegment_From0To9+0x790>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dd4:	8e 01       	movw	r16, r28
    4dd6:	05 5b       	subi	r16, 0xB5	; 181
    4dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    4dda:	fe 01       	movw	r30, r28
    4ddc:	e3 5b       	subi	r30, 0xB3	; 179
    4dde:	ff 4f       	sbci	r31, 0xFF	; 255
    4de0:	60 81       	ld	r22, Z
    4de2:	71 81       	ldd	r23, Z+1	; 0x01
    4de4:	82 81       	ldd	r24, Z+2	; 0x02
    4de6:	93 81       	ldd	r25, Z+3	; 0x03
    4de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dec:	dc 01       	movw	r26, r24
    4dee:	cb 01       	movw	r24, r22
    4df0:	f8 01       	movw	r30, r16
    4df2:	91 83       	std	Z+1, r25	; 0x01
    4df4:	80 83       	st	Z, r24
    4df6:	de 01       	movw	r26, r28
    4df8:	a9 5b       	subi	r26, 0xB9	; 185
    4dfa:	bf 4f       	sbci	r27, 0xFF	; 255
    4dfc:	fe 01       	movw	r30, r28
    4dfe:	e5 5b       	subi	r30, 0xB5	; 181
    4e00:	ff 4f       	sbci	r31, 0xFF	; 255
    4e02:	80 81       	ld	r24, Z
    4e04:	91 81       	ldd	r25, Z+1	; 0x01
    4e06:	8d 93       	st	X+, r24
    4e08:	9c 93       	st	X, r25
    4e0a:	fe 01       	movw	r30, r28
    4e0c:	e9 5b       	subi	r30, 0xB9	; 185
    4e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e10:	80 81       	ld	r24, Z
    4e12:	91 81       	ldd	r25, Z+1	; 0x01
    4e14:	01 97       	sbiw	r24, 0x01	; 1
    4e16:	f1 f7       	brne	.-4      	; 0x4e14 <SevenSegment_From0To9+0x782>
    4e18:	fe 01       	movw	r30, r28
    4e1a:	e9 5b       	subi	r30, 0xB9	; 185
    4e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1e:	91 83       	std	Z+1, r25	; 0x01
    4e20:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(2, 1, 0, 1, 1, 0, 1, 1); // 5
    4e22:	82 e0       	ldi	r24, 0x02	; 2
    4e24:	61 e0       	ldi	r22, 0x01	; 1
    4e26:	40 e0       	ldi	r20, 0x00	; 0
    4e28:	21 e0       	ldi	r18, 0x01	; 1
    4e2a:	01 e0       	ldi	r16, 0x01	; 1
    4e2c:	ee 24       	eor	r14, r14
    4e2e:	cc 24       	eor	r12, r12
    4e30:	c3 94       	inc	r12
    4e32:	aa 24       	eor	r10, r10
    4e34:	a3 94       	inc	r10
    4e36:	0e 94 09 21 	call	0x4212	; 0x4212 <SevenSegment_Display>
    4e3a:	fe 01       	movw	r30, r28
    4e3c:	ed 5b       	subi	r30, 0xBD	; 189
    4e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e40:	80 e0       	ldi	r24, 0x00	; 0
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	a8 e4       	ldi	r26, 0x48	; 72
    4e46:	b2 e4       	ldi	r27, 0x42	; 66
    4e48:	80 83       	st	Z, r24
    4e4a:	91 83       	std	Z+1, r25	; 0x01
    4e4c:	a2 83       	std	Z+2, r26	; 0x02
    4e4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e50:	8e 01       	movw	r16, r28
    4e52:	01 5c       	subi	r16, 0xC1	; 193
    4e54:	1f 4f       	sbci	r17, 0xFF	; 255
    4e56:	fe 01       	movw	r30, r28
    4e58:	ed 5b       	subi	r30, 0xBD	; 189
    4e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5c:	60 81       	ld	r22, Z
    4e5e:	71 81       	ldd	r23, Z+1	; 0x01
    4e60:	82 81       	ldd	r24, Z+2	; 0x02
    4e62:	93 81       	ldd	r25, Z+3	; 0x03
    4e64:	20 e0       	ldi	r18, 0x00	; 0
    4e66:	30 e0       	ldi	r19, 0x00	; 0
    4e68:	4a e7       	ldi	r20, 0x7A	; 122
    4e6a:	55 e4       	ldi	r21, 0x45	; 69
    4e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e70:	dc 01       	movw	r26, r24
    4e72:	cb 01       	movw	r24, r22
    4e74:	f8 01       	movw	r30, r16
    4e76:	80 83       	st	Z, r24
    4e78:	91 83       	std	Z+1, r25	; 0x01
    4e7a:	a2 83       	std	Z+2, r26	; 0x02
    4e7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e7e:	fe 01       	movw	r30, r28
    4e80:	ff 96       	adiw	r30, 0x3f	; 63
    4e82:	60 81       	ld	r22, Z
    4e84:	71 81       	ldd	r23, Z+1	; 0x01
    4e86:	82 81       	ldd	r24, Z+2	; 0x02
    4e88:	93 81       	ldd	r25, Z+3	; 0x03
    4e8a:	20 e0       	ldi	r18, 0x00	; 0
    4e8c:	30 e0       	ldi	r19, 0x00	; 0
    4e8e:	40 e8       	ldi	r20, 0x80	; 128
    4e90:	5f e3       	ldi	r21, 0x3F	; 63
    4e92:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    4e96:	88 23       	and	r24, r24
    4e98:	2c f4       	brge	.+10     	; 0x4ea4 <SevenSegment_From0To9+0x812>
		__ticks = 1;
    4e9a:	81 e0       	ldi	r24, 0x01	; 1
    4e9c:	90 e0       	ldi	r25, 0x00	; 0
    4e9e:	9e af       	std	Y+62, r25	; 0x3e
    4ea0:	8d af       	std	Y+61, r24	; 0x3d
    4ea2:	46 c0       	rjmp	.+140    	; 0x4f30 <SevenSegment_From0To9+0x89e>
	else if (__tmp > 65535)
    4ea4:	fe 01       	movw	r30, r28
    4ea6:	ff 96       	adiw	r30, 0x3f	; 63
    4ea8:	60 81       	ld	r22, Z
    4eaa:	71 81       	ldd	r23, Z+1	; 0x01
    4eac:	82 81       	ldd	r24, Z+2	; 0x02
    4eae:	93 81       	ldd	r25, Z+3	; 0x03
    4eb0:	20 e0       	ldi	r18, 0x00	; 0
    4eb2:	3f ef       	ldi	r19, 0xFF	; 255
    4eb4:	4f e7       	ldi	r20, 0x7F	; 127
    4eb6:	57 e4       	ldi	r21, 0x47	; 71
    4eb8:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    4ebc:	18 16       	cp	r1, r24
    4ebe:	64 f5       	brge	.+88     	; 0x4f18 <SevenSegment_From0To9+0x886>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ec0:	fe 01       	movw	r30, r28
    4ec2:	ed 5b       	subi	r30, 0xBD	; 189
    4ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec6:	60 81       	ld	r22, Z
    4ec8:	71 81       	ldd	r23, Z+1	; 0x01
    4eca:	82 81       	ldd	r24, Z+2	; 0x02
    4ecc:	93 81       	ldd	r25, Z+3	; 0x03
    4ece:	20 e0       	ldi	r18, 0x00	; 0
    4ed0:	30 e0       	ldi	r19, 0x00	; 0
    4ed2:	40 e2       	ldi	r20, 0x20	; 32
    4ed4:	51 e4       	ldi	r21, 0x41	; 65
    4ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eda:	dc 01       	movw	r26, r24
    4edc:	cb 01       	movw	r24, r22
    4ede:	bc 01       	movw	r22, r24
    4ee0:	cd 01       	movw	r24, r26
    4ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ee6:	dc 01       	movw	r26, r24
    4ee8:	cb 01       	movw	r24, r22
    4eea:	9e af       	std	Y+62, r25	; 0x3e
    4eec:	8d af       	std	Y+61, r24	; 0x3d
    4eee:	0f c0       	rjmp	.+30     	; 0x4f0e <SevenSegment_From0To9+0x87c>
    4ef0:	80 e9       	ldi	r24, 0x90	; 144
    4ef2:	91 e0       	ldi	r25, 0x01	; 1
    4ef4:	9c af       	std	Y+60, r25	; 0x3c
    4ef6:	8b af       	std	Y+59, r24	; 0x3b
    4ef8:	8b ad       	ldd	r24, Y+59	; 0x3b
    4efa:	9c ad       	ldd	r25, Y+60	; 0x3c
    4efc:	01 97       	sbiw	r24, 0x01	; 1
    4efe:	f1 f7       	brne	.-4      	; 0x4efc <SevenSegment_From0To9+0x86a>
    4f00:	9c af       	std	Y+60, r25	; 0x3c
    4f02:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f04:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f06:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f08:	01 97       	sbiw	r24, 0x01	; 1
    4f0a:	9e af       	std	Y+62, r25	; 0x3e
    4f0c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f10:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f12:	00 97       	sbiw	r24, 0x00	; 0
    4f14:	69 f7       	brne	.-38     	; 0x4ef0 <SevenSegment_From0To9+0x85e>
    4f16:	16 c0       	rjmp	.+44     	; 0x4f44 <SevenSegment_From0To9+0x8b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f18:	fe 01       	movw	r30, r28
    4f1a:	ff 96       	adiw	r30, 0x3f	; 63
    4f1c:	60 81       	ld	r22, Z
    4f1e:	71 81       	ldd	r23, Z+1	; 0x01
    4f20:	82 81       	ldd	r24, Z+2	; 0x02
    4f22:	93 81       	ldd	r25, Z+3	; 0x03
    4f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f28:	dc 01       	movw	r26, r24
    4f2a:	cb 01       	movw	r24, r22
    4f2c:	9e af       	std	Y+62, r25	; 0x3e
    4f2e:	8d af       	std	Y+61, r24	; 0x3d
    4f30:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f32:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f34:	9a af       	std	Y+58, r25	; 0x3a
    4f36:	89 af       	std	Y+57, r24	; 0x39
    4f38:	89 ad       	ldd	r24, Y+57	; 0x39
    4f3a:	9a ad       	ldd	r25, Y+58	; 0x3a
    4f3c:	01 97       	sbiw	r24, 0x01	; 1
    4f3e:	f1 f7       	brne	.-4      	; 0x4f3c <SevenSegment_From0To9+0x8aa>
    4f40:	9a af       	std	Y+58, r25	; 0x3a
    4f42:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);
		SevenSegment_Display(2, 1, 0, 1, 1, 1, 1, 1); // 6
    4f44:	82 e0       	ldi	r24, 0x02	; 2
    4f46:	61 e0       	ldi	r22, 0x01	; 1
    4f48:	40 e0       	ldi	r20, 0x00	; 0
    4f4a:	21 e0       	ldi	r18, 0x01	; 1
    4f4c:	01 e0       	ldi	r16, 0x01	; 1
    4f4e:	ee 24       	eor	r14, r14
    4f50:	e3 94       	inc	r14
    4f52:	cc 24       	eor	r12, r12
    4f54:	c3 94       	inc	r12
    4f56:	aa 24       	eor	r10, r10
    4f58:	a3 94       	inc	r10
    4f5a:	0e 94 09 21 	call	0x4212	; 0x4212 <SevenSegment_Display>
    4f5e:	80 e0       	ldi	r24, 0x00	; 0
    4f60:	90 e0       	ldi	r25, 0x00	; 0
    4f62:	a8 e4       	ldi	r26, 0x48	; 72
    4f64:	b2 e4       	ldi	r27, 0x42	; 66
    4f66:	8d ab       	std	Y+53, r24	; 0x35
    4f68:	9e ab       	std	Y+54, r25	; 0x36
    4f6a:	af ab       	std	Y+55, r26	; 0x37
    4f6c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f6e:	6d a9       	ldd	r22, Y+53	; 0x35
    4f70:	7e a9       	ldd	r23, Y+54	; 0x36
    4f72:	8f a9       	ldd	r24, Y+55	; 0x37
    4f74:	98 ad       	ldd	r25, Y+56	; 0x38
    4f76:	20 e0       	ldi	r18, 0x00	; 0
    4f78:	30 e0       	ldi	r19, 0x00	; 0
    4f7a:	4a e7       	ldi	r20, 0x7A	; 122
    4f7c:	55 e4       	ldi	r21, 0x45	; 69
    4f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f82:	dc 01       	movw	r26, r24
    4f84:	cb 01       	movw	r24, r22
    4f86:	89 ab       	std	Y+49, r24	; 0x31
    4f88:	9a ab       	std	Y+50, r25	; 0x32
    4f8a:	ab ab       	std	Y+51, r26	; 0x33
    4f8c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4f8e:	69 a9       	ldd	r22, Y+49	; 0x31
    4f90:	7a a9       	ldd	r23, Y+50	; 0x32
    4f92:	8b a9       	ldd	r24, Y+51	; 0x33
    4f94:	9c a9       	ldd	r25, Y+52	; 0x34
    4f96:	20 e0       	ldi	r18, 0x00	; 0
    4f98:	30 e0       	ldi	r19, 0x00	; 0
    4f9a:	40 e8       	ldi	r20, 0x80	; 128
    4f9c:	5f e3       	ldi	r21, 0x3F	; 63
    4f9e:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    4fa2:	88 23       	and	r24, r24
    4fa4:	2c f4       	brge	.+10     	; 0x4fb0 <SevenSegment_From0To9+0x91e>
		__ticks = 1;
    4fa6:	81 e0       	ldi	r24, 0x01	; 1
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	98 ab       	std	Y+48, r25	; 0x30
    4fac:	8f a7       	std	Y+47, r24	; 0x2f
    4fae:	3f c0       	rjmp	.+126    	; 0x502e <SevenSegment_From0To9+0x99c>
	else if (__tmp > 65535)
    4fb0:	69 a9       	ldd	r22, Y+49	; 0x31
    4fb2:	7a a9       	ldd	r23, Y+50	; 0x32
    4fb4:	8b a9       	ldd	r24, Y+51	; 0x33
    4fb6:	9c a9       	ldd	r25, Y+52	; 0x34
    4fb8:	20 e0       	ldi	r18, 0x00	; 0
    4fba:	3f ef       	ldi	r19, 0xFF	; 255
    4fbc:	4f e7       	ldi	r20, 0x7F	; 127
    4fbe:	57 e4       	ldi	r21, 0x47	; 71
    4fc0:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    4fc4:	18 16       	cp	r1, r24
    4fc6:	4c f5       	brge	.+82     	; 0x501a <SevenSegment_From0To9+0x988>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fc8:	6d a9       	ldd	r22, Y+53	; 0x35
    4fca:	7e a9       	ldd	r23, Y+54	; 0x36
    4fcc:	8f a9       	ldd	r24, Y+55	; 0x37
    4fce:	98 ad       	ldd	r25, Y+56	; 0x38
    4fd0:	20 e0       	ldi	r18, 0x00	; 0
    4fd2:	30 e0       	ldi	r19, 0x00	; 0
    4fd4:	40 e2       	ldi	r20, 0x20	; 32
    4fd6:	51 e4       	ldi	r21, 0x41	; 65
    4fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fdc:	dc 01       	movw	r26, r24
    4fde:	cb 01       	movw	r24, r22
    4fe0:	bc 01       	movw	r22, r24
    4fe2:	cd 01       	movw	r24, r26
    4fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fe8:	dc 01       	movw	r26, r24
    4fea:	cb 01       	movw	r24, r22
    4fec:	98 ab       	std	Y+48, r25	; 0x30
    4fee:	8f a7       	std	Y+47, r24	; 0x2f
    4ff0:	0f c0       	rjmp	.+30     	; 0x5010 <SevenSegment_From0To9+0x97e>
    4ff2:	80 e9       	ldi	r24, 0x90	; 144
    4ff4:	91 e0       	ldi	r25, 0x01	; 1
    4ff6:	9e a7       	std	Y+46, r25	; 0x2e
    4ff8:	8d a7       	std	Y+45, r24	; 0x2d
    4ffa:	8d a5       	ldd	r24, Y+45	; 0x2d
    4ffc:	9e a5       	ldd	r25, Y+46	; 0x2e
    4ffe:	01 97       	sbiw	r24, 0x01	; 1
    5000:	f1 f7       	brne	.-4      	; 0x4ffe <SevenSegment_From0To9+0x96c>
    5002:	9e a7       	std	Y+46, r25	; 0x2e
    5004:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5006:	8f a5       	ldd	r24, Y+47	; 0x2f
    5008:	98 a9       	ldd	r25, Y+48	; 0x30
    500a:	01 97       	sbiw	r24, 0x01	; 1
    500c:	98 ab       	std	Y+48, r25	; 0x30
    500e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5010:	8f a5       	ldd	r24, Y+47	; 0x2f
    5012:	98 a9       	ldd	r25, Y+48	; 0x30
    5014:	00 97       	sbiw	r24, 0x00	; 0
    5016:	69 f7       	brne	.-38     	; 0x4ff2 <SevenSegment_From0To9+0x960>
    5018:	14 c0       	rjmp	.+40     	; 0x5042 <SevenSegment_From0To9+0x9b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    501a:	69 a9       	ldd	r22, Y+49	; 0x31
    501c:	7a a9       	ldd	r23, Y+50	; 0x32
    501e:	8b a9       	ldd	r24, Y+51	; 0x33
    5020:	9c a9       	ldd	r25, Y+52	; 0x34
    5022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5026:	dc 01       	movw	r26, r24
    5028:	cb 01       	movw	r24, r22
    502a:	98 ab       	std	Y+48, r25	; 0x30
    502c:	8f a7       	std	Y+47, r24	; 0x2f
    502e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5030:	98 a9       	ldd	r25, Y+48	; 0x30
    5032:	9c a7       	std	Y+44, r25	; 0x2c
    5034:	8b a7       	std	Y+43, r24	; 0x2b
    5036:	8b a5       	ldd	r24, Y+43	; 0x2b
    5038:	9c a5       	ldd	r25, Y+44	; 0x2c
    503a:	01 97       	sbiw	r24, 0x01	; 1
    503c:	f1 f7       	brne	.-4      	; 0x503a <SevenSegment_From0To9+0x9a8>
    503e:	9c a7       	std	Y+44, r25	; 0x2c
    5040:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		SevenSegment_Display(2, 1, 1, 1, 0, 0, 0, 0); // 7
    5042:	82 e0       	ldi	r24, 0x02	; 2
    5044:	61 e0       	ldi	r22, 0x01	; 1
    5046:	41 e0       	ldi	r20, 0x01	; 1
    5048:	21 e0       	ldi	r18, 0x01	; 1
    504a:	00 e0       	ldi	r16, 0x00	; 0
    504c:	ee 24       	eor	r14, r14
    504e:	cc 24       	eor	r12, r12
    5050:	aa 24       	eor	r10, r10
    5052:	0e 94 09 21 	call	0x4212	; 0x4212 <SevenSegment_Display>
    5056:	80 e0       	ldi	r24, 0x00	; 0
    5058:	90 e0       	ldi	r25, 0x00	; 0
    505a:	a8 e4       	ldi	r26, 0x48	; 72
    505c:	b2 e4       	ldi	r27, 0x42	; 66
    505e:	8f a3       	std	Y+39, r24	; 0x27
    5060:	98 a7       	std	Y+40, r25	; 0x28
    5062:	a9 a7       	std	Y+41, r26	; 0x29
    5064:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5066:	6f a1       	ldd	r22, Y+39	; 0x27
    5068:	78 a5       	ldd	r23, Y+40	; 0x28
    506a:	89 a5       	ldd	r24, Y+41	; 0x29
    506c:	9a a5       	ldd	r25, Y+42	; 0x2a
    506e:	20 e0       	ldi	r18, 0x00	; 0
    5070:	30 e0       	ldi	r19, 0x00	; 0
    5072:	4a e7       	ldi	r20, 0x7A	; 122
    5074:	55 e4       	ldi	r21, 0x45	; 69
    5076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    507a:	dc 01       	movw	r26, r24
    507c:	cb 01       	movw	r24, r22
    507e:	8b a3       	std	Y+35, r24	; 0x23
    5080:	9c a3       	std	Y+36, r25	; 0x24
    5082:	ad a3       	std	Y+37, r26	; 0x25
    5084:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5086:	6b a1       	ldd	r22, Y+35	; 0x23
    5088:	7c a1       	ldd	r23, Y+36	; 0x24
    508a:	8d a1       	ldd	r24, Y+37	; 0x25
    508c:	9e a1       	ldd	r25, Y+38	; 0x26
    508e:	20 e0       	ldi	r18, 0x00	; 0
    5090:	30 e0       	ldi	r19, 0x00	; 0
    5092:	40 e8       	ldi	r20, 0x80	; 128
    5094:	5f e3       	ldi	r21, 0x3F	; 63
    5096:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    509a:	88 23       	and	r24, r24
    509c:	2c f4       	brge	.+10     	; 0x50a8 <SevenSegment_From0To9+0xa16>
		__ticks = 1;
    509e:	81 e0       	ldi	r24, 0x01	; 1
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	9a a3       	std	Y+34, r25	; 0x22
    50a4:	89 a3       	std	Y+33, r24	; 0x21
    50a6:	3f c0       	rjmp	.+126    	; 0x5126 <SevenSegment_From0To9+0xa94>
	else if (__tmp > 65535)
    50a8:	6b a1       	ldd	r22, Y+35	; 0x23
    50aa:	7c a1       	ldd	r23, Y+36	; 0x24
    50ac:	8d a1       	ldd	r24, Y+37	; 0x25
    50ae:	9e a1       	ldd	r25, Y+38	; 0x26
    50b0:	20 e0       	ldi	r18, 0x00	; 0
    50b2:	3f ef       	ldi	r19, 0xFF	; 255
    50b4:	4f e7       	ldi	r20, 0x7F	; 127
    50b6:	57 e4       	ldi	r21, 0x47	; 71
    50b8:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    50bc:	18 16       	cp	r1, r24
    50be:	4c f5       	brge	.+82     	; 0x5112 <SevenSegment_From0To9+0xa80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50c0:	6f a1       	ldd	r22, Y+39	; 0x27
    50c2:	78 a5       	ldd	r23, Y+40	; 0x28
    50c4:	89 a5       	ldd	r24, Y+41	; 0x29
    50c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    50c8:	20 e0       	ldi	r18, 0x00	; 0
    50ca:	30 e0       	ldi	r19, 0x00	; 0
    50cc:	40 e2       	ldi	r20, 0x20	; 32
    50ce:	51 e4       	ldi	r21, 0x41	; 65
    50d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50d4:	dc 01       	movw	r26, r24
    50d6:	cb 01       	movw	r24, r22
    50d8:	bc 01       	movw	r22, r24
    50da:	cd 01       	movw	r24, r26
    50dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50e0:	dc 01       	movw	r26, r24
    50e2:	cb 01       	movw	r24, r22
    50e4:	9a a3       	std	Y+34, r25	; 0x22
    50e6:	89 a3       	std	Y+33, r24	; 0x21
    50e8:	0f c0       	rjmp	.+30     	; 0x5108 <SevenSegment_From0To9+0xa76>
    50ea:	80 e9       	ldi	r24, 0x90	; 144
    50ec:	91 e0       	ldi	r25, 0x01	; 1
    50ee:	98 a3       	std	Y+32, r25	; 0x20
    50f0:	8f 8f       	std	Y+31, r24	; 0x1f
    50f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    50f4:	98 a1       	ldd	r25, Y+32	; 0x20
    50f6:	01 97       	sbiw	r24, 0x01	; 1
    50f8:	f1 f7       	brne	.-4      	; 0x50f6 <SevenSegment_From0To9+0xa64>
    50fa:	98 a3       	std	Y+32, r25	; 0x20
    50fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50fe:	89 a1       	ldd	r24, Y+33	; 0x21
    5100:	9a a1       	ldd	r25, Y+34	; 0x22
    5102:	01 97       	sbiw	r24, 0x01	; 1
    5104:	9a a3       	std	Y+34, r25	; 0x22
    5106:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5108:	89 a1       	ldd	r24, Y+33	; 0x21
    510a:	9a a1       	ldd	r25, Y+34	; 0x22
    510c:	00 97       	sbiw	r24, 0x00	; 0
    510e:	69 f7       	brne	.-38     	; 0x50ea <SevenSegment_From0To9+0xa58>
    5110:	14 c0       	rjmp	.+40     	; 0x513a <SevenSegment_From0To9+0xaa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5112:	6b a1       	ldd	r22, Y+35	; 0x23
    5114:	7c a1       	ldd	r23, Y+36	; 0x24
    5116:	8d a1       	ldd	r24, Y+37	; 0x25
    5118:	9e a1       	ldd	r25, Y+38	; 0x26
    511a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    511e:	dc 01       	movw	r26, r24
    5120:	cb 01       	movw	r24, r22
    5122:	9a a3       	std	Y+34, r25	; 0x22
    5124:	89 a3       	std	Y+33, r24	; 0x21
    5126:	89 a1       	ldd	r24, Y+33	; 0x21
    5128:	9a a1       	ldd	r25, Y+34	; 0x22
    512a:	9e 8f       	std	Y+30, r25	; 0x1e
    512c:	8d 8f       	std	Y+29, r24	; 0x1d
    512e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5130:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5132:	01 97       	sbiw	r24, 0x01	; 1
    5134:	f1 f7       	brne	.-4      	; 0x5132 <SevenSegment_From0To9+0xaa0>
    5136:	9e 8f       	std	Y+30, r25	; 0x1e
    5138:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		SevenSegment_Display(2, 1, 1, 1, 1, 1, 1, 1); // 8
    513a:	82 e0       	ldi	r24, 0x02	; 2
    513c:	61 e0       	ldi	r22, 0x01	; 1
    513e:	41 e0       	ldi	r20, 0x01	; 1
    5140:	21 e0       	ldi	r18, 0x01	; 1
    5142:	01 e0       	ldi	r16, 0x01	; 1
    5144:	ee 24       	eor	r14, r14
    5146:	e3 94       	inc	r14
    5148:	cc 24       	eor	r12, r12
    514a:	c3 94       	inc	r12
    514c:	aa 24       	eor	r10, r10
    514e:	a3 94       	inc	r10
    5150:	0e 94 09 21 	call	0x4212	; 0x4212 <SevenSegment_Display>
    5154:	80 e0       	ldi	r24, 0x00	; 0
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	a8 e4       	ldi	r26, 0x48	; 72
    515a:	b2 e4       	ldi	r27, 0x42	; 66
    515c:	89 8f       	std	Y+25, r24	; 0x19
    515e:	9a 8f       	std	Y+26, r25	; 0x1a
    5160:	ab 8f       	std	Y+27, r26	; 0x1b
    5162:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5164:	69 8d       	ldd	r22, Y+25	; 0x19
    5166:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5168:	8b 8d       	ldd	r24, Y+27	; 0x1b
    516a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    516c:	20 e0       	ldi	r18, 0x00	; 0
    516e:	30 e0       	ldi	r19, 0x00	; 0
    5170:	4a e7       	ldi	r20, 0x7A	; 122
    5172:	55 e4       	ldi	r21, 0x45	; 69
    5174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5178:	dc 01       	movw	r26, r24
    517a:	cb 01       	movw	r24, r22
    517c:	8d 8b       	std	Y+21, r24	; 0x15
    517e:	9e 8b       	std	Y+22, r25	; 0x16
    5180:	af 8b       	std	Y+23, r26	; 0x17
    5182:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5184:	6d 89       	ldd	r22, Y+21	; 0x15
    5186:	7e 89       	ldd	r23, Y+22	; 0x16
    5188:	8f 89       	ldd	r24, Y+23	; 0x17
    518a:	98 8d       	ldd	r25, Y+24	; 0x18
    518c:	20 e0       	ldi	r18, 0x00	; 0
    518e:	30 e0       	ldi	r19, 0x00	; 0
    5190:	40 e8       	ldi	r20, 0x80	; 128
    5192:	5f e3       	ldi	r21, 0x3F	; 63
    5194:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    5198:	88 23       	and	r24, r24
    519a:	2c f4       	brge	.+10     	; 0x51a6 <SevenSegment_From0To9+0xb14>
		__ticks = 1;
    519c:	81 e0       	ldi	r24, 0x01	; 1
    519e:	90 e0       	ldi	r25, 0x00	; 0
    51a0:	9c 8b       	std	Y+20, r25	; 0x14
    51a2:	8b 8b       	std	Y+19, r24	; 0x13
    51a4:	3f c0       	rjmp	.+126    	; 0x5224 <SevenSegment_From0To9+0xb92>
	else if (__tmp > 65535)
    51a6:	6d 89       	ldd	r22, Y+21	; 0x15
    51a8:	7e 89       	ldd	r23, Y+22	; 0x16
    51aa:	8f 89       	ldd	r24, Y+23	; 0x17
    51ac:	98 8d       	ldd	r25, Y+24	; 0x18
    51ae:	20 e0       	ldi	r18, 0x00	; 0
    51b0:	3f ef       	ldi	r19, 0xFF	; 255
    51b2:	4f e7       	ldi	r20, 0x7F	; 127
    51b4:	57 e4       	ldi	r21, 0x47	; 71
    51b6:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    51ba:	18 16       	cp	r1, r24
    51bc:	4c f5       	brge	.+82     	; 0x5210 <SevenSegment_From0To9+0xb7e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51be:	69 8d       	ldd	r22, Y+25	; 0x19
    51c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51c6:	20 e0       	ldi	r18, 0x00	; 0
    51c8:	30 e0       	ldi	r19, 0x00	; 0
    51ca:	40 e2       	ldi	r20, 0x20	; 32
    51cc:	51 e4       	ldi	r21, 0x41	; 65
    51ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51d2:	dc 01       	movw	r26, r24
    51d4:	cb 01       	movw	r24, r22
    51d6:	bc 01       	movw	r22, r24
    51d8:	cd 01       	movw	r24, r26
    51da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51de:	dc 01       	movw	r26, r24
    51e0:	cb 01       	movw	r24, r22
    51e2:	9c 8b       	std	Y+20, r25	; 0x14
    51e4:	8b 8b       	std	Y+19, r24	; 0x13
    51e6:	0f c0       	rjmp	.+30     	; 0x5206 <SevenSegment_From0To9+0xb74>
    51e8:	80 e9       	ldi	r24, 0x90	; 144
    51ea:	91 e0       	ldi	r25, 0x01	; 1
    51ec:	9a 8b       	std	Y+18, r25	; 0x12
    51ee:	89 8b       	std	Y+17, r24	; 0x11
    51f0:	89 89       	ldd	r24, Y+17	; 0x11
    51f2:	9a 89       	ldd	r25, Y+18	; 0x12
    51f4:	01 97       	sbiw	r24, 0x01	; 1
    51f6:	f1 f7       	brne	.-4      	; 0x51f4 <SevenSegment_From0To9+0xb62>
    51f8:	9a 8b       	std	Y+18, r25	; 0x12
    51fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51fc:	8b 89       	ldd	r24, Y+19	; 0x13
    51fe:	9c 89       	ldd	r25, Y+20	; 0x14
    5200:	01 97       	sbiw	r24, 0x01	; 1
    5202:	9c 8b       	std	Y+20, r25	; 0x14
    5204:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5206:	8b 89       	ldd	r24, Y+19	; 0x13
    5208:	9c 89       	ldd	r25, Y+20	; 0x14
    520a:	00 97       	sbiw	r24, 0x00	; 0
    520c:	69 f7       	brne	.-38     	; 0x51e8 <SevenSegment_From0To9+0xb56>
    520e:	14 c0       	rjmp	.+40     	; 0x5238 <SevenSegment_From0To9+0xba6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5210:	6d 89       	ldd	r22, Y+21	; 0x15
    5212:	7e 89       	ldd	r23, Y+22	; 0x16
    5214:	8f 89       	ldd	r24, Y+23	; 0x17
    5216:	98 8d       	ldd	r25, Y+24	; 0x18
    5218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    521c:	dc 01       	movw	r26, r24
    521e:	cb 01       	movw	r24, r22
    5220:	9c 8b       	std	Y+20, r25	; 0x14
    5222:	8b 8b       	std	Y+19, r24	; 0x13
    5224:	8b 89       	ldd	r24, Y+19	; 0x13
    5226:	9c 89       	ldd	r25, Y+20	; 0x14
    5228:	98 8b       	std	Y+16, r25	; 0x10
    522a:	8f 87       	std	Y+15, r24	; 0x0f
    522c:	8f 85       	ldd	r24, Y+15	; 0x0f
    522e:	98 89       	ldd	r25, Y+16	; 0x10
    5230:	01 97       	sbiw	r24, 0x01	; 1
    5232:	f1 f7       	brne	.-4      	; 0x5230 <SevenSegment_From0To9+0xb9e>
    5234:	98 8b       	std	Y+16, r25	; 0x10
    5236:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		SevenSegment_Display(2, 1, 1, 1, 1, 0, 1, 1); // 9
    5238:	82 e0       	ldi	r24, 0x02	; 2
    523a:	61 e0       	ldi	r22, 0x01	; 1
    523c:	41 e0       	ldi	r20, 0x01	; 1
    523e:	21 e0       	ldi	r18, 0x01	; 1
    5240:	01 e0       	ldi	r16, 0x01	; 1
    5242:	ee 24       	eor	r14, r14
    5244:	cc 24       	eor	r12, r12
    5246:	c3 94       	inc	r12
    5248:	aa 24       	eor	r10, r10
    524a:	a3 94       	inc	r10
    524c:	0e 94 09 21 	call	0x4212	; 0x4212 <SevenSegment_Display>
    5250:	80 e0       	ldi	r24, 0x00	; 0
    5252:	90 e0       	ldi	r25, 0x00	; 0
    5254:	a8 e4       	ldi	r26, 0x48	; 72
    5256:	b2 e4       	ldi	r27, 0x42	; 66
    5258:	8b 87       	std	Y+11, r24	; 0x0b
    525a:	9c 87       	std	Y+12, r25	; 0x0c
    525c:	ad 87       	std	Y+13, r26	; 0x0d
    525e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5260:	6b 85       	ldd	r22, Y+11	; 0x0b
    5262:	7c 85       	ldd	r23, Y+12	; 0x0c
    5264:	8d 85       	ldd	r24, Y+13	; 0x0d
    5266:	9e 85       	ldd	r25, Y+14	; 0x0e
    5268:	20 e0       	ldi	r18, 0x00	; 0
    526a:	30 e0       	ldi	r19, 0x00	; 0
    526c:	4a e7       	ldi	r20, 0x7A	; 122
    526e:	55 e4       	ldi	r21, 0x45	; 69
    5270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5274:	dc 01       	movw	r26, r24
    5276:	cb 01       	movw	r24, r22
    5278:	8f 83       	std	Y+7, r24	; 0x07
    527a:	98 87       	std	Y+8, r25	; 0x08
    527c:	a9 87       	std	Y+9, r26	; 0x09
    527e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5280:	6f 81       	ldd	r22, Y+7	; 0x07
    5282:	78 85       	ldd	r23, Y+8	; 0x08
    5284:	89 85       	ldd	r24, Y+9	; 0x09
    5286:	9a 85       	ldd	r25, Y+10	; 0x0a
    5288:	20 e0       	ldi	r18, 0x00	; 0
    528a:	30 e0       	ldi	r19, 0x00	; 0
    528c:	40 e8       	ldi	r20, 0x80	; 128
    528e:	5f e3       	ldi	r21, 0x3F	; 63
    5290:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    5294:	88 23       	and	r24, r24
    5296:	2c f4       	brge	.+10     	; 0x52a2 <SevenSegment_From0To9+0xc10>
		__ticks = 1;
    5298:	81 e0       	ldi	r24, 0x01	; 1
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	9e 83       	std	Y+6, r25	; 0x06
    529e:	8d 83       	std	Y+5, r24	; 0x05
    52a0:	3f c0       	rjmp	.+126    	; 0x5320 <SevenSegment_From0To9+0xc8e>
	else if (__tmp > 65535)
    52a2:	6f 81       	ldd	r22, Y+7	; 0x07
    52a4:	78 85       	ldd	r23, Y+8	; 0x08
    52a6:	89 85       	ldd	r24, Y+9	; 0x09
    52a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    52aa:	20 e0       	ldi	r18, 0x00	; 0
    52ac:	3f ef       	ldi	r19, 0xFF	; 255
    52ae:	4f e7       	ldi	r20, 0x7F	; 127
    52b0:	57 e4       	ldi	r21, 0x47	; 71
    52b2:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    52b6:	18 16       	cp	r1, r24
    52b8:	4c f5       	brge	.+82     	; 0x530c <SevenSegment_From0To9+0xc7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    52bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    52be:	8d 85       	ldd	r24, Y+13	; 0x0d
    52c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    52c2:	20 e0       	ldi	r18, 0x00	; 0
    52c4:	30 e0       	ldi	r19, 0x00	; 0
    52c6:	40 e2       	ldi	r20, 0x20	; 32
    52c8:	51 e4       	ldi	r21, 0x41	; 65
    52ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52ce:	dc 01       	movw	r26, r24
    52d0:	cb 01       	movw	r24, r22
    52d2:	bc 01       	movw	r22, r24
    52d4:	cd 01       	movw	r24, r26
    52d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52da:	dc 01       	movw	r26, r24
    52dc:	cb 01       	movw	r24, r22
    52de:	9e 83       	std	Y+6, r25	; 0x06
    52e0:	8d 83       	std	Y+5, r24	; 0x05
    52e2:	0f c0       	rjmp	.+30     	; 0x5302 <SevenSegment_From0To9+0xc70>
    52e4:	80 e9       	ldi	r24, 0x90	; 144
    52e6:	91 e0       	ldi	r25, 0x01	; 1
    52e8:	9c 83       	std	Y+4, r25	; 0x04
    52ea:	8b 83       	std	Y+3, r24	; 0x03
    52ec:	8b 81       	ldd	r24, Y+3	; 0x03
    52ee:	9c 81       	ldd	r25, Y+4	; 0x04
    52f0:	01 97       	sbiw	r24, 0x01	; 1
    52f2:	f1 f7       	brne	.-4      	; 0x52f0 <SevenSegment_From0To9+0xc5e>
    52f4:	9c 83       	std	Y+4, r25	; 0x04
    52f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52f8:	8d 81       	ldd	r24, Y+5	; 0x05
    52fa:	9e 81       	ldd	r25, Y+6	; 0x06
    52fc:	01 97       	sbiw	r24, 0x01	; 1
    52fe:	9e 83       	std	Y+6, r25	; 0x06
    5300:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5302:	8d 81       	ldd	r24, Y+5	; 0x05
    5304:	9e 81       	ldd	r25, Y+6	; 0x06
    5306:	00 97       	sbiw	r24, 0x00	; 0
    5308:	69 f7       	brne	.-38     	; 0x52e4 <SevenSegment_From0To9+0xc52>
    530a:	d3 c9       	rjmp	.-3162   	; 0x46b2 <SevenSegment_From0To9+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    530c:	6f 81       	ldd	r22, Y+7	; 0x07
    530e:	78 85       	ldd	r23, Y+8	; 0x08
    5310:	89 85       	ldd	r24, Y+9	; 0x09
    5312:	9a 85       	ldd	r25, Y+10	; 0x0a
    5314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5318:	dc 01       	movw	r26, r24
    531a:	cb 01       	movw	r24, r22
    531c:	9e 83       	std	Y+6, r25	; 0x06
    531e:	8d 83       	std	Y+5, r24	; 0x05
    5320:	8d 81       	ldd	r24, Y+5	; 0x05
    5322:	9e 81       	ldd	r25, Y+6	; 0x06
    5324:	9a 83       	std	Y+2, r25	; 0x02
    5326:	89 83       	std	Y+1, r24	; 0x01
    5328:	89 81       	ldd	r24, Y+1	; 0x01
    532a:	9a 81       	ldd	r25, Y+2	; 0x02
    532c:	01 97       	sbiw	r24, 0x01	; 1
    532e:	f1 f7       	brne	.-4      	; 0x532c <SevenSegment_From0To9+0xc9a>
    5330:	9a 83       	std	Y+2, r25	; 0x02
    5332:	89 83       	std	Y+1, r24	; 0x01
    5334:	be c9       	rjmp	.-3204   	; 0x46b2 <SevenSegment_From0To9+0x20>

00005336 <SevenSegment_FromAToH>:
		_delay_ms(50);
	}
}

void SevenSegment_FromAToH(void){
    5336:	af 92       	push	r10
    5338:	cf 92       	push	r12
    533a:	ef 92       	push	r14
    533c:	0f 93       	push	r16
    533e:	1f 93       	push	r17
    5340:	df 93       	push	r29
    5342:	cf 93       	push	r28
    5344:	cd b7       	in	r28, 0x3d	; 61
    5346:	de b7       	in	r29, 0x3e	; 62
    5348:	c0 57       	subi	r28, 0x70	; 112
    534a:	d0 40       	sbci	r29, 0x00	; 0
    534c:	0f b6       	in	r0, 0x3f	; 63
    534e:	f8 94       	cli
    5350:	de bf       	out	0x3e, r29	; 62
    5352:	0f be       	out	0x3f, r0	; 63
    5354:	cd bf       	out	0x3d, r28	; 61
	while(1){
		SevenSegment_Display(2, 1, 1, 1, 0, 1, 1, 1); // A
    5356:	82 e0       	ldi	r24, 0x02	; 2
    5358:	61 e0       	ldi	r22, 0x01	; 1
    535a:	41 e0       	ldi	r20, 0x01	; 1
    535c:	21 e0       	ldi	r18, 0x01	; 1
    535e:	00 e0       	ldi	r16, 0x00	; 0
    5360:	ee 24       	eor	r14, r14
    5362:	e3 94       	inc	r14
    5364:	cc 24       	eor	r12, r12
    5366:	c3 94       	inc	r12
    5368:	aa 24       	eor	r10, r10
    536a:	a3 94       	inc	r10
    536c:	0e 94 09 21 	call	0x4212	; 0x4212 <SevenSegment_Display>
    5370:	fe 01       	movw	r30, r28
    5372:	e3 59       	subi	r30, 0x93	; 147
    5374:	ff 4f       	sbci	r31, 0xFF	; 255
    5376:	80 e0       	ldi	r24, 0x00	; 0
    5378:	90 e0       	ldi	r25, 0x00	; 0
    537a:	a8 e4       	ldi	r26, 0x48	; 72
    537c:	b2 e4       	ldi	r27, 0x42	; 66
    537e:	80 83       	st	Z, r24
    5380:	91 83       	std	Z+1, r25	; 0x01
    5382:	a2 83       	std	Z+2, r26	; 0x02
    5384:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5386:	8e 01       	movw	r16, r28
    5388:	07 59       	subi	r16, 0x97	; 151
    538a:	1f 4f       	sbci	r17, 0xFF	; 255
    538c:	fe 01       	movw	r30, r28
    538e:	e3 59       	subi	r30, 0x93	; 147
    5390:	ff 4f       	sbci	r31, 0xFF	; 255
    5392:	60 81       	ld	r22, Z
    5394:	71 81       	ldd	r23, Z+1	; 0x01
    5396:	82 81       	ldd	r24, Z+2	; 0x02
    5398:	93 81       	ldd	r25, Z+3	; 0x03
    539a:	20 e0       	ldi	r18, 0x00	; 0
    539c:	30 e0       	ldi	r19, 0x00	; 0
    539e:	4a e7       	ldi	r20, 0x7A	; 122
    53a0:	55 e4       	ldi	r21, 0x45	; 69
    53a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53a6:	dc 01       	movw	r26, r24
    53a8:	cb 01       	movw	r24, r22
    53aa:	f8 01       	movw	r30, r16
    53ac:	80 83       	st	Z, r24
    53ae:	91 83       	std	Z+1, r25	; 0x01
    53b0:	a2 83       	std	Z+2, r26	; 0x02
    53b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    53b4:	fe 01       	movw	r30, r28
    53b6:	e7 59       	subi	r30, 0x97	; 151
    53b8:	ff 4f       	sbci	r31, 0xFF	; 255
    53ba:	60 81       	ld	r22, Z
    53bc:	71 81       	ldd	r23, Z+1	; 0x01
    53be:	82 81       	ldd	r24, Z+2	; 0x02
    53c0:	93 81       	ldd	r25, Z+3	; 0x03
    53c2:	20 e0       	ldi	r18, 0x00	; 0
    53c4:	30 e0       	ldi	r19, 0x00	; 0
    53c6:	40 e8       	ldi	r20, 0x80	; 128
    53c8:	5f e3       	ldi	r21, 0x3F	; 63
    53ca:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    53ce:	88 23       	and	r24, r24
    53d0:	44 f4       	brge	.+16     	; 0x53e2 <SevenSegment_FromAToH+0xac>
		__ticks = 1;
    53d2:	fe 01       	movw	r30, r28
    53d4:	e9 59       	subi	r30, 0x99	; 153
    53d6:	ff 4f       	sbci	r31, 0xFF	; 255
    53d8:	81 e0       	ldi	r24, 0x01	; 1
    53da:	90 e0       	ldi	r25, 0x00	; 0
    53dc:	91 83       	std	Z+1, r25	; 0x01
    53de:	80 83       	st	Z, r24
    53e0:	64 c0       	rjmp	.+200    	; 0x54aa <SevenSegment_FromAToH+0x174>
	else if (__tmp > 65535)
    53e2:	fe 01       	movw	r30, r28
    53e4:	e7 59       	subi	r30, 0x97	; 151
    53e6:	ff 4f       	sbci	r31, 0xFF	; 255
    53e8:	60 81       	ld	r22, Z
    53ea:	71 81       	ldd	r23, Z+1	; 0x01
    53ec:	82 81       	ldd	r24, Z+2	; 0x02
    53ee:	93 81       	ldd	r25, Z+3	; 0x03
    53f0:	20 e0       	ldi	r18, 0x00	; 0
    53f2:	3f ef       	ldi	r19, 0xFF	; 255
    53f4:	4f e7       	ldi	r20, 0x7F	; 127
    53f6:	57 e4       	ldi	r21, 0x47	; 71
    53f8:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    53fc:	18 16       	cp	r1, r24
    53fe:	0c f0       	brlt	.+2      	; 0x5402 <SevenSegment_FromAToH+0xcc>
    5400:	43 c0       	rjmp	.+134    	; 0x5488 <SevenSegment_FromAToH+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5402:	fe 01       	movw	r30, r28
    5404:	e3 59       	subi	r30, 0x93	; 147
    5406:	ff 4f       	sbci	r31, 0xFF	; 255
    5408:	60 81       	ld	r22, Z
    540a:	71 81       	ldd	r23, Z+1	; 0x01
    540c:	82 81       	ldd	r24, Z+2	; 0x02
    540e:	93 81       	ldd	r25, Z+3	; 0x03
    5410:	20 e0       	ldi	r18, 0x00	; 0
    5412:	30 e0       	ldi	r19, 0x00	; 0
    5414:	40 e2       	ldi	r20, 0x20	; 32
    5416:	51 e4       	ldi	r21, 0x41	; 65
    5418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    541c:	dc 01       	movw	r26, r24
    541e:	cb 01       	movw	r24, r22
    5420:	8e 01       	movw	r16, r28
    5422:	09 59       	subi	r16, 0x99	; 153
    5424:	1f 4f       	sbci	r17, 0xFF	; 255
    5426:	bc 01       	movw	r22, r24
    5428:	cd 01       	movw	r24, r26
    542a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    542e:	dc 01       	movw	r26, r24
    5430:	cb 01       	movw	r24, r22
    5432:	f8 01       	movw	r30, r16
    5434:	91 83       	std	Z+1, r25	; 0x01
    5436:	80 83       	st	Z, r24
    5438:	1f c0       	rjmp	.+62     	; 0x5478 <SevenSegment_FromAToH+0x142>
    543a:	fe 01       	movw	r30, r28
    543c:	eb 59       	subi	r30, 0x9B	; 155
    543e:	ff 4f       	sbci	r31, 0xFF	; 255
    5440:	80 e9       	ldi	r24, 0x90	; 144
    5442:	91 e0       	ldi	r25, 0x01	; 1
    5444:	91 83       	std	Z+1, r25	; 0x01
    5446:	80 83       	st	Z, r24
    5448:	fe 01       	movw	r30, r28
    544a:	eb 59       	subi	r30, 0x9B	; 155
    544c:	ff 4f       	sbci	r31, 0xFF	; 255
    544e:	80 81       	ld	r24, Z
    5450:	91 81       	ldd	r25, Z+1	; 0x01
    5452:	01 97       	sbiw	r24, 0x01	; 1
    5454:	f1 f7       	brne	.-4      	; 0x5452 <SevenSegment_FromAToH+0x11c>
    5456:	fe 01       	movw	r30, r28
    5458:	eb 59       	subi	r30, 0x9B	; 155
    545a:	ff 4f       	sbci	r31, 0xFF	; 255
    545c:	91 83       	std	Z+1, r25	; 0x01
    545e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5460:	de 01       	movw	r26, r28
    5462:	a9 59       	subi	r26, 0x99	; 153
    5464:	bf 4f       	sbci	r27, 0xFF	; 255
    5466:	fe 01       	movw	r30, r28
    5468:	e9 59       	subi	r30, 0x99	; 153
    546a:	ff 4f       	sbci	r31, 0xFF	; 255
    546c:	80 81       	ld	r24, Z
    546e:	91 81       	ldd	r25, Z+1	; 0x01
    5470:	01 97       	sbiw	r24, 0x01	; 1
    5472:	11 96       	adiw	r26, 0x01	; 1
    5474:	9c 93       	st	X, r25
    5476:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5478:	fe 01       	movw	r30, r28
    547a:	e9 59       	subi	r30, 0x99	; 153
    547c:	ff 4f       	sbci	r31, 0xFF	; 255
    547e:	80 81       	ld	r24, Z
    5480:	91 81       	ldd	r25, Z+1	; 0x01
    5482:	00 97       	sbiw	r24, 0x00	; 0
    5484:	d1 f6       	brne	.-76     	; 0x543a <SevenSegment_FromAToH+0x104>
    5486:	27 c0       	rjmp	.+78     	; 0x54d6 <SevenSegment_FromAToH+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5488:	8e 01       	movw	r16, r28
    548a:	09 59       	subi	r16, 0x99	; 153
    548c:	1f 4f       	sbci	r17, 0xFF	; 255
    548e:	fe 01       	movw	r30, r28
    5490:	e7 59       	subi	r30, 0x97	; 151
    5492:	ff 4f       	sbci	r31, 0xFF	; 255
    5494:	60 81       	ld	r22, Z
    5496:	71 81       	ldd	r23, Z+1	; 0x01
    5498:	82 81       	ldd	r24, Z+2	; 0x02
    549a:	93 81       	ldd	r25, Z+3	; 0x03
    549c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54a0:	dc 01       	movw	r26, r24
    54a2:	cb 01       	movw	r24, r22
    54a4:	f8 01       	movw	r30, r16
    54a6:	91 83       	std	Z+1, r25	; 0x01
    54a8:	80 83       	st	Z, r24
    54aa:	de 01       	movw	r26, r28
    54ac:	ad 59       	subi	r26, 0x9D	; 157
    54ae:	bf 4f       	sbci	r27, 0xFF	; 255
    54b0:	fe 01       	movw	r30, r28
    54b2:	e9 59       	subi	r30, 0x99	; 153
    54b4:	ff 4f       	sbci	r31, 0xFF	; 255
    54b6:	80 81       	ld	r24, Z
    54b8:	91 81       	ldd	r25, Z+1	; 0x01
    54ba:	8d 93       	st	X+, r24
    54bc:	9c 93       	st	X, r25
    54be:	fe 01       	movw	r30, r28
    54c0:	ed 59       	subi	r30, 0x9D	; 157
    54c2:	ff 4f       	sbci	r31, 0xFF	; 255
    54c4:	80 81       	ld	r24, Z
    54c6:	91 81       	ldd	r25, Z+1	; 0x01
    54c8:	01 97       	sbiw	r24, 0x01	; 1
    54ca:	f1 f7       	brne	.-4      	; 0x54c8 <SevenSegment_FromAToH+0x192>
    54cc:	fe 01       	movw	r30, r28
    54ce:	ed 59       	subi	r30, 0x9D	; 157
    54d0:	ff 4f       	sbci	r31, 0xFF	; 255
    54d2:	91 83       	std	Z+1, r25	; 0x01
    54d4:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(2, 0, 0, 1, 1, 1, 1, 1); // B
    54d6:	82 e0       	ldi	r24, 0x02	; 2
    54d8:	60 e0       	ldi	r22, 0x00	; 0
    54da:	40 e0       	ldi	r20, 0x00	; 0
    54dc:	21 e0       	ldi	r18, 0x01	; 1
    54de:	01 e0       	ldi	r16, 0x01	; 1
    54e0:	ee 24       	eor	r14, r14
    54e2:	e3 94       	inc	r14
    54e4:	cc 24       	eor	r12, r12
    54e6:	c3 94       	inc	r12
    54e8:	aa 24       	eor	r10, r10
    54ea:	a3 94       	inc	r10
    54ec:	0e 94 09 21 	call	0x4212	; 0x4212 <SevenSegment_Display>
    54f0:	fe 01       	movw	r30, r28
    54f2:	e1 5a       	subi	r30, 0xA1	; 161
    54f4:	ff 4f       	sbci	r31, 0xFF	; 255
    54f6:	80 e0       	ldi	r24, 0x00	; 0
    54f8:	90 e0       	ldi	r25, 0x00	; 0
    54fa:	a8 e4       	ldi	r26, 0x48	; 72
    54fc:	b2 e4       	ldi	r27, 0x42	; 66
    54fe:	80 83       	st	Z, r24
    5500:	91 83       	std	Z+1, r25	; 0x01
    5502:	a2 83       	std	Z+2, r26	; 0x02
    5504:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5506:	8e 01       	movw	r16, r28
    5508:	05 5a       	subi	r16, 0xA5	; 165
    550a:	1f 4f       	sbci	r17, 0xFF	; 255
    550c:	fe 01       	movw	r30, r28
    550e:	e1 5a       	subi	r30, 0xA1	; 161
    5510:	ff 4f       	sbci	r31, 0xFF	; 255
    5512:	60 81       	ld	r22, Z
    5514:	71 81       	ldd	r23, Z+1	; 0x01
    5516:	82 81       	ldd	r24, Z+2	; 0x02
    5518:	93 81       	ldd	r25, Z+3	; 0x03
    551a:	20 e0       	ldi	r18, 0x00	; 0
    551c:	30 e0       	ldi	r19, 0x00	; 0
    551e:	4a e7       	ldi	r20, 0x7A	; 122
    5520:	55 e4       	ldi	r21, 0x45	; 69
    5522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5526:	dc 01       	movw	r26, r24
    5528:	cb 01       	movw	r24, r22
    552a:	f8 01       	movw	r30, r16
    552c:	80 83       	st	Z, r24
    552e:	91 83       	std	Z+1, r25	; 0x01
    5530:	a2 83       	std	Z+2, r26	; 0x02
    5532:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5534:	fe 01       	movw	r30, r28
    5536:	e5 5a       	subi	r30, 0xA5	; 165
    5538:	ff 4f       	sbci	r31, 0xFF	; 255
    553a:	60 81       	ld	r22, Z
    553c:	71 81       	ldd	r23, Z+1	; 0x01
    553e:	82 81       	ldd	r24, Z+2	; 0x02
    5540:	93 81       	ldd	r25, Z+3	; 0x03
    5542:	20 e0       	ldi	r18, 0x00	; 0
    5544:	30 e0       	ldi	r19, 0x00	; 0
    5546:	40 e8       	ldi	r20, 0x80	; 128
    5548:	5f e3       	ldi	r21, 0x3F	; 63
    554a:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    554e:	88 23       	and	r24, r24
    5550:	44 f4       	brge	.+16     	; 0x5562 <SevenSegment_FromAToH+0x22c>
		__ticks = 1;
    5552:	fe 01       	movw	r30, r28
    5554:	e7 5a       	subi	r30, 0xA7	; 167
    5556:	ff 4f       	sbci	r31, 0xFF	; 255
    5558:	81 e0       	ldi	r24, 0x01	; 1
    555a:	90 e0       	ldi	r25, 0x00	; 0
    555c:	91 83       	std	Z+1, r25	; 0x01
    555e:	80 83       	st	Z, r24
    5560:	64 c0       	rjmp	.+200    	; 0x562a <SevenSegment_FromAToH+0x2f4>
	else if (__tmp > 65535)
    5562:	fe 01       	movw	r30, r28
    5564:	e5 5a       	subi	r30, 0xA5	; 165
    5566:	ff 4f       	sbci	r31, 0xFF	; 255
    5568:	60 81       	ld	r22, Z
    556a:	71 81       	ldd	r23, Z+1	; 0x01
    556c:	82 81       	ldd	r24, Z+2	; 0x02
    556e:	93 81       	ldd	r25, Z+3	; 0x03
    5570:	20 e0       	ldi	r18, 0x00	; 0
    5572:	3f ef       	ldi	r19, 0xFF	; 255
    5574:	4f e7       	ldi	r20, 0x7F	; 127
    5576:	57 e4       	ldi	r21, 0x47	; 71
    5578:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    557c:	18 16       	cp	r1, r24
    557e:	0c f0       	brlt	.+2      	; 0x5582 <SevenSegment_FromAToH+0x24c>
    5580:	43 c0       	rjmp	.+134    	; 0x5608 <SevenSegment_FromAToH+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5582:	fe 01       	movw	r30, r28
    5584:	e1 5a       	subi	r30, 0xA1	; 161
    5586:	ff 4f       	sbci	r31, 0xFF	; 255
    5588:	60 81       	ld	r22, Z
    558a:	71 81       	ldd	r23, Z+1	; 0x01
    558c:	82 81       	ldd	r24, Z+2	; 0x02
    558e:	93 81       	ldd	r25, Z+3	; 0x03
    5590:	20 e0       	ldi	r18, 0x00	; 0
    5592:	30 e0       	ldi	r19, 0x00	; 0
    5594:	40 e2       	ldi	r20, 0x20	; 32
    5596:	51 e4       	ldi	r21, 0x41	; 65
    5598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    559c:	dc 01       	movw	r26, r24
    559e:	cb 01       	movw	r24, r22
    55a0:	8e 01       	movw	r16, r28
    55a2:	07 5a       	subi	r16, 0xA7	; 167
    55a4:	1f 4f       	sbci	r17, 0xFF	; 255
    55a6:	bc 01       	movw	r22, r24
    55a8:	cd 01       	movw	r24, r26
    55aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55ae:	dc 01       	movw	r26, r24
    55b0:	cb 01       	movw	r24, r22
    55b2:	f8 01       	movw	r30, r16
    55b4:	91 83       	std	Z+1, r25	; 0x01
    55b6:	80 83       	st	Z, r24
    55b8:	1f c0       	rjmp	.+62     	; 0x55f8 <SevenSegment_FromAToH+0x2c2>
    55ba:	fe 01       	movw	r30, r28
    55bc:	e9 5a       	subi	r30, 0xA9	; 169
    55be:	ff 4f       	sbci	r31, 0xFF	; 255
    55c0:	80 e9       	ldi	r24, 0x90	; 144
    55c2:	91 e0       	ldi	r25, 0x01	; 1
    55c4:	91 83       	std	Z+1, r25	; 0x01
    55c6:	80 83       	st	Z, r24
    55c8:	fe 01       	movw	r30, r28
    55ca:	e9 5a       	subi	r30, 0xA9	; 169
    55cc:	ff 4f       	sbci	r31, 0xFF	; 255
    55ce:	80 81       	ld	r24, Z
    55d0:	91 81       	ldd	r25, Z+1	; 0x01
    55d2:	01 97       	sbiw	r24, 0x01	; 1
    55d4:	f1 f7       	brne	.-4      	; 0x55d2 <SevenSegment_FromAToH+0x29c>
    55d6:	fe 01       	movw	r30, r28
    55d8:	e9 5a       	subi	r30, 0xA9	; 169
    55da:	ff 4f       	sbci	r31, 0xFF	; 255
    55dc:	91 83       	std	Z+1, r25	; 0x01
    55de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55e0:	de 01       	movw	r26, r28
    55e2:	a7 5a       	subi	r26, 0xA7	; 167
    55e4:	bf 4f       	sbci	r27, 0xFF	; 255
    55e6:	fe 01       	movw	r30, r28
    55e8:	e7 5a       	subi	r30, 0xA7	; 167
    55ea:	ff 4f       	sbci	r31, 0xFF	; 255
    55ec:	80 81       	ld	r24, Z
    55ee:	91 81       	ldd	r25, Z+1	; 0x01
    55f0:	01 97       	sbiw	r24, 0x01	; 1
    55f2:	11 96       	adiw	r26, 0x01	; 1
    55f4:	9c 93       	st	X, r25
    55f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55f8:	fe 01       	movw	r30, r28
    55fa:	e7 5a       	subi	r30, 0xA7	; 167
    55fc:	ff 4f       	sbci	r31, 0xFF	; 255
    55fe:	80 81       	ld	r24, Z
    5600:	91 81       	ldd	r25, Z+1	; 0x01
    5602:	00 97       	sbiw	r24, 0x00	; 0
    5604:	d1 f6       	brne	.-76     	; 0x55ba <SevenSegment_FromAToH+0x284>
    5606:	27 c0       	rjmp	.+78     	; 0x5656 <SevenSegment_FromAToH+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5608:	8e 01       	movw	r16, r28
    560a:	07 5a       	subi	r16, 0xA7	; 167
    560c:	1f 4f       	sbci	r17, 0xFF	; 255
    560e:	fe 01       	movw	r30, r28
    5610:	e5 5a       	subi	r30, 0xA5	; 165
    5612:	ff 4f       	sbci	r31, 0xFF	; 255
    5614:	60 81       	ld	r22, Z
    5616:	71 81       	ldd	r23, Z+1	; 0x01
    5618:	82 81       	ldd	r24, Z+2	; 0x02
    561a:	93 81       	ldd	r25, Z+3	; 0x03
    561c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5620:	dc 01       	movw	r26, r24
    5622:	cb 01       	movw	r24, r22
    5624:	f8 01       	movw	r30, r16
    5626:	91 83       	std	Z+1, r25	; 0x01
    5628:	80 83       	st	Z, r24
    562a:	de 01       	movw	r26, r28
    562c:	ab 5a       	subi	r26, 0xAB	; 171
    562e:	bf 4f       	sbci	r27, 0xFF	; 255
    5630:	fe 01       	movw	r30, r28
    5632:	e7 5a       	subi	r30, 0xA7	; 167
    5634:	ff 4f       	sbci	r31, 0xFF	; 255
    5636:	80 81       	ld	r24, Z
    5638:	91 81       	ldd	r25, Z+1	; 0x01
    563a:	8d 93       	st	X+, r24
    563c:	9c 93       	st	X, r25
    563e:	fe 01       	movw	r30, r28
    5640:	eb 5a       	subi	r30, 0xAB	; 171
    5642:	ff 4f       	sbci	r31, 0xFF	; 255
    5644:	80 81       	ld	r24, Z
    5646:	91 81       	ldd	r25, Z+1	; 0x01
    5648:	01 97       	sbiw	r24, 0x01	; 1
    564a:	f1 f7       	brne	.-4      	; 0x5648 <SevenSegment_FromAToH+0x312>
    564c:	fe 01       	movw	r30, r28
    564e:	eb 5a       	subi	r30, 0xAB	; 171
    5650:	ff 4f       	sbci	r31, 0xFF	; 255
    5652:	91 83       	std	Z+1, r25	; 0x01
    5654:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(2, 1, 0, 0, 1, 1, 1, 0); // C
    5656:	82 e0       	ldi	r24, 0x02	; 2
    5658:	61 e0       	ldi	r22, 0x01	; 1
    565a:	40 e0       	ldi	r20, 0x00	; 0
    565c:	20 e0       	ldi	r18, 0x00	; 0
    565e:	01 e0       	ldi	r16, 0x01	; 1
    5660:	ee 24       	eor	r14, r14
    5662:	e3 94       	inc	r14
    5664:	cc 24       	eor	r12, r12
    5666:	c3 94       	inc	r12
    5668:	aa 24       	eor	r10, r10
    566a:	0e 94 09 21 	call	0x4212	; 0x4212 <SevenSegment_Display>
    566e:	fe 01       	movw	r30, r28
    5670:	ef 5a       	subi	r30, 0xAF	; 175
    5672:	ff 4f       	sbci	r31, 0xFF	; 255
    5674:	80 e0       	ldi	r24, 0x00	; 0
    5676:	90 e0       	ldi	r25, 0x00	; 0
    5678:	a8 e4       	ldi	r26, 0x48	; 72
    567a:	b2 e4       	ldi	r27, 0x42	; 66
    567c:	80 83       	st	Z, r24
    567e:	91 83       	std	Z+1, r25	; 0x01
    5680:	a2 83       	std	Z+2, r26	; 0x02
    5682:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5684:	8e 01       	movw	r16, r28
    5686:	03 5b       	subi	r16, 0xB3	; 179
    5688:	1f 4f       	sbci	r17, 0xFF	; 255
    568a:	fe 01       	movw	r30, r28
    568c:	ef 5a       	subi	r30, 0xAF	; 175
    568e:	ff 4f       	sbci	r31, 0xFF	; 255
    5690:	60 81       	ld	r22, Z
    5692:	71 81       	ldd	r23, Z+1	; 0x01
    5694:	82 81       	ldd	r24, Z+2	; 0x02
    5696:	93 81       	ldd	r25, Z+3	; 0x03
    5698:	20 e0       	ldi	r18, 0x00	; 0
    569a:	30 e0       	ldi	r19, 0x00	; 0
    569c:	4a e7       	ldi	r20, 0x7A	; 122
    569e:	55 e4       	ldi	r21, 0x45	; 69
    56a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56a4:	dc 01       	movw	r26, r24
    56a6:	cb 01       	movw	r24, r22
    56a8:	f8 01       	movw	r30, r16
    56aa:	80 83       	st	Z, r24
    56ac:	91 83       	std	Z+1, r25	; 0x01
    56ae:	a2 83       	std	Z+2, r26	; 0x02
    56b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    56b2:	fe 01       	movw	r30, r28
    56b4:	e3 5b       	subi	r30, 0xB3	; 179
    56b6:	ff 4f       	sbci	r31, 0xFF	; 255
    56b8:	60 81       	ld	r22, Z
    56ba:	71 81       	ldd	r23, Z+1	; 0x01
    56bc:	82 81       	ldd	r24, Z+2	; 0x02
    56be:	93 81       	ldd	r25, Z+3	; 0x03
    56c0:	20 e0       	ldi	r18, 0x00	; 0
    56c2:	30 e0       	ldi	r19, 0x00	; 0
    56c4:	40 e8       	ldi	r20, 0x80	; 128
    56c6:	5f e3       	ldi	r21, 0x3F	; 63
    56c8:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    56cc:	88 23       	and	r24, r24
    56ce:	44 f4       	brge	.+16     	; 0x56e0 <SevenSegment_FromAToH+0x3aa>
		__ticks = 1;
    56d0:	fe 01       	movw	r30, r28
    56d2:	e5 5b       	subi	r30, 0xB5	; 181
    56d4:	ff 4f       	sbci	r31, 0xFF	; 255
    56d6:	81 e0       	ldi	r24, 0x01	; 1
    56d8:	90 e0       	ldi	r25, 0x00	; 0
    56da:	91 83       	std	Z+1, r25	; 0x01
    56dc:	80 83       	st	Z, r24
    56de:	64 c0       	rjmp	.+200    	; 0x57a8 <SevenSegment_FromAToH+0x472>
	else if (__tmp > 65535)
    56e0:	fe 01       	movw	r30, r28
    56e2:	e3 5b       	subi	r30, 0xB3	; 179
    56e4:	ff 4f       	sbci	r31, 0xFF	; 255
    56e6:	60 81       	ld	r22, Z
    56e8:	71 81       	ldd	r23, Z+1	; 0x01
    56ea:	82 81       	ldd	r24, Z+2	; 0x02
    56ec:	93 81       	ldd	r25, Z+3	; 0x03
    56ee:	20 e0       	ldi	r18, 0x00	; 0
    56f0:	3f ef       	ldi	r19, 0xFF	; 255
    56f2:	4f e7       	ldi	r20, 0x7F	; 127
    56f4:	57 e4       	ldi	r21, 0x47	; 71
    56f6:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    56fa:	18 16       	cp	r1, r24
    56fc:	0c f0       	brlt	.+2      	; 0x5700 <SevenSegment_FromAToH+0x3ca>
    56fe:	43 c0       	rjmp	.+134    	; 0x5786 <SevenSegment_FromAToH+0x450>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5700:	fe 01       	movw	r30, r28
    5702:	ef 5a       	subi	r30, 0xAF	; 175
    5704:	ff 4f       	sbci	r31, 0xFF	; 255
    5706:	60 81       	ld	r22, Z
    5708:	71 81       	ldd	r23, Z+1	; 0x01
    570a:	82 81       	ldd	r24, Z+2	; 0x02
    570c:	93 81       	ldd	r25, Z+3	; 0x03
    570e:	20 e0       	ldi	r18, 0x00	; 0
    5710:	30 e0       	ldi	r19, 0x00	; 0
    5712:	40 e2       	ldi	r20, 0x20	; 32
    5714:	51 e4       	ldi	r21, 0x41	; 65
    5716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    571a:	dc 01       	movw	r26, r24
    571c:	cb 01       	movw	r24, r22
    571e:	8e 01       	movw	r16, r28
    5720:	05 5b       	subi	r16, 0xB5	; 181
    5722:	1f 4f       	sbci	r17, 0xFF	; 255
    5724:	bc 01       	movw	r22, r24
    5726:	cd 01       	movw	r24, r26
    5728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    572c:	dc 01       	movw	r26, r24
    572e:	cb 01       	movw	r24, r22
    5730:	f8 01       	movw	r30, r16
    5732:	91 83       	std	Z+1, r25	; 0x01
    5734:	80 83       	st	Z, r24
    5736:	1f c0       	rjmp	.+62     	; 0x5776 <SevenSegment_FromAToH+0x440>
    5738:	fe 01       	movw	r30, r28
    573a:	e7 5b       	subi	r30, 0xB7	; 183
    573c:	ff 4f       	sbci	r31, 0xFF	; 255
    573e:	80 e9       	ldi	r24, 0x90	; 144
    5740:	91 e0       	ldi	r25, 0x01	; 1
    5742:	91 83       	std	Z+1, r25	; 0x01
    5744:	80 83       	st	Z, r24
    5746:	fe 01       	movw	r30, r28
    5748:	e7 5b       	subi	r30, 0xB7	; 183
    574a:	ff 4f       	sbci	r31, 0xFF	; 255
    574c:	80 81       	ld	r24, Z
    574e:	91 81       	ldd	r25, Z+1	; 0x01
    5750:	01 97       	sbiw	r24, 0x01	; 1
    5752:	f1 f7       	brne	.-4      	; 0x5750 <SevenSegment_FromAToH+0x41a>
    5754:	fe 01       	movw	r30, r28
    5756:	e7 5b       	subi	r30, 0xB7	; 183
    5758:	ff 4f       	sbci	r31, 0xFF	; 255
    575a:	91 83       	std	Z+1, r25	; 0x01
    575c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    575e:	de 01       	movw	r26, r28
    5760:	a5 5b       	subi	r26, 0xB5	; 181
    5762:	bf 4f       	sbci	r27, 0xFF	; 255
    5764:	fe 01       	movw	r30, r28
    5766:	e5 5b       	subi	r30, 0xB5	; 181
    5768:	ff 4f       	sbci	r31, 0xFF	; 255
    576a:	80 81       	ld	r24, Z
    576c:	91 81       	ldd	r25, Z+1	; 0x01
    576e:	01 97       	sbiw	r24, 0x01	; 1
    5770:	11 96       	adiw	r26, 0x01	; 1
    5772:	9c 93       	st	X, r25
    5774:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5776:	fe 01       	movw	r30, r28
    5778:	e5 5b       	subi	r30, 0xB5	; 181
    577a:	ff 4f       	sbci	r31, 0xFF	; 255
    577c:	80 81       	ld	r24, Z
    577e:	91 81       	ldd	r25, Z+1	; 0x01
    5780:	00 97       	sbiw	r24, 0x00	; 0
    5782:	d1 f6       	brne	.-76     	; 0x5738 <SevenSegment_FromAToH+0x402>
    5784:	27 c0       	rjmp	.+78     	; 0x57d4 <SevenSegment_FromAToH+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5786:	8e 01       	movw	r16, r28
    5788:	05 5b       	subi	r16, 0xB5	; 181
    578a:	1f 4f       	sbci	r17, 0xFF	; 255
    578c:	fe 01       	movw	r30, r28
    578e:	e3 5b       	subi	r30, 0xB3	; 179
    5790:	ff 4f       	sbci	r31, 0xFF	; 255
    5792:	60 81       	ld	r22, Z
    5794:	71 81       	ldd	r23, Z+1	; 0x01
    5796:	82 81       	ldd	r24, Z+2	; 0x02
    5798:	93 81       	ldd	r25, Z+3	; 0x03
    579a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    579e:	dc 01       	movw	r26, r24
    57a0:	cb 01       	movw	r24, r22
    57a2:	f8 01       	movw	r30, r16
    57a4:	91 83       	std	Z+1, r25	; 0x01
    57a6:	80 83       	st	Z, r24
    57a8:	de 01       	movw	r26, r28
    57aa:	a9 5b       	subi	r26, 0xB9	; 185
    57ac:	bf 4f       	sbci	r27, 0xFF	; 255
    57ae:	fe 01       	movw	r30, r28
    57b0:	e5 5b       	subi	r30, 0xB5	; 181
    57b2:	ff 4f       	sbci	r31, 0xFF	; 255
    57b4:	80 81       	ld	r24, Z
    57b6:	91 81       	ldd	r25, Z+1	; 0x01
    57b8:	8d 93       	st	X+, r24
    57ba:	9c 93       	st	X, r25
    57bc:	fe 01       	movw	r30, r28
    57be:	e9 5b       	subi	r30, 0xB9	; 185
    57c0:	ff 4f       	sbci	r31, 0xFF	; 255
    57c2:	80 81       	ld	r24, Z
    57c4:	91 81       	ldd	r25, Z+1	; 0x01
    57c6:	01 97       	sbiw	r24, 0x01	; 1
    57c8:	f1 f7       	brne	.-4      	; 0x57c6 <SevenSegment_FromAToH+0x490>
    57ca:	fe 01       	movw	r30, r28
    57cc:	e9 5b       	subi	r30, 0xB9	; 185
    57ce:	ff 4f       	sbci	r31, 0xFF	; 255
    57d0:	91 83       	std	Z+1, r25	; 0x01
    57d2:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(2, 0, 1, 1, 1, 1, 0, 1); // D
    57d4:	82 e0       	ldi	r24, 0x02	; 2
    57d6:	60 e0       	ldi	r22, 0x00	; 0
    57d8:	41 e0       	ldi	r20, 0x01	; 1
    57da:	21 e0       	ldi	r18, 0x01	; 1
    57dc:	01 e0       	ldi	r16, 0x01	; 1
    57de:	ee 24       	eor	r14, r14
    57e0:	e3 94       	inc	r14
    57e2:	cc 24       	eor	r12, r12
    57e4:	aa 24       	eor	r10, r10
    57e6:	a3 94       	inc	r10
    57e8:	0e 94 09 21 	call	0x4212	; 0x4212 <SevenSegment_Display>
    57ec:	fe 01       	movw	r30, r28
    57ee:	ed 5b       	subi	r30, 0xBD	; 189
    57f0:	ff 4f       	sbci	r31, 0xFF	; 255
    57f2:	80 e0       	ldi	r24, 0x00	; 0
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	a8 e4       	ldi	r26, 0x48	; 72
    57f8:	b2 e4       	ldi	r27, 0x42	; 66
    57fa:	80 83       	st	Z, r24
    57fc:	91 83       	std	Z+1, r25	; 0x01
    57fe:	a2 83       	std	Z+2, r26	; 0x02
    5800:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5802:	8e 01       	movw	r16, r28
    5804:	01 5c       	subi	r16, 0xC1	; 193
    5806:	1f 4f       	sbci	r17, 0xFF	; 255
    5808:	fe 01       	movw	r30, r28
    580a:	ed 5b       	subi	r30, 0xBD	; 189
    580c:	ff 4f       	sbci	r31, 0xFF	; 255
    580e:	60 81       	ld	r22, Z
    5810:	71 81       	ldd	r23, Z+1	; 0x01
    5812:	82 81       	ldd	r24, Z+2	; 0x02
    5814:	93 81       	ldd	r25, Z+3	; 0x03
    5816:	20 e0       	ldi	r18, 0x00	; 0
    5818:	30 e0       	ldi	r19, 0x00	; 0
    581a:	4a e7       	ldi	r20, 0x7A	; 122
    581c:	55 e4       	ldi	r21, 0x45	; 69
    581e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5822:	dc 01       	movw	r26, r24
    5824:	cb 01       	movw	r24, r22
    5826:	f8 01       	movw	r30, r16
    5828:	80 83       	st	Z, r24
    582a:	91 83       	std	Z+1, r25	; 0x01
    582c:	a2 83       	std	Z+2, r26	; 0x02
    582e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5830:	fe 01       	movw	r30, r28
    5832:	ff 96       	adiw	r30, 0x3f	; 63
    5834:	60 81       	ld	r22, Z
    5836:	71 81       	ldd	r23, Z+1	; 0x01
    5838:	82 81       	ldd	r24, Z+2	; 0x02
    583a:	93 81       	ldd	r25, Z+3	; 0x03
    583c:	20 e0       	ldi	r18, 0x00	; 0
    583e:	30 e0       	ldi	r19, 0x00	; 0
    5840:	40 e8       	ldi	r20, 0x80	; 128
    5842:	5f e3       	ldi	r21, 0x3F	; 63
    5844:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    5848:	88 23       	and	r24, r24
    584a:	2c f4       	brge	.+10     	; 0x5856 <SevenSegment_FromAToH+0x520>
		__ticks = 1;
    584c:	81 e0       	ldi	r24, 0x01	; 1
    584e:	90 e0       	ldi	r25, 0x00	; 0
    5850:	9e af       	std	Y+62, r25	; 0x3e
    5852:	8d af       	std	Y+61, r24	; 0x3d
    5854:	46 c0       	rjmp	.+140    	; 0x58e2 <SevenSegment_FromAToH+0x5ac>
	else if (__tmp > 65535)
    5856:	fe 01       	movw	r30, r28
    5858:	ff 96       	adiw	r30, 0x3f	; 63
    585a:	60 81       	ld	r22, Z
    585c:	71 81       	ldd	r23, Z+1	; 0x01
    585e:	82 81       	ldd	r24, Z+2	; 0x02
    5860:	93 81       	ldd	r25, Z+3	; 0x03
    5862:	20 e0       	ldi	r18, 0x00	; 0
    5864:	3f ef       	ldi	r19, 0xFF	; 255
    5866:	4f e7       	ldi	r20, 0x7F	; 127
    5868:	57 e4       	ldi	r21, 0x47	; 71
    586a:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    586e:	18 16       	cp	r1, r24
    5870:	64 f5       	brge	.+88     	; 0x58ca <SevenSegment_FromAToH+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5872:	fe 01       	movw	r30, r28
    5874:	ed 5b       	subi	r30, 0xBD	; 189
    5876:	ff 4f       	sbci	r31, 0xFF	; 255
    5878:	60 81       	ld	r22, Z
    587a:	71 81       	ldd	r23, Z+1	; 0x01
    587c:	82 81       	ldd	r24, Z+2	; 0x02
    587e:	93 81       	ldd	r25, Z+3	; 0x03
    5880:	20 e0       	ldi	r18, 0x00	; 0
    5882:	30 e0       	ldi	r19, 0x00	; 0
    5884:	40 e2       	ldi	r20, 0x20	; 32
    5886:	51 e4       	ldi	r21, 0x41	; 65
    5888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    588c:	dc 01       	movw	r26, r24
    588e:	cb 01       	movw	r24, r22
    5890:	bc 01       	movw	r22, r24
    5892:	cd 01       	movw	r24, r26
    5894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5898:	dc 01       	movw	r26, r24
    589a:	cb 01       	movw	r24, r22
    589c:	9e af       	std	Y+62, r25	; 0x3e
    589e:	8d af       	std	Y+61, r24	; 0x3d
    58a0:	0f c0       	rjmp	.+30     	; 0x58c0 <SevenSegment_FromAToH+0x58a>
    58a2:	80 e9       	ldi	r24, 0x90	; 144
    58a4:	91 e0       	ldi	r25, 0x01	; 1
    58a6:	9c af       	std	Y+60, r25	; 0x3c
    58a8:	8b af       	std	Y+59, r24	; 0x3b
    58aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    58ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    58ae:	01 97       	sbiw	r24, 0x01	; 1
    58b0:	f1 f7       	brne	.-4      	; 0x58ae <SevenSegment_FromAToH+0x578>
    58b2:	9c af       	std	Y+60, r25	; 0x3c
    58b4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    58b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    58ba:	01 97       	sbiw	r24, 0x01	; 1
    58bc:	9e af       	std	Y+62, r25	; 0x3e
    58be:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    58c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    58c4:	00 97       	sbiw	r24, 0x00	; 0
    58c6:	69 f7       	brne	.-38     	; 0x58a2 <SevenSegment_FromAToH+0x56c>
    58c8:	16 c0       	rjmp	.+44     	; 0x58f6 <SevenSegment_FromAToH+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58ca:	fe 01       	movw	r30, r28
    58cc:	ff 96       	adiw	r30, 0x3f	; 63
    58ce:	60 81       	ld	r22, Z
    58d0:	71 81       	ldd	r23, Z+1	; 0x01
    58d2:	82 81       	ldd	r24, Z+2	; 0x02
    58d4:	93 81       	ldd	r25, Z+3	; 0x03
    58d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58da:	dc 01       	movw	r26, r24
    58dc:	cb 01       	movw	r24, r22
    58de:	9e af       	std	Y+62, r25	; 0x3e
    58e0:	8d af       	std	Y+61, r24	; 0x3d
    58e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    58e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    58e6:	9a af       	std	Y+58, r25	; 0x3a
    58e8:	89 af       	std	Y+57, r24	; 0x39
    58ea:	89 ad       	ldd	r24, Y+57	; 0x39
    58ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    58ee:	01 97       	sbiw	r24, 0x01	; 1
    58f0:	f1 f7       	brne	.-4      	; 0x58ee <SevenSegment_FromAToH+0x5b8>
    58f2:	9a af       	std	Y+58, r25	; 0x3a
    58f4:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);
		SevenSegment_Display(2, 1, 0, 0, 1, 1, 1, 1); // E
    58f6:	82 e0       	ldi	r24, 0x02	; 2
    58f8:	61 e0       	ldi	r22, 0x01	; 1
    58fa:	40 e0       	ldi	r20, 0x00	; 0
    58fc:	20 e0       	ldi	r18, 0x00	; 0
    58fe:	01 e0       	ldi	r16, 0x01	; 1
    5900:	ee 24       	eor	r14, r14
    5902:	e3 94       	inc	r14
    5904:	cc 24       	eor	r12, r12
    5906:	c3 94       	inc	r12
    5908:	aa 24       	eor	r10, r10
    590a:	a3 94       	inc	r10
    590c:	0e 94 09 21 	call	0x4212	; 0x4212 <SevenSegment_Display>
    5910:	80 e0       	ldi	r24, 0x00	; 0
    5912:	90 e0       	ldi	r25, 0x00	; 0
    5914:	a8 e4       	ldi	r26, 0x48	; 72
    5916:	b2 e4       	ldi	r27, 0x42	; 66
    5918:	8d ab       	std	Y+53, r24	; 0x35
    591a:	9e ab       	std	Y+54, r25	; 0x36
    591c:	af ab       	std	Y+55, r26	; 0x37
    591e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5920:	6d a9       	ldd	r22, Y+53	; 0x35
    5922:	7e a9       	ldd	r23, Y+54	; 0x36
    5924:	8f a9       	ldd	r24, Y+55	; 0x37
    5926:	98 ad       	ldd	r25, Y+56	; 0x38
    5928:	20 e0       	ldi	r18, 0x00	; 0
    592a:	30 e0       	ldi	r19, 0x00	; 0
    592c:	4a e7       	ldi	r20, 0x7A	; 122
    592e:	55 e4       	ldi	r21, 0x45	; 69
    5930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5934:	dc 01       	movw	r26, r24
    5936:	cb 01       	movw	r24, r22
    5938:	89 ab       	std	Y+49, r24	; 0x31
    593a:	9a ab       	std	Y+50, r25	; 0x32
    593c:	ab ab       	std	Y+51, r26	; 0x33
    593e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5940:	69 a9       	ldd	r22, Y+49	; 0x31
    5942:	7a a9       	ldd	r23, Y+50	; 0x32
    5944:	8b a9       	ldd	r24, Y+51	; 0x33
    5946:	9c a9       	ldd	r25, Y+52	; 0x34
    5948:	20 e0       	ldi	r18, 0x00	; 0
    594a:	30 e0       	ldi	r19, 0x00	; 0
    594c:	40 e8       	ldi	r20, 0x80	; 128
    594e:	5f e3       	ldi	r21, 0x3F	; 63
    5950:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    5954:	88 23       	and	r24, r24
    5956:	2c f4       	brge	.+10     	; 0x5962 <SevenSegment_FromAToH+0x62c>
		__ticks = 1;
    5958:	81 e0       	ldi	r24, 0x01	; 1
    595a:	90 e0       	ldi	r25, 0x00	; 0
    595c:	98 ab       	std	Y+48, r25	; 0x30
    595e:	8f a7       	std	Y+47, r24	; 0x2f
    5960:	3f c0       	rjmp	.+126    	; 0x59e0 <SevenSegment_FromAToH+0x6aa>
	else if (__tmp > 65535)
    5962:	69 a9       	ldd	r22, Y+49	; 0x31
    5964:	7a a9       	ldd	r23, Y+50	; 0x32
    5966:	8b a9       	ldd	r24, Y+51	; 0x33
    5968:	9c a9       	ldd	r25, Y+52	; 0x34
    596a:	20 e0       	ldi	r18, 0x00	; 0
    596c:	3f ef       	ldi	r19, 0xFF	; 255
    596e:	4f e7       	ldi	r20, 0x7F	; 127
    5970:	57 e4       	ldi	r21, 0x47	; 71
    5972:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    5976:	18 16       	cp	r1, r24
    5978:	4c f5       	brge	.+82     	; 0x59cc <SevenSegment_FromAToH+0x696>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    597a:	6d a9       	ldd	r22, Y+53	; 0x35
    597c:	7e a9       	ldd	r23, Y+54	; 0x36
    597e:	8f a9       	ldd	r24, Y+55	; 0x37
    5980:	98 ad       	ldd	r25, Y+56	; 0x38
    5982:	20 e0       	ldi	r18, 0x00	; 0
    5984:	30 e0       	ldi	r19, 0x00	; 0
    5986:	40 e2       	ldi	r20, 0x20	; 32
    5988:	51 e4       	ldi	r21, 0x41	; 65
    598a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    598e:	dc 01       	movw	r26, r24
    5990:	cb 01       	movw	r24, r22
    5992:	bc 01       	movw	r22, r24
    5994:	cd 01       	movw	r24, r26
    5996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    599a:	dc 01       	movw	r26, r24
    599c:	cb 01       	movw	r24, r22
    599e:	98 ab       	std	Y+48, r25	; 0x30
    59a0:	8f a7       	std	Y+47, r24	; 0x2f
    59a2:	0f c0       	rjmp	.+30     	; 0x59c2 <SevenSegment_FromAToH+0x68c>
    59a4:	80 e9       	ldi	r24, 0x90	; 144
    59a6:	91 e0       	ldi	r25, 0x01	; 1
    59a8:	9e a7       	std	Y+46, r25	; 0x2e
    59aa:	8d a7       	std	Y+45, r24	; 0x2d
    59ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    59ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    59b0:	01 97       	sbiw	r24, 0x01	; 1
    59b2:	f1 f7       	brne	.-4      	; 0x59b0 <SevenSegment_FromAToH+0x67a>
    59b4:	9e a7       	std	Y+46, r25	; 0x2e
    59b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    59ba:	98 a9       	ldd	r25, Y+48	; 0x30
    59bc:	01 97       	sbiw	r24, 0x01	; 1
    59be:	98 ab       	std	Y+48, r25	; 0x30
    59c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    59c4:	98 a9       	ldd	r25, Y+48	; 0x30
    59c6:	00 97       	sbiw	r24, 0x00	; 0
    59c8:	69 f7       	brne	.-38     	; 0x59a4 <SevenSegment_FromAToH+0x66e>
    59ca:	14 c0       	rjmp	.+40     	; 0x59f4 <SevenSegment_FromAToH+0x6be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59cc:	69 a9       	ldd	r22, Y+49	; 0x31
    59ce:	7a a9       	ldd	r23, Y+50	; 0x32
    59d0:	8b a9       	ldd	r24, Y+51	; 0x33
    59d2:	9c a9       	ldd	r25, Y+52	; 0x34
    59d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59d8:	dc 01       	movw	r26, r24
    59da:	cb 01       	movw	r24, r22
    59dc:	98 ab       	std	Y+48, r25	; 0x30
    59de:	8f a7       	std	Y+47, r24	; 0x2f
    59e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    59e2:	98 a9       	ldd	r25, Y+48	; 0x30
    59e4:	9c a7       	std	Y+44, r25	; 0x2c
    59e6:	8b a7       	std	Y+43, r24	; 0x2b
    59e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    59ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    59ec:	01 97       	sbiw	r24, 0x01	; 1
    59ee:	f1 f7       	brne	.-4      	; 0x59ec <SevenSegment_FromAToH+0x6b6>
    59f0:	9c a7       	std	Y+44, r25	; 0x2c
    59f2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		SevenSegment_Display(2, 1, 0, 0, 0, 1, 1, 1); // F
    59f4:	82 e0       	ldi	r24, 0x02	; 2
    59f6:	61 e0       	ldi	r22, 0x01	; 1
    59f8:	40 e0       	ldi	r20, 0x00	; 0
    59fa:	20 e0       	ldi	r18, 0x00	; 0
    59fc:	00 e0       	ldi	r16, 0x00	; 0
    59fe:	ee 24       	eor	r14, r14
    5a00:	e3 94       	inc	r14
    5a02:	cc 24       	eor	r12, r12
    5a04:	c3 94       	inc	r12
    5a06:	aa 24       	eor	r10, r10
    5a08:	a3 94       	inc	r10
    5a0a:	0e 94 09 21 	call	0x4212	; 0x4212 <SevenSegment_Display>
    5a0e:	80 e0       	ldi	r24, 0x00	; 0
    5a10:	90 e0       	ldi	r25, 0x00	; 0
    5a12:	a8 e4       	ldi	r26, 0x48	; 72
    5a14:	b2 e4       	ldi	r27, 0x42	; 66
    5a16:	8f a3       	std	Y+39, r24	; 0x27
    5a18:	98 a7       	std	Y+40, r25	; 0x28
    5a1a:	a9 a7       	std	Y+41, r26	; 0x29
    5a1c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a1e:	6f a1       	ldd	r22, Y+39	; 0x27
    5a20:	78 a5       	ldd	r23, Y+40	; 0x28
    5a22:	89 a5       	ldd	r24, Y+41	; 0x29
    5a24:	9a a5       	ldd	r25, Y+42	; 0x2a
    5a26:	20 e0       	ldi	r18, 0x00	; 0
    5a28:	30 e0       	ldi	r19, 0x00	; 0
    5a2a:	4a e7       	ldi	r20, 0x7A	; 122
    5a2c:	55 e4       	ldi	r21, 0x45	; 69
    5a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a32:	dc 01       	movw	r26, r24
    5a34:	cb 01       	movw	r24, r22
    5a36:	8b a3       	std	Y+35, r24	; 0x23
    5a38:	9c a3       	std	Y+36, r25	; 0x24
    5a3a:	ad a3       	std	Y+37, r26	; 0x25
    5a3c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5a3e:	6b a1       	ldd	r22, Y+35	; 0x23
    5a40:	7c a1       	ldd	r23, Y+36	; 0x24
    5a42:	8d a1       	ldd	r24, Y+37	; 0x25
    5a44:	9e a1       	ldd	r25, Y+38	; 0x26
    5a46:	20 e0       	ldi	r18, 0x00	; 0
    5a48:	30 e0       	ldi	r19, 0x00	; 0
    5a4a:	40 e8       	ldi	r20, 0x80	; 128
    5a4c:	5f e3       	ldi	r21, 0x3F	; 63
    5a4e:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    5a52:	88 23       	and	r24, r24
    5a54:	2c f4       	brge	.+10     	; 0x5a60 <SevenSegment_FromAToH+0x72a>
		__ticks = 1;
    5a56:	81 e0       	ldi	r24, 0x01	; 1
    5a58:	90 e0       	ldi	r25, 0x00	; 0
    5a5a:	9a a3       	std	Y+34, r25	; 0x22
    5a5c:	89 a3       	std	Y+33, r24	; 0x21
    5a5e:	3f c0       	rjmp	.+126    	; 0x5ade <SevenSegment_FromAToH+0x7a8>
	else if (__tmp > 65535)
    5a60:	6b a1       	ldd	r22, Y+35	; 0x23
    5a62:	7c a1       	ldd	r23, Y+36	; 0x24
    5a64:	8d a1       	ldd	r24, Y+37	; 0x25
    5a66:	9e a1       	ldd	r25, Y+38	; 0x26
    5a68:	20 e0       	ldi	r18, 0x00	; 0
    5a6a:	3f ef       	ldi	r19, 0xFF	; 255
    5a6c:	4f e7       	ldi	r20, 0x7F	; 127
    5a6e:	57 e4       	ldi	r21, 0x47	; 71
    5a70:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    5a74:	18 16       	cp	r1, r24
    5a76:	4c f5       	brge	.+82     	; 0x5aca <SevenSegment_FromAToH+0x794>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a78:	6f a1       	ldd	r22, Y+39	; 0x27
    5a7a:	78 a5       	ldd	r23, Y+40	; 0x28
    5a7c:	89 a5       	ldd	r24, Y+41	; 0x29
    5a7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5a80:	20 e0       	ldi	r18, 0x00	; 0
    5a82:	30 e0       	ldi	r19, 0x00	; 0
    5a84:	40 e2       	ldi	r20, 0x20	; 32
    5a86:	51 e4       	ldi	r21, 0x41	; 65
    5a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a8c:	dc 01       	movw	r26, r24
    5a8e:	cb 01       	movw	r24, r22
    5a90:	bc 01       	movw	r22, r24
    5a92:	cd 01       	movw	r24, r26
    5a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a98:	dc 01       	movw	r26, r24
    5a9a:	cb 01       	movw	r24, r22
    5a9c:	9a a3       	std	Y+34, r25	; 0x22
    5a9e:	89 a3       	std	Y+33, r24	; 0x21
    5aa0:	0f c0       	rjmp	.+30     	; 0x5ac0 <SevenSegment_FromAToH+0x78a>
    5aa2:	80 e9       	ldi	r24, 0x90	; 144
    5aa4:	91 e0       	ldi	r25, 0x01	; 1
    5aa6:	98 a3       	std	Y+32, r25	; 0x20
    5aa8:	8f 8f       	std	Y+31, r24	; 0x1f
    5aaa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5aac:	98 a1       	ldd	r25, Y+32	; 0x20
    5aae:	01 97       	sbiw	r24, 0x01	; 1
    5ab0:	f1 f7       	brne	.-4      	; 0x5aae <SevenSegment_FromAToH+0x778>
    5ab2:	98 a3       	std	Y+32, r25	; 0x20
    5ab4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ab6:	89 a1       	ldd	r24, Y+33	; 0x21
    5ab8:	9a a1       	ldd	r25, Y+34	; 0x22
    5aba:	01 97       	sbiw	r24, 0x01	; 1
    5abc:	9a a3       	std	Y+34, r25	; 0x22
    5abe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ac0:	89 a1       	ldd	r24, Y+33	; 0x21
    5ac2:	9a a1       	ldd	r25, Y+34	; 0x22
    5ac4:	00 97       	sbiw	r24, 0x00	; 0
    5ac6:	69 f7       	brne	.-38     	; 0x5aa2 <SevenSegment_FromAToH+0x76c>
    5ac8:	14 c0       	rjmp	.+40     	; 0x5af2 <SevenSegment_FromAToH+0x7bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5aca:	6b a1       	ldd	r22, Y+35	; 0x23
    5acc:	7c a1       	ldd	r23, Y+36	; 0x24
    5ace:	8d a1       	ldd	r24, Y+37	; 0x25
    5ad0:	9e a1       	ldd	r25, Y+38	; 0x26
    5ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ad6:	dc 01       	movw	r26, r24
    5ad8:	cb 01       	movw	r24, r22
    5ada:	9a a3       	std	Y+34, r25	; 0x22
    5adc:	89 a3       	std	Y+33, r24	; 0x21
    5ade:	89 a1       	ldd	r24, Y+33	; 0x21
    5ae0:	9a a1       	ldd	r25, Y+34	; 0x22
    5ae2:	9e 8f       	std	Y+30, r25	; 0x1e
    5ae4:	8d 8f       	std	Y+29, r24	; 0x1d
    5ae6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5ae8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5aea:	01 97       	sbiw	r24, 0x01	; 1
    5aec:	f1 f7       	brne	.-4      	; 0x5aea <SevenSegment_FromAToH+0x7b4>
    5aee:	9e 8f       	std	Y+30, r25	; 0x1e
    5af0:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		SevenSegment_Display(2, 1, 0, 1, 1, 1, 1, 0); // G
    5af2:	82 e0       	ldi	r24, 0x02	; 2
    5af4:	61 e0       	ldi	r22, 0x01	; 1
    5af6:	40 e0       	ldi	r20, 0x00	; 0
    5af8:	21 e0       	ldi	r18, 0x01	; 1
    5afa:	01 e0       	ldi	r16, 0x01	; 1
    5afc:	ee 24       	eor	r14, r14
    5afe:	e3 94       	inc	r14
    5b00:	cc 24       	eor	r12, r12
    5b02:	c3 94       	inc	r12
    5b04:	aa 24       	eor	r10, r10
    5b06:	0e 94 09 21 	call	0x4212	; 0x4212 <SevenSegment_Display>
    5b0a:	80 e0       	ldi	r24, 0x00	; 0
    5b0c:	90 e0       	ldi	r25, 0x00	; 0
    5b0e:	a8 e4       	ldi	r26, 0x48	; 72
    5b10:	b2 e4       	ldi	r27, 0x42	; 66
    5b12:	89 8f       	std	Y+25, r24	; 0x19
    5b14:	9a 8f       	std	Y+26, r25	; 0x1a
    5b16:	ab 8f       	std	Y+27, r26	; 0x1b
    5b18:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b1a:	69 8d       	ldd	r22, Y+25	; 0x19
    5b1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b22:	20 e0       	ldi	r18, 0x00	; 0
    5b24:	30 e0       	ldi	r19, 0x00	; 0
    5b26:	4a e7       	ldi	r20, 0x7A	; 122
    5b28:	55 e4       	ldi	r21, 0x45	; 69
    5b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b2e:	dc 01       	movw	r26, r24
    5b30:	cb 01       	movw	r24, r22
    5b32:	8d 8b       	std	Y+21, r24	; 0x15
    5b34:	9e 8b       	std	Y+22, r25	; 0x16
    5b36:	af 8b       	std	Y+23, r26	; 0x17
    5b38:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5b3a:	6d 89       	ldd	r22, Y+21	; 0x15
    5b3c:	7e 89       	ldd	r23, Y+22	; 0x16
    5b3e:	8f 89       	ldd	r24, Y+23	; 0x17
    5b40:	98 8d       	ldd	r25, Y+24	; 0x18
    5b42:	20 e0       	ldi	r18, 0x00	; 0
    5b44:	30 e0       	ldi	r19, 0x00	; 0
    5b46:	40 e8       	ldi	r20, 0x80	; 128
    5b48:	5f e3       	ldi	r21, 0x3F	; 63
    5b4a:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    5b4e:	88 23       	and	r24, r24
    5b50:	2c f4       	brge	.+10     	; 0x5b5c <SevenSegment_FromAToH+0x826>
		__ticks = 1;
    5b52:	81 e0       	ldi	r24, 0x01	; 1
    5b54:	90 e0       	ldi	r25, 0x00	; 0
    5b56:	9c 8b       	std	Y+20, r25	; 0x14
    5b58:	8b 8b       	std	Y+19, r24	; 0x13
    5b5a:	3f c0       	rjmp	.+126    	; 0x5bda <SevenSegment_FromAToH+0x8a4>
	else if (__tmp > 65535)
    5b5c:	6d 89       	ldd	r22, Y+21	; 0x15
    5b5e:	7e 89       	ldd	r23, Y+22	; 0x16
    5b60:	8f 89       	ldd	r24, Y+23	; 0x17
    5b62:	98 8d       	ldd	r25, Y+24	; 0x18
    5b64:	20 e0       	ldi	r18, 0x00	; 0
    5b66:	3f ef       	ldi	r19, 0xFF	; 255
    5b68:	4f e7       	ldi	r20, 0x7F	; 127
    5b6a:	57 e4       	ldi	r21, 0x47	; 71
    5b6c:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    5b70:	18 16       	cp	r1, r24
    5b72:	4c f5       	brge	.+82     	; 0x5bc6 <SevenSegment_FromAToH+0x890>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b74:	69 8d       	ldd	r22, Y+25	; 0x19
    5b76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b7c:	20 e0       	ldi	r18, 0x00	; 0
    5b7e:	30 e0       	ldi	r19, 0x00	; 0
    5b80:	40 e2       	ldi	r20, 0x20	; 32
    5b82:	51 e4       	ldi	r21, 0x41	; 65
    5b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b88:	dc 01       	movw	r26, r24
    5b8a:	cb 01       	movw	r24, r22
    5b8c:	bc 01       	movw	r22, r24
    5b8e:	cd 01       	movw	r24, r26
    5b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b94:	dc 01       	movw	r26, r24
    5b96:	cb 01       	movw	r24, r22
    5b98:	9c 8b       	std	Y+20, r25	; 0x14
    5b9a:	8b 8b       	std	Y+19, r24	; 0x13
    5b9c:	0f c0       	rjmp	.+30     	; 0x5bbc <SevenSegment_FromAToH+0x886>
    5b9e:	80 e9       	ldi	r24, 0x90	; 144
    5ba0:	91 e0       	ldi	r25, 0x01	; 1
    5ba2:	9a 8b       	std	Y+18, r25	; 0x12
    5ba4:	89 8b       	std	Y+17, r24	; 0x11
    5ba6:	89 89       	ldd	r24, Y+17	; 0x11
    5ba8:	9a 89       	ldd	r25, Y+18	; 0x12
    5baa:	01 97       	sbiw	r24, 0x01	; 1
    5bac:	f1 f7       	brne	.-4      	; 0x5baa <SevenSegment_FromAToH+0x874>
    5bae:	9a 8b       	std	Y+18, r25	; 0x12
    5bb0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bb2:	8b 89       	ldd	r24, Y+19	; 0x13
    5bb4:	9c 89       	ldd	r25, Y+20	; 0x14
    5bb6:	01 97       	sbiw	r24, 0x01	; 1
    5bb8:	9c 8b       	std	Y+20, r25	; 0x14
    5bba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bbc:	8b 89       	ldd	r24, Y+19	; 0x13
    5bbe:	9c 89       	ldd	r25, Y+20	; 0x14
    5bc0:	00 97       	sbiw	r24, 0x00	; 0
    5bc2:	69 f7       	brne	.-38     	; 0x5b9e <SevenSegment_FromAToH+0x868>
    5bc4:	14 c0       	rjmp	.+40     	; 0x5bee <SevenSegment_FromAToH+0x8b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bc6:	6d 89       	ldd	r22, Y+21	; 0x15
    5bc8:	7e 89       	ldd	r23, Y+22	; 0x16
    5bca:	8f 89       	ldd	r24, Y+23	; 0x17
    5bcc:	98 8d       	ldd	r25, Y+24	; 0x18
    5bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bd2:	dc 01       	movw	r26, r24
    5bd4:	cb 01       	movw	r24, r22
    5bd6:	9c 8b       	std	Y+20, r25	; 0x14
    5bd8:	8b 8b       	std	Y+19, r24	; 0x13
    5bda:	8b 89       	ldd	r24, Y+19	; 0x13
    5bdc:	9c 89       	ldd	r25, Y+20	; 0x14
    5bde:	98 8b       	std	Y+16, r25	; 0x10
    5be0:	8f 87       	std	Y+15, r24	; 0x0f
    5be2:	8f 85       	ldd	r24, Y+15	; 0x0f
    5be4:	98 89       	ldd	r25, Y+16	; 0x10
    5be6:	01 97       	sbiw	r24, 0x01	; 1
    5be8:	f1 f7       	brne	.-4      	; 0x5be6 <SevenSegment_FromAToH+0x8b0>
    5bea:	98 8b       	std	Y+16, r25	; 0x10
    5bec:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		SevenSegment_Display(2, 0, 1, 1, 0, 1, 1, 1); // H
    5bee:	82 e0       	ldi	r24, 0x02	; 2
    5bf0:	60 e0       	ldi	r22, 0x00	; 0
    5bf2:	41 e0       	ldi	r20, 0x01	; 1
    5bf4:	21 e0       	ldi	r18, 0x01	; 1
    5bf6:	00 e0       	ldi	r16, 0x00	; 0
    5bf8:	ee 24       	eor	r14, r14
    5bfa:	e3 94       	inc	r14
    5bfc:	cc 24       	eor	r12, r12
    5bfe:	c3 94       	inc	r12
    5c00:	aa 24       	eor	r10, r10
    5c02:	a3 94       	inc	r10
    5c04:	0e 94 09 21 	call	0x4212	; 0x4212 <SevenSegment_Display>
    5c08:	80 e0       	ldi	r24, 0x00	; 0
    5c0a:	90 e0       	ldi	r25, 0x00	; 0
    5c0c:	a8 e4       	ldi	r26, 0x48	; 72
    5c0e:	b2 e4       	ldi	r27, 0x42	; 66
    5c10:	8b 87       	std	Y+11, r24	; 0x0b
    5c12:	9c 87       	std	Y+12, r25	; 0x0c
    5c14:	ad 87       	std	Y+13, r26	; 0x0d
    5c16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c18:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c20:	20 e0       	ldi	r18, 0x00	; 0
    5c22:	30 e0       	ldi	r19, 0x00	; 0
    5c24:	4a e7       	ldi	r20, 0x7A	; 122
    5c26:	55 e4       	ldi	r21, 0x45	; 69
    5c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c2c:	dc 01       	movw	r26, r24
    5c2e:	cb 01       	movw	r24, r22
    5c30:	8f 83       	std	Y+7, r24	; 0x07
    5c32:	98 87       	std	Y+8, r25	; 0x08
    5c34:	a9 87       	std	Y+9, r26	; 0x09
    5c36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5c38:	6f 81       	ldd	r22, Y+7	; 0x07
    5c3a:	78 85       	ldd	r23, Y+8	; 0x08
    5c3c:	89 85       	ldd	r24, Y+9	; 0x09
    5c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c40:	20 e0       	ldi	r18, 0x00	; 0
    5c42:	30 e0       	ldi	r19, 0x00	; 0
    5c44:	40 e8       	ldi	r20, 0x80	; 128
    5c46:	5f e3       	ldi	r21, 0x3F	; 63
    5c48:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    5c4c:	88 23       	and	r24, r24
    5c4e:	2c f4       	brge	.+10     	; 0x5c5a <SevenSegment_FromAToH+0x924>
		__ticks = 1;
    5c50:	81 e0       	ldi	r24, 0x01	; 1
    5c52:	90 e0       	ldi	r25, 0x00	; 0
    5c54:	9e 83       	std	Y+6, r25	; 0x06
    5c56:	8d 83       	std	Y+5, r24	; 0x05
    5c58:	3f c0       	rjmp	.+126    	; 0x5cd8 <SevenSegment_FromAToH+0x9a2>
	else if (__tmp > 65535)
    5c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    5c5c:	78 85       	ldd	r23, Y+8	; 0x08
    5c5e:	89 85       	ldd	r24, Y+9	; 0x09
    5c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c62:	20 e0       	ldi	r18, 0x00	; 0
    5c64:	3f ef       	ldi	r19, 0xFF	; 255
    5c66:	4f e7       	ldi	r20, 0x7F	; 127
    5c68:	57 e4       	ldi	r21, 0x47	; 71
    5c6a:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    5c6e:	18 16       	cp	r1, r24
    5c70:	4c f5       	brge	.+82     	; 0x5cc4 <SevenSegment_FromAToH+0x98e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c72:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c74:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c76:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c78:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c7a:	20 e0       	ldi	r18, 0x00	; 0
    5c7c:	30 e0       	ldi	r19, 0x00	; 0
    5c7e:	40 e2       	ldi	r20, 0x20	; 32
    5c80:	51 e4       	ldi	r21, 0x41	; 65
    5c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c86:	dc 01       	movw	r26, r24
    5c88:	cb 01       	movw	r24, r22
    5c8a:	bc 01       	movw	r22, r24
    5c8c:	cd 01       	movw	r24, r26
    5c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c92:	dc 01       	movw	r26, r24
    5c94:	cb 01       	movw	r24, r22
    5c96:	9e 83       	std	Y+6, r25	; 0x06
    5c98:	8d 83       	std	Y+5, r24	; 0x05
    5c9a:	0f c0       	rjmp	.+30     	; 0x5cba <SevenSegment_FromAToH+0x984>
    5c9c:	80 e9       	ldi	r24, 0x90	; 144
    5c9e:	91 e0       	ldi	r25, 0x01	; 1
    5ca0:	9c 83       	std	Y+4, r25	; 0x04
    5ca2:	8b 83       	std	Y+3, r24	; 0x03
    5ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    5ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    5ca8:	01 97       	sbiw	r24, 0x01	; 1
    5caa:	f1 f7       	brne	.-4      	; 0x5ca8 <SevenSegment_FromAToH+0x972>
    5cac:	9c 83       	std	Y+4, r25	; 0x04
    5cae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    5cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    5cb4:	01 97       	sbiw	r24, 0x01	; 1
    5cb6:	9e 83       	std	Y+6, r25	; 0x06
    5cb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cba:	8d 81       	ldd	r24, Y+5	; 0x05
    5cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    5cbe:	00 97       	sbiw	r24, 0x00	; 0
    5cc0:	69 f7       	brne	.-38     	; 0x5c9c <SevenSegment_FromAToH+0x966>
    5cc2:	49 cb       	rjmp	.-2414   	; 0x5356 <SevenSegment_FromAToH+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cc4:	6f 81       	ldd	r22, Y+7	; 0x07
    5cc6:	78 85       	ldd	r23, Y+8	; 0x08
    5cc8:	89 85       	ldd	r24, Y+9	; 0x09
    5cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cd0:	dc 01       	movw	r26, r24
    5cd2:	cb 01       	movw	r24, r22
    5cd4:	9e 83       	std	Y+6, r25	; 0x06
    5cd6:	8d 83       	std	Y+5, r24	; 0x05
    5cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    5cda:	9e 81       	ldd	r25, Y+6	; 0x06
    5cdc:	9a 83       	std	Y+2, r25	; 0x02
    5cde:	89 83       	std	Y+1, r24	; 0x01
    5ce0:	89 81       	ldd	r24, Y+1	; 0x01
    5ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ce4:	01 97       	sbiw	r24, 0x01	; 1
    5ce6:	f1 f7       	brne	.-4      	; 0x5ce4 <SevenSegment_FromAToH+0x9ae>
    5ce8:	9a 83       	std	Y+2, r25	; 0x02
    5cea:	89 83       	std	Y+1, r24	; 0x01
    5cec:	34 cb       	rjmp	.-2456   	; 0x5356 <SevenSegment_FromAToH+0x20>

00005cee <main>:
#include "APP_Includes.h"

int main(){
    5cee:	ef 92       	push	r14
    5cf0:	ff 92       	push	r15
    5cf2:	0f 93       	push	r16
    5cf4:	1f 93       	push	r17
    5cf6:	df 93       	push	r29
    5cf8:	cf 93       	push	r28
    5cfa:	cd b7       	in	r28, 0x3d	; 61
    5cfc:	de b7       	in	r29, 0x3e	; 62
    5cfe:	a5 97       	sbiw	r28, 0x25	; 37
    5d00:	0f b6       	in	r0, 0x3f	; 63
    5d02:	f8 94       	cli
    5d04:	de bf       	out	0x3e, r29	; 62
    5d06:	0f be       	out	0x3f, r0	; 63
    5d08:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    5d0a:	0e 94 10 10 	call	0x2020	; 0x2020 <DIO_voidInit>
	LCD_init();
    5d0e:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <LCD_init>
	KPD_voidInit();
    5d12:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <KPD_voidInit>
	u8 keyPressed, intNum, i = 0;
    5d16:	1f 8e       	std	Y+31, r1	; 0x1f
	f32 calc,temp1, temp2, temp3;
	LCD_displayString("Welcome To My");
    5d18:	84 e6       	ldi	r24, 0x64	; 100
    5d1a:	90 e0       	ldi	r25, 0x00	; 0
    5d1c:	0e 94 bc 1b 	call	0x3778	; 0x3778 <LCD_displayString>
	LCD_GoToXY(1, 0);
    5d20:	81 e0       	ldi	r24, 0x01	; 1
    5d22:	60 e0       	ldi	r22, 0x00	; 0
    5d24:	0e 94 92 1b 	call	0x3724	; 0x3724 <LCD_GoToXY>
	LCD_displayString("Calculator");
    5d28:	82 e7       	ldi	r24, 0x72	; 114
    5d2a:	90 e0       	ldi	r25, 0x00	; 0
    5d2c:	0e 94 bc 1b 	call	0x3778	; 0x3778 <LCD_displayString>
    5d30:	80 e0       	ldi	r24, 0x00	; 0
    5d32:	90 e0       	ldi	r25, 0x00	; 0
    5d34:	a8 e4       	ldi	r26, 0x48	; 72
    5d36:	b2 e4       	ldi	r27, 0x42	; 66
    5d38:	8b 87       	std	Y+11, r24	; 0x0b
    5d3a:	9c 87       	std	Y+12, r25	; 0x0c
    5d3c:	ad 87       	std	Y+13, r26	; 0x0d
    5d3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d48:	20 e0       	ldi	r18, 0x00	; 0
    5d4a:	30 e0       	ldi	r19, 0x00	; 0
    5d4c:	4a e7       	ldi	r20, 0x7A	; 122
    5d4e:	55 e4       	ldi	r21, 0x45	; 69
    5d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d54:	dc 01       	movw	r26, r24
    5d56:	cb 01       	movw	r24, r22
    5d58:	8f 83       	std	Y+7, r24	; 0x07
    5d5a:	98 87       	std	Y+8, r25	; 0x08
    5d5c:	a9 87       	std	Y+9, r26	; 0x09
    5d5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5d60:	6f 81       	ldd	r22, Y+7	; 0x07
    5d62:	78 85       	ldd	r23, Y+8	; 0x08
    5d64:	89 85       	ldd	r24, Y+9	; 0x09
    5d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d68:	20 e0       	ldi	r18, 0x00	; 0
    5d6a:	30 e0       	ldi	r19, 0x00	; 0
    5d6c:	40 e8       	ldi	r20, 0x80	; 128
    5d6e:	5f e3       	ldi	r21, 0x3F	; 63
    5d70:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    5d74:	88 23       	and	r24, r24
    5d76:	2c f4       	brge	.+10     	; 0x5d82 <main+0x94>
		__ticks = 1;
    5d78:	81 e0       	ldi	r24, 0x01	; 1
    5d7a:	90 e0       	ldi	r25, 0x00	; 0
    5d7c:	9e 83       	std	Y+6, r25	; 0x06
    5d7e:	8d 83       	std	Y+5, r24	; 0x05
    5d80:	3f c0       	rjmp	.+126    	; 0x5e00 <main+0x112>
	else if (__tmp > 65535)
    5d82:	6f 81       	ldd	r22, Y+7	; 0x07
    5d84:	78 85       	ldd	r23, Y+8	; 0x08
    5d86:	89 85       	ldd	r24, Y+9	; 0x09
    5d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d8a:	20 e0       	ldi	r18, 0x00	; 0
    5d8c:	3f ef       	ldi	r19, 0xFF	; 255
    5d8e:	4f e7       	ldi	r20, 0x7F	; 127
    5d90:	57 e4       	ldi	r21, 0x47	; 71
    5d92:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    5d96:	18 16       	cp	r1, r24
    5d98:	4c f5       	brge	.+82     	; 0x5dec <main+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    5da2:	20 e0       	ldi	r18, 0x00	; 0
    5da4:	30 e0       	ldi	r19, 0x00	; 0
    5da6:	40 e2       	ldi	r20, 0x20	; 32
    5da8:	51 e4       	ldi	r21, 0x41	; 65
    5daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5dae:	dc 01       	movw	r26, r24
    5db0:	cb 01       	movw	r24, r22
    5db2:	bc 01       	movw	r22, r24
    5db4:	cd 01       	movw	r24, r26
    5db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dba:	dc 01       	movw	r26, r24
    5dbc:	cb 01       	movw	r24, r22
    5dbe:	9e 83       	std	Y+6, r25	; 0x06
    5dc0:	8d 83       	std	Y+5, r24	; 0x05
    5dc2:	0f c0       	rjmp	.+30     	; 0x5de2 <main+0xf4>
    5dc4:	80 e9       	ldi	r24, 0x90	; 144
    5dc6:	91 e0       	ldi	r25, 0x01	; 1
    5dc8:	9c 83       	std	Y+4, r25	; 0x04
    5dca:	8b 83       	std	Y+3, r24	; 0x03
    5dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    5dce:	9c 81       	ldd	r25, Y+4	; 0x04
    5dd0:	01 97       	sbiw	r24, 0x01	; 1
    5dd2:	f1 f7       	brne	.-4      	; 0x5dd0 <main+0xe2>
    5dd4:	9c 83       	std	Y+4, r25	; 0x04
    5dd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    5dda:	9e 81       	ldd	r25, Y+6	; 0x06
    5ddc:	01 97       	sbiw	r24, 0x01	; 1
    5dde:	9e 83       	std	Y+6, r25	; 0x06
    5de0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5de2:	8d 81       	ldd	r24, Y+5	; 0x05
    5de4:	9e 81       	ldd	r25, Y+6	; 0x06
    5de6:	00 97       	sbiw	r24, 0x00	; 0
    5de8:	69 f7       	brne	.-38     	; 0x5dc4 <main+0xd6>
    5dea:	14 c0       	rjmp	.+40     	; 0x5e14 <main+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5dec:	6f 81       	ldd	r22, Y+7	; 0x07
    5dee:	78 85       	ldd	r23, Y+8	; 0x08
    5df0:	89 85       	ldd	r24, Y+9	; 0x09
    5df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5df8:	dc 01       	movw	r26, r24
    5dfa:	cb 01       	movw	r24, r22
    5dfc:	9e 83       	std	Y+6, r25	; 0x06
    5dfe:	8d 83       	std	Y+5, r24	; 0x05
    5e00:	8d 81       	ldd	r24, Y+5	; 0x05
    5e02:	9e 81       	ldd	r25, Y+6	; 0x06
    5e04:	9a 83       	std	Y+2, r25	; 0x02
    5e06:	89 83       	std	Y+1, r24	; 0x01
    5e08:	89 81       	ldd	r24, Y+1	; 0x01
    5e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    5e0c:	01 97       	sbiw	r24, 0x01	; 1
    5e0e:	f1 f7       	brne	.-4      	; 0x5e0c <main+0x11e>
    5e10:	9a 83       	std	Y+2, r25	; 0x02
    5e12:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	LCD_ClearScreen();
    5e14:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <LCD_ClearScreen>
	
	while(1){
		KPD_u8GetKeyState(&keyPressed);
    5e18:	ce 01       	movw	r24, r28
    5e1a:	81 96       	adiw	r24, 0x21	; 33
    5e1c:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <KPD_u8GetKeyState>
		if(keyPressed != KPD_UnPressed){
    5e20:	89 a1       	ldd	r24, Y+33	; 0x21
    5e22:	8f 3f       	cpi	r24, 0xFF	; 255
    5e24:	c9 f3       	breq	.-14     	; 0x5e18 <main+0x12a>
			if((keyPressed >= '0') && (keyPressed <= '9')){
    5e26:	89 a1       	ldd	r24, Y+33	; 0x21
    5e28:	80 33       	cpi	r24, 0x30	; 48
    5e2a:	08 f4       	brcc	.+2      	; 0x5e2e <main+0x140>
    5e2c:	af c0       	rjmp	.+350    	; 0x5f8c <main+0x29e>
    5e2e:	89 a1       	ldd	r24, Y+33	; 0x21
    5e30:	8a 33       	cpi	r24, 0x3A	; 58
    5e32:	08 f0       	brcs	.+2      	; 0x5e36 <main+0x148>
    5e34:	ab c0       	rjmp	.+342    	; 0x5f8c <main+0x29e>
				LCD_displayCharacter(keyPressed);
    5e36:	89 a1       	ldd	r24, Y+33	; 0x21
    5e38:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayCharacter>
				i++;
    5e3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5e3e:	8f 5f       	subi	r24, 0xFF	; 255
    5e40:	8f 8f       	std	Y+31, r24	; 0x1f
				intNum = keyPressed - '0';
    5e42:	89 a1       	ldd	r24, Y+33	; 0x21
    5e44:	80 53       	subi	r24, 0x30	; 48
    5e46:	88 a3       	std	Y+32, r24	; 0x20
				
				switch(i){
    5e48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5e4a:	28 2f       	mov	r18, r24
    5e4c:	30 e0       	ldi	r19, 0x00	; 0
    5e4e:	3d a3       	std	Y+37, r19	; 0x25
    5e50:	2c a3       	std	Y+36, r18	; 0x24
    5e52:	8c a1       	ldd	r24, Y+36	; 0x24
    5e54:	9d a1       	ldd	r25, Y+37	; 0x25
    5e56:	82 30       	cpi	r24, 0x02	; 2
    5e58:	91 05       	cpc	r25, r1
    5e5a:	39 f1       	breq	.+78     	; 0x5eaa <main+0x1bc>
    5e5c:	2c a1       	ldd	r18, Y+36	; 0x24
    5e5e:	3d a1       	ldd	r19, Y+37	; 0x25
    5e60:	23 30       	cpi	r18, 0x03	; 3
    5e62:	31 05       	cpc	r19, r1
    5e64:	34 f4       	brge	.+12     	; 0x5e72 <main+0x184>
    5e66:	8c a1       	ldd	r24, Y+36	; 0x24
    5e68:	9d a1       	ldd	r25, Y+37	; 0x25
    5e6a:	81 30       	cpi	r24, 0x01	; 1
    5e6c:	91 05       	cpc	r25, r1
    5e6e:	69 f0       	breq	.+26     	; 0x5e8a <main+0x19c>
    5e70:	8d c0       	rjmp	.+282    	; 0x5f8c <main+0x29e>
    5e72:	2c a1       	ldd	r18, Y+36	; 0x24
    5e74:	3d a1       	ldd	r19, Y+37	; 0x25
    5e76:	23 30       	cpi	r18, 0x03	; 3
    5e78:	31 05       	cpc	r19, r1
    5e7a:	e9 f1       	breq	.+122    	; 0x5ef6 <main+0x208>
    5e7c:	8c a1       	ldd	r24, Y+36	; 0x24
    5e7e:	9d a1       	ldd	r25, Y+37	; 0x25
    5e80:	84 30       	cpi	r24, 0x04	; 4
    5e82:	91 05       	cpc	r25, r1
    5e84:	09 f4       	brne	.+2      	; 0x5e88 <main+0x19a>
    5e86:	5d c0       	rjmp	.+186    	; 0x5f42 <main+0x254>
    5e88:	81 c0       	rjmp	.+258    	; 0x5f8c <main+0x29e>
					case 1:
						temp1 = intNum;
    5e8a:	88 a1       	ldd	r24, Y+32	; 0x20
    5e8c:	88 2f       	mov	r24, r24
    5e8e:	90 e0       	ldi	r25, 0x00	; 0
    5e90:	a0 e0       	ldi	r26, 0x00	; 0
    5e92:	b0 e0       	ldi	r27, 0x00	; 0
    5e94:	bc 01       	movw	r22, r24
    5e96:	cd 01       	movw	r24, r26
    5e98:	0e 94 67 05 	call	0xace	; 0xace <__floatunsisf>
    5e9c:	dc 01       	movw	r26, r24
    5e9e:	cb 01       	movw	r24, r22
    5ea0:	8f 8b       	std	Y+23, r24	; 0x17
    5ea2:	98 8f       	std	Y+24, r25	; 0x18
    5ea4:	a9 8f       	std	Y+25, r26	; 0x19
    5ea6:	ba 8f       	std	Y+26, r27	; 0x1a
    5ea8:	71 c0       	rjmp	.+226    	; 0x5f8c <main+0x29e>
						break;
					case 2:
						temp1=(temp1*10)+intNum;
    5eaa:	6f 89       	ldd	r22, Y+23	; 0x17
    5eac:	78 8d       	ldd	r23, Y+24	; 0x18
    5eae:	89 8d       	ldd	r24, Y+25	; 0x19
    5eb0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5eb2:	20 e0       	ldi	r18, 0x00	; 0
    5eb4:	30 e0       	ldi	r19, 0x00	; 0
    5eb6:	40 e2       	ldi	r20, 0x20	; 32
    5eb8:	51 e4       	ldi	r21, 0x41	; 65
    5eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ebe:	dc 01       	movw	r26, r24
    5ec0:	cb 01       	movw	r24, r22
    5ec2:	7c 01       	movw	r14, r24
    5ec4:	8d 01       	movw	r16, r26
    5ec6:	88 a1       	ldd	r24, Y+32	; 0x20
    5ec8:	88 2f       	mov	r24, r24
    5eca:	90 e0       	ldi	r25, 0x00	; 0
    5ecc:	aa 27       	eor	r26, r26
    5ece:	97 fd       	sbrc	r25, 7
    5ed0:	a0 95       	com	r26
    5ed2:	ba 2f       	mov	r27, r26
    5ed4:	bc 01       	movw	r22, r24
    5ed6:	cd 01       	movw	r24, r26
    5ed8:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    5edc:	9b 01       	movw	r18, r22
    5ede:	ac 01       	movw	r20, r24
    5ee0:	c8 01       	movw	r24, r16
    5ee2:	b7 01       	movw	r22, r14
    5ee4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5ee8:	dc 01       	movw	r26, r24
    5eea:	cb 01       	movw	r24, r22
    5eec:	8f 8b       	std	Y+23, r24	; 0x17
    5eee:	98 8f       	std	Y+24, r25	; 0x18
    5ef0:	a9 8f       	std	Y+25, r26	; 0x19
    5ef2:	ba 8f       	std	Y+26, r27	; 0x1a
    5ef4:	4b c0       	rjmp	.+150    	; 0x5f8c <main+0x29e>
					    break;
					case 3:
						temp1=(temp1*100)+intNum;
    5ef6:	6f 89       	ldd	r22, Y+23	; 0x17
    5ef8:	78 8d       	ldd	r23, Y+24	; 0x18
    5efa:	89 8d       	ldd	r24, Y+25	; 0x19
    5efc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5efe:	20 e0       	ldi	r18, 0x00	; 0
    5f00:	30 e0       	ldi	r19, 0x00	; 0
    5f02:	48 ec       	ldi	r20, 0xC8	; 200
    5f04:	52 e4       	ldi	r21, 0x42	; 66
    5f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f0a:	dc 01       	movw	r26, r24
    5f0c:	cb 01       	movw	r24, r22
    5f0e:	7c 01       	movw	r14, r24
    5f10:	8d 01       	movw	r16, r26
    5f12:	88 a1       	ldd	r24, Y+32	; 0x20
    5f14:	88 2f       	mov	r24, r24
    5f16:	90 e0       	ldi	r25, 0x00	; 0
    5f18:	aa 27       	eor	r26, r26
    5f1a:	97 fd       	sbrc	r25, 7
    5f1c:	a0 95       	com	r26
    5f1e:	ba 2f       	mov	r27, r26
    5f20:	bc 01       	movw	r22, r24
    5f22:	cd 01       	movw	r24, r26
    5f24:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    5f28:	9b 01       	movw	r18, r22
    5f2a:	ac 01       	movw	r20, r24
    5f2c:	c8 01       	movw	r24, r16
    5f2e:	b7 01       	movw	r22, r14
    5f30:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5f34:	dc 01       	movw	r26, r24
    5f36:	cb 01       	movw	r24, r22
    5f38:	8f 8b       	std	Y+23, r24	; 0x17
    5f3a:	98 8f       	std	Y+24, r25	; 0x18
    5f3c:	a9 8f       	std	Y+25, r26	; 0x19
    5f3e:	ba 8f       	std	Y+26, r27	; 0x1a
    5f40:	25 c0       	rjmp	.+74     	; 0x5f8c <main+0x29e>
					    break;
					case 4:
						temp1=(temp1*1000)+intNum;
    5f42:	6f 89       	ldd	r22, Y+23	; 0x17
    5f44:	78 8d       	ldd	r23, Y+24	; 0x18
    5f46:	89 8d       	ldd	r24, Y+25	; 0x19
    5f48:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5f4a:	20 e0       	ldi	r18, 0x00	; 0
    5f4c:	30 e0       	ldi	r19, 0x00	; 0
    5f4e:	4a e7       	ldi	r20, 0x7A	; 122
    5f50:	54 e4       	ldi	r21, 0x44	; 68
    5f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f56:	dc 01       	movw	r26, r24
    5f58:	cb 01       	movw	r24, r22
    5f5a:	7c 01       	movw	r14, r24
    5f5c:	8d 01       	movw	r16, r26
    5f5e:	88 a1       	ldd	r24, Y+32	; 0x20
    5f60:	88 2f       	mov	r24, r24
    5f62:	90 e0       	ldi	r25, 0x00	; 0
    5f64:	aa 27       	eor	r26, r26
    5f66:	97 fd       	sbrc	r25, 7
    5f68:	a0 95       	com	r26
    5f6a:	ba 2f       	mov	r27, r26
    5f6c:	bc 01       	movw	r22, r24
    5f6e:	cd 01       	movw	r24, r26
    5f70:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    5f74:	9b 01       	movw	r18, r22
    5f76:	ac 01       	movw	r20, r24
    5f78:	c8 01       	movw	r24, r16
    5f7a:	b7 01       	movw	r22, r14
    5f7c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5f80:	dc 01       	movw	r26, r24
    5f82:	cb 01       	movw	r24, r22
    5f84:	8f 8b       	std	Y+23, r24	; 0x17
    5f86:	98 8f       	std	Y+24, r25	; 0x18
    5f88:	a9 8f       	std	Y+25, r26	; 0x19
    5f8a:	ba 8f       	std	Y+26, r27	; 0x1a
				}
			}
			

			
			switch(keyPressed){
    5f8c:	89 a1       	ldd	r24, Y+33	; 0x21
    5f8e:	28 2f       	mov	r18, r24
    5f90:	30 e0       	ldi	r19, 0x00	; 0
    5f92:	3b a3       	std	Y+35, r19	; 0x23
    5f94:	2a a3       	std	Y+34, r18	; 0x22
    5f96:	8a a1       	ldd	r24, Y+34	; 0x22
    5f98:	9b a1       	ldd	r25, Y+35	; 0x23
    5f9a:	8f 32       	cpi	r24, 0x2F	; 47
    5f9c:	91 05       	cpc	r25, r1
    5f9e:	09 f4       	brne	.+2      	; 0x5fa2 <main+0x2b4>
    5fa0:	77 c0       	rjmp	.+238    	; 0x6090 <main+0x3a2>
    5fa2:	2a a1       	ldd	r18, Y+34	; 0x22
    5fa4:	3b a1       	ldd	r19, Y+35	; 0x23
    5fa6:	20 33       	cpi	r18, 0x30	; 48
    5fa8:	31 05       	cpc	r19, r1
    5faa:	8c f4       	brge	.+34     	; 0x5fce <main+0x2e0>
    5fac:	8a a1       	ldd	r24, Y+34	; 0x22
    5fae:	9b a1       	ldd	r25, Y+35	; 0x23
    5fb0:	8b 32       	cpi	r24, 0x2B	; 43
    5fb2:	91 05       	cpc	r25, r1
    5fb4:	a9 f1       	breq	.+106    	; 0x6020 <main+0x332>
    5fb6:	2a a1       	ldd	r18, Y+34	; 0x22
    5fb8:	3b a1       	ldd	r19, Y+35	; 0x23
    5fba:	2d 32       	cpi	r18, 0x2D	; 45
    5fbc:	31 05       	cpc	r19, r1
    5fbe:	09 f4       	brne	.+2      	; 0x5fc2 <main+0x2d4>
    5fc0:	4b c0       	rjmp	.+150    	; 0x6058 <main+0x36a>
    5fc2:	8a a1       	ldd	r24, Y+34	; 0x22
    5fc4:	9b a1       	ldd	r25, Y+35	; 0x23
    5fc6:	8a 32       	cpi	r24, 0x2A	; 42
    5fc8:	91 05       	cpc	r25, r1
    5fca:	71 f0       	breq	.+28     	; 0x5fe8 <main+0x2fa>
    5fcc:	25 cf       	rjmp	.-438    	; 0x5e18 <main+0x12a>
    5fce:	2a a1       	ldd	r18, Y+34	; 0x22
    5fd0:	3b a1       	ldd	r19, Y+35	; 0x23
    5fd2:	2d 33       	cpi	r18, 0x3D	; 61
    5fd4:	31 05       	cpc	r19, r1
    5fd6:	09 f4       	brne	.+2      	; 0x5fda <main+0x2ec>
    5fd8:	77 c0       	rjmp	.+238    	; 0x60c8 <main+0x3da>
    5fda:	8a a1       	ldd	r24, Y+34	; 0x22
    5fdc:	9b a1       	ldd	r25, Y+35	; 0x23
    5fde:	83 34       	cpi	r24, 0x43	; 67
    5fe0:	91 05       	cpc	r25, r1
    5fe2:	09 f4       	brne	.+2      	; 0x5fe6 <main+0x2f8>
    5fe4:	50 c1       	rjmp	.+672    	; 0x6286 <main+0x598>
    5fe6:	18 cf       	rjmp	.-464    	; 0x5e18 <main+0x12a>
				case '*':
					LCD_displayCharacter(keyPressed);
    5fe8:	89 a1       	ldd	r24, Y+33	; 0x21
    5fea:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayCharacter>
					i = 0;
    5fee:	1f 8e       	std	Y+31, r1	; 0x1f
					temp2 = temp1;
    5ff0:	8f 89       	ldd	r24, Y+23	; 0x17
    5ff2:	98 8d       	ldd	r25, Y+24	; 0x18
    5ff4:	a9 8d       	ldd	r26, Y+25	; 0x19
    5ff6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5ff8:	8b 8b       	std	Y+19, r24	; 0x13
    5ffa:	9c 8b       	std	Y+20, r25	; 0x14
    5ffc:	ad 8b       	std	Y+21, r26	; 0x15
    5ffe:	be 8b       	std	Y+22, r27	; 0x16
					temp3 = keyPressed;
    6000:	89 a1       	ldd	r24, Y+33	; 0x21
    6002:	88 2f       	mov	r24, r24
    6004:	90 e0       	ldi	r25, 0x00	; 0
    6006:	a0 e0       	ldi	r26, 0x00	; 0
    6008:	b0 e0       	ldi	r27, 0x00	; 0
    600a:	bc 01       	movw	r22, r24
    600c:	cd 01       	movw	r24, r26
    600e:	0e 94 67 05 	call	0xace	; 0xace <__floatunsisf>
    6012:	dc 01       	movw	r26, r24
    6014:	cb 01       	movw	r24, r22
    6016:	8f 87       	std	Y+15, r24	; 0x0f
    6018:	98 8b       	std	Y+16, r25	; 0x10
    601a:	a9 8b       	std	Y+17, r26	; 0x11
    601c:	ba 8b       	std	Y+18, r27	; 0x12
    601e:	fc ce       	rjmp	.-520    	; 0x5e18 <main+0x12a>
					break;
				case '+':
					LCD_displayCharacter(keyPressed);
    6020:	89 a1       	ldd	r24, Y+33	; 0x21
    6022:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayCharacter>
					i = 0;
    6026:	1f 8e       	std	Y+31, r1	; 0x1f
					temp2=temp1;
    6028:	8f 89       	ldd	r24, Y+23	; 0x17
    602a:	98 8d       	ldd	r25, Y+24	; 0x18
    602c:	a9 8d       	ldd	r26, Y+25	; 0x19
    602e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6030:	8b 8b       	std	Y+19, r24	; 0x13
    6032:	9c 8b       	std	Y+20, r25	; 0x14
    6034:	ad 8b       	std	Y+21, r26	; 0x15
    6036:	be 8b       	std	Y+22, r27	; 0x16
					temp3=keyPressed;
    6038:	89 a1       	ldd	r24, Y+33	; 0x21
    603a:	88 2f       	mov	r24, r24
    603c:	90 e0       	ldi	r25, 0x00	; 0
    603e:	a0 e0       	ldi	r26, 0x00	; 0
    6040:	b0 e0       	ldi	r27, 0x00	; 0
    6042:	bc 01       	movw	r22, r24
    6044:	cd 01       	movw	r24, r26
    6046:	0e 94 67 05 	call	0xace	; 0xace <__floatunsisf>
    604a:	dc 01       	movw	r26, r24
    604c:	cb 01       	movw	r24, r22
    604e:	8f 87       	std	Y+15, r24	; 0x0f
    6050:	98 8b       	std	Y+16, r25	; 0x10
    6052:	a9 8b       	std	Y+17, r26	; 0x11
    6054:	ba 8b       	std	Y+18, r27	; 0x12
    6056:	e0 ce       	rjmp	.-576    	; 0x5e18 <main+0x12a>
				    break;
				case '-':
					LCD_displayCharacter(keyPressed);
    6058:	89 a1       	ldd	r24, Y+33	; 0x21
    605a:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayCharacter>
					i = 0;
    605e:	1f 8e       	std	Y+31, r1	; 0x1f
					temp2=temp1;
    6060:	8f 89       	ldd	r24, Y+23	; 0x17
    6062:	98 8d       	ldd	r25, Y+24	; 0x18
    6064:	a9 8d       	ldd	r26, Y+25	; 0x19
    6066:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6068:	8b 8b       	std	Y+19, r24	; 0x13
    606a:	9c 8b       	std	Y+20, r25	; 0x14
    606c:	ad 8b       	std	Y+21, r26	; 0x15
    606e:	be 8b       	std	Y+22, r27	; 0x16
					temp3=keyPressed;
    6070:	89 a1       	ldd	r24, Y+33	; 0x21
    6072:	88 2f       	mov	r24, r24
    6074:	90 e0       	ldi	r25, 0x00	; 0
    6076:	a0 e0       	ldi	r26, 0x00	; 0
    6078:	b0 e0       	ldi	r27, 0x00	; 0
    607a:	bc 01       	movw	r22, r24
    607c:	cd 01       	movw	r24, r26
    607e:	0e 94 67 05 	call	0xace	; 0xace <__floatunsisf>
    6082:	dc 01       	movw	r26, r24
    6084:	cb 01       	movw	r24, r22
    6086:	8f 87       	std	Y+15, r24	; 0x0f
    6088:	98 8b       	std	Y+16, r25	; 0x10
    608a:	a9 8b       	std	Y+17, r26	; 0x11
    608c:	ba 8b       	std	Y+18, r27	; 0x12
    608e:	c4 ce       	rjmp	.-632    	; 0x5e18 <main+0x12a>
				    break;
				case '/':
					LCD_displayCharacter(keyPressed);
    6090:	89 a1       	ldd	r24, Y+33	; 0x21
    6092:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayCharacter>
					i = 0;
    6096:	1f 8e       	std	Y+31, r1	; 0x1f
					temp2=temp1;
    6098:	8f 89       	ldd	r24, Y+23	; 0x17
    609a:	98 8d       	ldd	r25, Y+24	; 0x18
    609c:	a9 8d       	ldd	r26, Y+25	; 0x19
    609e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    60a0:	8b 8b       	std	Y+19, r24	; 0x13
    60a2:	9c 8b       	std	Y+20, r25	; 0x14
    60a4:	ad 8b       	std	Y+21, r26	; 0x15
    60a6:	be 8b       	std	Y+22, r27	; 0x16
					temp3=keyPressed;
    60a8:	89 a1       	ldd	r24, Y+33	; 0x21
    60aa:	88 2f       	mov	r24, r24
    60ac:	90 e0       	ldi	r25, 0x00	; 0
    60ae:	a0 e0       	ldi	r26, 0x00	; 0
    60b0:	b0 e0       	ldi	r27, 0x00	; 0
    60b2:	bc 01       	movw	r22, r24
    60b4:	cd 01       	movw	r24, r26
    60b6:	0e 94 67 05 	call	0xace	; 0xace <__floatunsisf>
    60ba:	dc 01       	movw	r26, r24
    60bc:	cb 01       	movw	r24, r22
    60be:	8f 87       	std	Y+15, r24	; 0x0f
    60c0:	98 8b       	std	Y+16, r25	; 0x10
    60c2:	a9 8b       	std	Y+17, r26	; 0x11
    60c4:	ba 8b       	std	Y+18, r27	; 0x12
    60c6:	a8 ce       	rjmp	.-688    	; 0x5e18 <main+0x12a>
				    break;
				case '=':
					LCD_displayCharacter(keyPressed);
    60c8:	89 a1       	ldd	r24, Y+33	; 0x21
    60ca:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_displayCharacter>
					 i=0;
    60ce:	1f 8e       	std	Y+31, r1	; 0x1f
					  if(temp3 == '*'){
    60d0:	6f 85       	ldd	r22, Y+15	; 0x0f
    60d2:	78 89       	ldd	r23, Y+16	; 0x10
    60d4:	89 89       	ldd	r24, Y+17	; 0x11
    60d6:	9a 89       	ldd	r25, Y+18	; 0x12
    60d8:	20 e0       	ldi	r18, 0x00	; 0
    60da:	30 e0       	ldi	r19, 0x00	; 0
    60dc:	48 e2       	ldi	r20, 0x28	; 40
    60de:	52 e4       	ldi	r21, 0x42	; 66
    60e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    60e4:	88 23       	and	r24, r24
    60e6:	e1 f4       	brne	.+56     	; 0x6120 <main+0x432>
						  calc = temp1 * temp2;
    60e8:	6f 89       	ldd	r22, Y+23	; 0x17
    60ea:	78 8d       	ldd	r23, Y+24	; 0x18
    60ec:	89 8d       	ldd	r24, Y+25	; 0x19
    60ee:	9a 8d       	ldd	r25, Y+26	; 0x1a
    60f0:	2b 89       	ldd	r18, Y+19	; 0x13
    60f2:	3c 89       	ldd	r19, Y+20	; 0x14
    60f4:	4d 89       	ldd	r20, Y+21	; 0x15
    60f6:	5e 89       	ldd	r21, Y+22	; 0x16
    60f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60fc:	dc 01       	movw	r26, r24
    60fe:	cb 01       	movw	r24, r22
    6100:	8b 8f       	std	Y+27, r24	; 0x1b
    6102:	9c 8f       	std	Y+28, r25	; 0x1c
    6104:	ad 8f       	std	Y+29, r26	; 0x1d
    6106:	be 8f       	std	Y+30, r27	; 0x1e
						  LCD_display_WriteNumber(calc); 
    6108:	6b 8d       	ldd	r22, Y+27	; 0x1b
    610a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    610c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    610e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6114:	dc 01       	movw	r26, r24
    6116:	cb 01       	movw	r24, r22
    6118:	bc 01       	movw	r22, r24
    611a:	cd 01       	movw	r24, r26
    611c:	0e 94 93 1a 	call	0x3526	; 0x3526 <LCD_display_WriteNumber>
						 
					  }
					  
					  if(temp3 == '+'){
    6120:	6f 85       	ldd	r22, Y+15	; 0x0f
    6122:	78 89       	ldd	r23, Y+16	; 0x10
    6124:	89 89       	ldd	r24, Y+17	; 0x11
    6126:	9a 89       	ldd	r25, Y+18	; 0x12
    6128:	20 e0       	ldi	r18, 0x00	; 0
    612a:	30 e0       	ldi	r19, 0x00	; 0
    612c:	4c e2       	ldi	r20, 0x2C	; 44
    612e:	52 e4       	ldi	r21, 0x42	; 66
    6130:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    6134:	88 23       	and	r24, r24
    6136:	e1 f4       	brne	.+56     	; 0x6170 <main+0x482>
						  calc = temp1 + temp2;
    6138:	6f 89       	ldd	r22, Y+23	; 0x17
    613a:	78 8d       	ldd	r23, Y+24	; 0x18
    613c:	89 8d       	ldd	r24, Y+25	; 0x19
    613e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6140:	2b 89       	ldd	r18, Y+19	; 0x13
    6142:	3c 89       	ldd	r19, Y+20	; 0x14
    6144:	4d 89       	ldd	r20, Y+21	; 0x15
    6146:	5e 89       	ldd	r21, Y+22	; 0x16
    6148:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    614c:	dc 01       	movw	r26, r24
    614e:	cb 01       	movw	r24, r22
    6150:	8b 8f       	std	Y+27, r24	; 0x1b
    6152:	9c 8f       	std	Y+28, r25	; 0x1c
    6154:	ad 8f       	std	Y+29, r26	; 0x1d
    6156:	be 8f       	std	Y+30, r27	; 0x1e
						  LCD_display_WriteNumber(calc); 
    6158:	6b 8d       	ldd	r22, Y+27	; 0x1b
    615a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    615c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    615e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6164:	dc 01       	movw	r26, r24
    6166:	cb 01       	movw	r24, r22
    6168:	bc 01       	movw	r22, r24
    616a:	cd 01       	movw	r24, r26
    616c:	0e 94 93 1a 	call	0x3526	; 0x3526 <LCD_display_WriteNumber>
					  }
					  
					  if(temp3 == '-'){
    6170:	6f 85       	ldd	r22, Y+15	; 0x0f
    6172:	78 89       	ldd	r23, Y+16	; 0x10
    6174:	89 89       	ldd	r24, Y+17	; 0x11
    6176:	9a 89       	ldd	r25, Y+18	; 0x12
    6178:	20 e0       	ldi	r18, 0x00	; 0
    617a:	30 e0       	ldi	r19, 0x00	; 0
    617c:	44 e3       	ldi	r20, 0x34	; 52
    617e:	52 e4       	ldi	r21, 0x42	; 66
    6180:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    6184:	88 23       	and	r24, r24
    6186:	89 f5       	brne	.+98     	; 0x61ea <main+0x4fc>
						  calc = temp2 - temp1;
    6188:	6b 89       	ldd	r22, Y+19	; 0x13
    618a:	7c 89       	ldd	r23, Y+20	; 0x14
    618c:	8d 89       	ldd	r24, Y+21	; 0x15
    618e:	9e 89       	ldd	r25, Y+22	; 0x16
    6190:	2f 89       	ldd	r18, Y+23	; 0x17
    6192:	38 8d       	ldd	r19, Y+24	; 0x18
    6194:	49 8d       	ldd	r20, Y+25	; 0x19
    6196:	5a 8d       	ldd	r21, Y+26	; 0x1a
    6198:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    619c:	dc 01       	movw	r26, r24
    619e:	cb 01       	movw	r24, r22
    61a0:	8b 8f       	std	Y+27, r24	; 0x1b
    61a2:	9c 8f       	std	Y+28, r25	; 0x1c
    61a4:	ad 8f       	std	Y+29, r26	; 0x1d
    61a6:	be 8f       	std	Y+30, r27	; 0x1e
						  if(temp2 < temp1){
    61a8:	6b 89       	ldd	r22, Y+19	; 0x13
    61aa:	7c 89       	ldd	r23, Y+20	; 0x14
    61ac:	8d 89       	ldd	r24, Y+21	; 0x15
    61ae:	9e 89       	ldd	r25, Y+22	; 0x16
    61b0:	2f 89       	ldd	r18, Y+23	; 0x17
    61b2:	38 8d       	ldd	r19, Y+24	; 0x18
    61b4:	49 8d       	ldd	r20, Y+25	; 0x19
    61b6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    61b8:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    61bc:	88 23       	and	r24, r24
    61be:	4c f4       	brge	.+18     	; 0x61d2 <main+0x4e4>
							  displayMinusNumbers(calc);
    61c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    61c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    61c4:	ad 8d       	ldd	r26, Y+29	; 0x1d
    61c6:	be 8d       	ldd	r27, Y+30	; 0x1e
    61c8:	bc 01       	movw	r22, r24
    61ca:	cd 01       	movw	r24, r26
    61cc:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <displayMinusNumbers>
    61d0:	0c c0       	rjmp	.+24     	; 0x61ea <main+0x4fc>
						  }
						  else{
							  LCD_display_WriteNumber(calc); 
    61d2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    61d4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    61d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    61d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    61da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61de:	dc 01       	movw	r26, r24
    61e0:	cb 01       	movw	r24, r22
    61e2:	bc 01       	movw	r22, r24
    61e4:	cd 01       	movw	r24, r26
    61e6:	0e 94 93 1a 	call	0x3526	; 0x3526 <LCD_display_WriteNumber>
						  }
					  }
					  if(temp3 == '/'){
    61ea:	6f 85       	ldd	r22, Y+15	; 0x0f
    61ec:	78 89       	ldd	r23, Y+16	; 0x10
    61ee:	89 89       	ldd	r24, Y+17	; 0x11
    61f0:	9a 89       	ldd	r25, Y+18	; 0x12
    61f2:	20 e0       	ldi	r18, 0x00	; 0
    61f4:	30 e0       	ldi	r19, 0x00	; 0
    61f6:	4c e3       	ldi	r20, 0x3C	; 60
    61f8:	52 e4       	ldi	r21, 0x42	; 66
    61fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    61fe:	88 23       	and	r24, r24
    6200:	49 f5       	brne	.+82     	; 0x6254 <main+0x566>
						  if(temp1 != 0){
    6202:	6f 89       	ldd	r22, Y+23	; 0x17
    6204:	78 8d       	ldd	r23, Y+24	; 0x18
    6206:	89 8d       	ldd	r24, Y+25	; 0x19
    6208:	9a 8d       	ldd	r25, Y+26	; 0x1a
    620a:	20 e0       	ldi	r18, 0x00	; 0
    620c:	30 e0       	ldi	r19, 0x00	; 0
    620e:	40 e0       	ldi	r20, 0x00	; 0
    6210:	50 e0       	ldi	r21, 0x00	; 0
    6212:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__nesf2>
    6216:	88 23       	and	r24, r24
    6218:	c9 f0       	breq	.+50     	; 0x624c <main+0x55e>
							  calc = temp2 / temp1;
    621a:	6b 89       	ldd	r22, Y+19	; 0x13
    621c:	7c 89       	ldd	r23, Y+20	; 0x14
    621e:	8d 89       	ldd	r24, Y+21	; 0x15
    6220:	9e 89       	ldd	r25, Y+22	; 0x16
    6222:	2f 89       	ldd	r18, Y+23	; 0x17
    6224:	38 8d       	ldd	r19, Y+24	; 0x18
    6226:	49 8d       	ldd	r20, Y+25	; 0x19
    6228:	5a 8d       	ldd	r21, Y+26	; 0x1a
    622a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    622e:	dc 01       	movw	r26, r24
    6230:	cb 01       	movw	r24, r22
    6232:	8b 8f       	std	Y+27, r24	; 0x1b
    6234:	9c 8f       	std	Y+28, r25	; 0x1c
    6236:	ad 8f       	std	Y+29, r26	; 0x1d
    6238:	be 8f       	std	Y+30, r27	; 0x1e
							  displayFloatOnLCD(calc);
    623a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    623c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    623e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    6240:	be 8d       	ldd	r27, Y+30	; 0x1e
    6242:	bc 01       	movw	r22, r24
    6244:	cd 01       	movw	r24, r26
    6246:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <displayFloatOnLCD>
    624a:	04 c0       	rjmp	.+8      	; 0x6254 <main+0x566>
						  }
						  else{
							  LCD_displayString("Infinity");
    624c:	8d e7       	ldi	r24, 0x7D	; 125
    624e:	90 e0       	ldi	r25, 0x00	; 0
    6250:	0e 94 bc 1b 	call	0x3778	; 0x3778 <LCD_displayString>
						  }
					  }

					  
					  
					  temp1 = 0;
    6254:	80 e0       	ldi	r24, 0x00	; 0
    6256:	90 e0       	ldi	r25, 0x00	; 0
    6258:	a0 e0       	ldi	r26, 0x00	; 0
    625a:	b0 e0       	ldi	r27, 0x00	; 0
    625c:	8f 8b       	std	Y+23, r24	; 0x17
    625e:	98 8f       	std	Y+24, r25	; 0x18
    6260:	a9 8f       	std	Y+25, r26	; 0x19
    6262:	ba 8f       	std	Y+26, r27	; 0x1a
					  temp2 = 0;
    6264:	80 e0       	ldi	r24, 0x00	; 0
    6266:	90 e0       	ldi	r25, 0x00	; 0
    6268:	a0 e0       	ldi	r26, 0x00	; 0
    626a:	b0 e0       	ldi	r27, 0x00	; 0
    626c:	8b 8b       	std	Y+19, r24	; 0x13
    626e:	9c 8b       	std	Y+20, r25	; 0x14
    6270:	ad 8b       	std	Y+21, r26	; 0x15
    6272:	be 8b       	std	Y+22, r27	; 0x16
					  temp3 = 0;
    6274:	80 e0       	ldi	r24, 0x00	; 0
    6276:	90 e0       	ldi	r25, 0x00	; 0
    6278:	a0 e0       	ldi	r26, 0x00	; 0
    627a:	b0 e0       	ldi	r27, 0x00	; 0
    627c:	8f 87       	std	Y+15, r24	; 0x0f
    627e:	98 8b       	std	Y+16, r25	; 0x10
    6280:	a9 8b       	std	Y+17, r26	; 0x11
    6282:	ba 8b       	std	Y+18, r27	; 0x12
    6284:	c9 cd       	rjmp	.-1134   	; 0x5e18 <main+0x12a>
					   break;
				case 'C':
					  i=0;
    6286:	1f 8e       	std	Y+31, r1	; 0x1f
					  LCD_ClearScreen();
    6288:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <LCD_ClearScreen>
    628c:	c5 cd       	rjmp	.-1142   	; 0x5e18 <main+0x12a>

0000628e <__divmodhi4>:
    628e:	97 fb       	bst	r25, 7
    6290:	09 2e       	mov	r0, r25
    6292:	07 26       	eor	r0, r23
    6294:	0a d0       	rcall	.+20     	; 0x62aa <__divmodhi4_neg1>
    6296:	77 fd       	sbrc	r23, 7
    6298:	04 d0       	rcall	.+8      	; 0x62a2 <__divmodhi4_neg2>
    629a:	0c d0       	rcall	.+24     	; 0x62b4 <__udivmodhi4>
    629c:	06 d0       	rcall	.+12     	; 0x62aa <__divmodhi4_neg1>
    629e:	00 20       	and	r0, r0
    62a0:	1a f4       	brpl	.+6      	; 0x62a8 <__divmodhi4_exit>

000062a2 <__divmodhi4_neg2>:
    62a2:	70 95       	com	r23
    62a4:	61 95       	neg	r22
    62a6:	7f 4f       	sbci	r23, 0xFF	; 255

000062a8 <__divmodhi4_exit>:
    62a8:	08 95       	ret

000062aa <__divmodhi4_neg1>:
    62aa:	f6 f7       	brtc	.-4      	; 0x62a8 <__divmodhi4_exit>
    62ac:	90 95       	com	r25
    62ae:	81 95       	neg	r24
    62b0:	9f 4f       	sbci	r25, 0xFF	; 255
    62b2:	08 95       	ret

000062b4 <__udivmodhi4>:
    62b4:	aa 1b       	sub	r26, r26
    62b6:	bb 1b       	sub	r27, r27
    62b8:	51 e1       	ldi	r21, 0x11	; 17
    62ba:	07 c0       	rjmp	.+14     	; 0x62ca <__udivmodhi4_ep>

000062bc <__udivmodhi4_loop>:
    62bc:	aa 1f       	adc	r26, r26
    62be:	bb 1f       	adc	r27, r27
    62c0:	a6 17       	cp	r26, r22
    62c2:	b7 07       	cpc	r27, r23
    62c4:	10 f0       	brcs	.+4      	; 0x62ca <__udivmodhi4_ep>
    62c6:	a6 1b       	sub	r26, r22
    62c8:	b7 0b       	sbc	r27, r23

000062ca <__udivmodhi4_ep>:
    62ca:	88 1f       	adc	r24, r24
    62cc:	99 1f       	adc	r25, r25
    62ce:	5a 95       	dec	r21
    62d0:	a9 f7       	brne	.-22     	; 0x62bc <__udivmodhi4_loop>
    62d2:	80 95       	com	r24
    62d4:	90 95       	com	r25
    62d6:	bc 01       	movw	r22, r24
    62d8:	cd 01       	movw	r24, r26
    62da:	08 95       	ret

000062dc <__prologue_saves__>:
    62dc:	2f 92       	push	r2
    62de:	3f 92       	push	r3
    62e0:	4f 92       	push	r4
    62e2:	5f 92       	push	r5
    62e4:	6f 92       	push	r6
    62e6:	7f 92       	push	r7
    62e8:	8f 92       	push	r8
    62ea:	9f 92       	push	r9
    62ec:	af 92       	push	r10
    62ee:	bf 92       	push	r11
    62f0:	cf 92       	push	r12
    62f2:	df 92       	push	r13
    62f4:	ef 92       	push	r14
    62f6:	ff 92       	push	r15
    62f8:	0f 93       	push	r16
    62fa:	1f 93       	push	r17
    62fc:	cf 93       	push	r28
    62fe:	df 93       	push	r29
    6300:	cd b7       	in	r28, 0x3d	; 61
    6302:	de b7       	in	r29, 0x3e	; 62
    6304:	ca 1b       	sub	r28, r26
    6306:	db 0b       	sbc	r29, r27
    6308:	0f b6       	in	r0, 0x3f	; 63
    630a:	f8 94       	cli
    630c:	de bf       	out	0x3e, r29	; 62
    630e:	0f be       	out	0x3f, r0	; 63
    6310:	cd bf       	out	0x3d, r28	; 61
    6312:	09 94       	ijmp

00006314 <__epilogue_restores__>:
    6314:	2a 88       	ldd	r2, Y+18	; 0x12
    6316:	39 88       	ldd	r3, Y+17	; 0x11
    6318:	48 88       	ldd	r4, Y+16	; 0x10
    631a:	5f 84       	ldd	r5, Y+15	; 0x0f
    631c:	6e 84       	ldd	r6, Y+14	; 0x0e
    631e:	7d 84       	ldd	r7, Y+13	; 0x0d
    6320:	8c 84       	ldd	r8, Y+12	; 0x0c
    6322:	9b 84       	ldd	r9, Y+11	; 0x0b
    6324:	aa 84       	ldd	r10, Y+10	; 0x0a
    6326:	b9 84       	ldd	r11, Y+9	; 0x09
    6328:	c8 84       	ldd	r12, Y+8	; 0x08
    632a:	df 80       	ldd	r13, Y+7	; 0x07
    632c:	ee 80       	ldd	r14, Y+6	; 0x06
    632e:	fd 80       	ldd	r15, Y+5	; 0x05
    6330:	0c 81       	ldd	r16, Y+4	; 0x04
    6332:	1b 81       	ldd	r17, Y+3	; 0x03
    6334:	aa 81       	ldd	r26, Y+2	; 0x02
    6336:	b9 81       	ldd	r27, Y+1	; 0x01
    6338:	ce 0f       	add	r28, r30
    633a:	d1 1d       	adc	r29, r1
    633c:	0f b6       	in	r0, 0x3f	; 63
    633e:	f8 94       	cli
    6340:	de bf       	out	0x3e, r29	; 62
    6342:	0f be       	out	0x3f, r0	; 63
    6344:	cd bf       	out	0x3d, r28	; 61
    6346:	ed 01       	movw	r28, r26
    6348:	08 95       	ret

0000634a <strlen>:
    634a:	fc 01       	movw	r30, r24
    634c:	01 90       	ld	r0, Z+
    634e:	00 20       	and	r0, r0
    6350:	e9 f7       	brne	.-6      	; 0x634c <strlen+0x2>
    6352:	80 95       	com	r24
    6354:	90 95       	com	r25
    6356:	8e 0f       	add	r24, r30
    6358:	9f 1f       	adc	r25, r31
    635a:	08 95       	ret

0000635c <sprintf>:
    635c:	ae e0       	ldi	r26, 0x0E	; 14
    635e:	b0 e0       	ldi	r27, 0x00	; 0
    6360:	e4 eb       	ldi	r30, 0xB4	; 180
    6362:	f1 e3       	ldi	r31, 0x31	; 49
    6364:	0c 94 7c 31 	jmp	0x62f8	; 0x62f8 <__prologue_saves__+0x1c>
    6368:	0d 89       	ldd	r16, Y+21	; 0x15
    636a:	1e 89       	ldd	r17, Y+22	; 0x16
    636c:	86 e0       	ldi	r24, 0x06	; 6
    636e:	8c 83       	std	Y+4, r24	; 0x04
    6370:	1a 83       	std	Y+2, r17	; 0x02
    6372:	09 83       	std	Y+1, r16	; 0x01
    6374:	8f ef       	ldi	r24, 0xFF	; 255
    6376:	9f e7       	ldi	r25, 0x7F	; 127
    6378:	9e 83       	std	Y+6, r25	; 0x06
    637a:	8d 83       	std	Y+5, r24	; 0x05
    637c:	9e 01       	movw	r18, r28
    637e:	27 5e       	subi	r18, 0xE7	; 231
    6380:	3f 4f       	sbci	r19, 0xFF	; 255
    6382:	ce 01       	movw	r24, r28
    6384:	01 96       	adiw	r24, 0x01	; 1
    6386:	6f 89       	ldd	r22, Y+23	; 0x17
    6388:	78 8d       	ldd	r23, Y+24	; 0x18
    638a:	a9 01       	movw	r20, r18
    638c:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <vfprintf>
    6390:	2f 81       	ldd	r18, Y+7	; 0x07
    6392:	38 85       	ldd	r19, Y+8	; 0x08
    6394:	02 0f       	add	r16, r18
    6396:	13 1f       	adc	r17, r19
    6398:	f8 01       	movw	r30, r16
    639a:	10 82       	st	Z, r1
    639c:	2e 96       	adiw	r28, 0x0e	; 14
    639e:	e4 e0       	ldi	r30, 0x04	; 4
    63a0:	0c 94 98 31 	jmp	0x6330	; 0x6330 <__epilogue_restores__+0x1c>

000063a4 <vfprintf>:
    63a4:	ab e0       	ldi	r26, 0x0B	; 11
    63a6:	b0 e0       	ldi	r27, 0x00	; 0
    63a8:	e8 ed       	ldi	r30, 0xD8	; 216
    63aa:	f1 e3       	ldi	r31, 0x31	; 49
    63ac:	0c 94 6e 31 	jmp	0x62dc	; 0x62dc <__prologue_saves__>
    63b0:	3c 01       	movw	r6, r24
    63b2:	2b 01       	movw	r4, r22
    63b4:	5a 01       	movw	r10, r20
    63b6:	fc 01       	movw	r30, r24
    63b8:	17 82       	std	Z+7, r1	; 0x07
    63ba:	16 82       	std	Z+6, r1	; 0x06
    63bc:	83 81       	ldd	r24, Z+3	; 0x03
    63be:	81 fd       	sbrc	r24, 1
    63c0:	03 c0       	rjmp	.+6      	; 0x63c8 <vfprintf+0x24>
    63c2:	6f ef       	ldi	r22, 0xFF	; 255
    63c4:	7f ef       	ldi	r23, 0xFF	; 255
    63c6:	c6 c1       	rjmp	.+908    	; 0x6754 <vfprintf+0x3b0>
    63c8:	9a e0       	ldi	r25, 0x0A	; 10
    63ca:	89 2e       	mov	r8, r25
    63cc:	1e 01       	movw	r2, r28
    63ce:	08 94       	sec
    63d0:	21 1c       	adc	r2, r1
    63d2:	31 1c       	adc	r3, r1
    63d4:	f3 01       	movw	r30, r6
    63d6:	23 81       	ldd	r18, Z+3	; 0x03
    63d8:	f2 01       	movw	r30, r4
    63da:	23 fd       	sbrc	r18, 3
    63dc:	85 91       	lpm	r24, Z+
    63de:	23 ff       	sbrs	r18, 3
    63e0:	81 91       	ld	r24, Z+
    63e2:	2f 01       	movw	r4, r30
    63e4:	88 23       	and	r24, r24
    63e6:	09 f4       	brne	.+2      	; 0x63ea <vfprintf+0x46>
    63e8:	b2 c1       	rjmp	.+868    	; 0x674e <vfprintf+0x3aa>
    63ea:	85 32       	cpi	r24, 0x25	; 37
    63ec:	39 f4       	brne	.+14     	; 0x63fc <vfprintf+0x58>
    63ee:	23 fd       	sbrc	r18, 3
    63f0:	85 91       	lpm	r24, Z+
    63f2:	23 ff       	sbrs	r18, 3
    63f4:	81 91       	ld	r24, Z+
    63f6:	2f 01       	movw	r4, r30
    63f8:	85 32       	cpi	r24, 0x25	; 37
    63fa:	29 f4       	brne	.+10     	; 0x6406 <vfprintf+0x62>
    63fc:	90 e0       	ldi	r25, 0x00	; 0
    63fe:	b3 01       	movw	r22, r6
    6400:	0e 94 c5 33 	call	0x678a	; 0x678a <fputc>
    6404:	e7 cf       	rjmp	.-50     	; 0x63d4 <vfprintf+0x30>
    6406:	98 2f       	mov	r25, r24
    6408:	ff 24       	eor	r15, r15
    640a:	ee 24       	eor	r14, r14
    640c:	99 24       	eor	r9, r9
    640e:	ff e1       	ldi	r31, 0x1F	; 31
    6410:	ff 15       	cp	r31, r15
    6412:	d0 f0       	brcs	.+52     	; 0x6448 <vfprintf+0xa4>
    6414:	9b 32       	cpi	r25, 0x2B	; 43
    6416:	69 f0       	breq	.+26     	; 0x6432 <vfprintf+0x8e>
    6418:	9c 32       	cpi	r25, 0x2C	; 44
    641a:	28 f4       	brcc	.+10     	; 0x6426 <vfprintf+0x82>
    641c:	90 32       	cpi	r25, 0x20	; 32
    641e:	59 f0       	breq	.+22     	; 0x6436 <vfprintf+0x92>
    6420:	93 32       	cpi	r25, 0x23	; 35
    6422:	91 f4       	brne	.+36     	; 0x6448 <vfprintf+0xa4>
    6424:	0e c0       	rjmp	.+28     	; 0x6442 <vfprintf+0x9e>
    6426:	9d 32       	cpi	r25, 0x2D	; 45
    6428:	49 f0       	breq	.+18     	; 0x643c <vfprintf+0x98>
    642a:	90 33       	cpi	r25, 0x30	; 48
    642c:	69 f4       	brne	.+26     	; 0x6448 <vfprintf+0xa4>
    642e:	41 e0       	ldi	r20, 0x01	; 1
    6430:	24 c0       	rjmp	.+72     	; 0x647a <vfprintf+0xd6>
    6432:	52 e0       	ldi	r21, 0x02	; 2
    6434:	f5 2a       	or	r15, r21
    6436:	84 e0       	ldi	r24, 0x04	; 4
    6438:	f8 2a       	or	r15, r24
    643a:	28 c0       	rjmp	.+80     	; 0x648c <vfprintf+0xe8>
    643c:	98 e0       	ldi	r25, 0x08	; 8
    643e:	f9 2a       	or	r15, r25
    6440:	25 c0       	rjmp	.+74     	; 0x648c <vfprintf+0xe8>
    6442:	e0 e1       	ldi	r30, 0x10	; 16
    6444:	fe 2a       	or	r15, r30
    6446:	22 c0       	rjmp	.+68     	; 0x648c <vfprintf+0xe8>
    6448:	f7 fc       	sbrc	r15, 7
    644a:	29 c0       	rjmp	.+82     	; 0x649e <vfprintf+0xfa>
    644c:	89 2f       	mov	r24, r25
    644e:	80 53       	subi	r24, 0x30	; 48
    6450:	8a 30       	cpi	r24, 0x0A	; 10
    6452:	70 f4       	brcc	.+28     	; 0x6470 <vfprintf+0xcc>
    6454:	f6 fe       	sbrs	r15, 6
    6456:	05 c0       	rjmp	.+10     	; 0x6462 <vfprintf+0xbe>
    6458:	98 9c       	mul	r9, r8
    645a:	90 2c       	mov	r9, r0
    645c:	11 24       	eor	r1, r1
    645e:	98 0e       	add	r9, r24
    6460:	15 c0       	rjmp	.+42     	; 0x648c <vfprintf+0xe8>
    6462:	e8 9c       	mul	r14, r8
    6464:	e0 2c       	mov	r14, r0
    6466:	11 24       	eor	r1, r1
    6468:	e8 0e       	add	r14, r24
    646a:	f0 e2       	ldi	r31, 0x20	; 32
    646c:	ff 2a       	or	r15, r31
    646e:	0e c0       	rjmp	.+28     	; 0x648c <vfprintf+0xe8>
    6470:	9e 32       	cpi	r25, 0x2E	; 46
    6472:	29 f4       	brne	.+10     	; 0x647e <vfprintf+0xda>
    6474:	f6 fc       	sbrc	r15, 6
    6476:	6b c1       	rjmp	.+726    	; 0x674e <vfprintf+0x3aa>
    6478:	40 e4       	ldi	r20, 0x40	; 64
    647a:	f4 2a       	or	r15, r20
    647c:	07 c0       	rjmp	.+14     	; 0x648c <vfprintf+0xe8>
    647e:	9c 36       	cpi	r25, 0x6C	; 108
    6480:	19 f4       	brne	.+6      	; 0x6488 <vfprintf+0xe4>
    6482:	50 e8       	ldi	r21, 0x80	; 128
    6484:	f5 2a       	or	r15, r21
    6486:	02 c0       	rjmp	.+4      	; 0x648c <vfprintf+0xe8>
    6488:	98 36       	cpi	r25, 0x68	; 104
    648a:	49 f4       	brne	.+18     	; 0x649e <vfprintf+0xfa>
    648c:	f2 01       	movw	r30, r4
    648e:	23 fd       	sbrc	r18, 3
    6490:	95 91       	lpm	r25, Z+
    6492:	23 ff       	sbrs	r18, 3
    6494:	91 91       	ld	r25, Z+
    6496:	2f 01       	movw	r4, r30
    6498:	99 23       	and	r25, r25
    649a:	09 f0       	breq	.+2      	; 0x649e <vfprintf+0xfa>
    649c:	b8 cf       	rjmp	.-144    	; 0x640e <vfprintf+0x6a>
    649e:	89 2f       	mov	r24, r25
    64a0:	85 54       	subi	r24, 0x45	; 69
    64a2:	83 30       	cpi	r24, 0x03	; 3
    64a4:	18 f0       	brcs	.+6      	; 0x64ac <vfprintf+0x108>
    64a6:	80 52       	subi	r24, 0x20	; 32
    64a8:	83 30       	cpi	r24, 0x03	; 3
    64aa:	38 f4       	brcc	.+14     	; 0x64ba <vfprintf+0x116>
    64ac:	44 e0       	ldi	r20, 0x04	; 4
    64ae:	50 e0       	ldi	r21, 0x00	; 0
    64b0:	a4 0e       	add	r10, r20
    64b2:	b5 1e       	adc	r11, r21
    64b4:	5f e3       	ldi	r21, 0x3F	; 63
    64b6:	59 83       	std	Y+1, r21	; 0x01
    64b8:	0f c0       	rjmp	.+30     	; 0x64d8 <vfprintf+0x134>
    64ba:	93 36       	cpi	r25, 0x63	; 99
    64bc:	31 f0       	breq	.+12     	; 0x64ca <vfprintf+0x126>
    64be:	93 37       	cpi	r25, 0x73	; 115
    64c0:	79 f0       	breq	.+30     	; 0x64e0 <vfprintf+0x13c>
    64c2:	93 35       	cpi	r25, 0x53	; 83
    64c4:	09 f0       	breq	.+2      	; 0x64c8 <vfprintf+0x124>
    64c6:	56 c0       	rjmp	.+172    	; 0x6574 <vfprintf+0x1d0>
    64c8:	20 c0       	rjmp	.+64     	; 0x650a <vfprintf+0x166>
    64ca:	f5 01       	movw	r30, r10
    64cc:	80 81       	ld	r24, Z
    64ce:	89 83       	std	Y+1, r24	; 0x01
    64d0:	42 e0       	ldi	r20, 0x02	; 2
    64d2:	50 e0       	ldi	r21, 0x00	; 0
    64d4:	a4 0e       	add	r10, r20
    64d6:	b5 1e       	adc	r11, r21
    64d8:	61 01       	movw	r12, r2
    64da:	01 e0       	ldi	r16, 0x01	; 1
    64dc:	10 e0       	ldi	r17, 0x00	; 0
    64de:	12 c0       	rjmp	.+36     	; 0x6504 <vfprintf+0x160>
    64e0:	f5 01       	movw	r30, r10
    64e2:	c0 80       	ld	r12, Z
    64e4:	d1 80       	ldd	r13, Z+1	; 0x01
    64e6:	f6 fc       	sbrc	r15, 6
    64e8:	03 c0       	rjmp	.+6      	; 0x64f0 <vfprintf+0x14c>
    64ea:	6f ef       	ldi	r22, 0xFF	; 255
    64ec:	7f ef       	ldi	r23, 0xFF	; 255
    64ee:	02 c0       	rjmp	.+4      	; 0x64f4 <vfprintf+0x150>
    64f0:	69 2d       	mov	r22, r9
    64f2:	70 e0       	ldi	r23, 0x00	; 0
    64f4:	42 e0       	ldi	r20, 0x02	; 2
    64f6:	50 e0       	ldi	r21, 0x00	; 0
    64f8:	a4 0e       	add	r10, r20
    64fa:	b5 1e       	adc	r11, r21
    64fc:	c6 01       	movw	r24, r12
    64fe:	0e 94 ba 33 	call	0x6774	; 0x6774 <strnlen>
    6502:	8c 01       	movw	r16, r24
    6504:	5f e7       	ldi	r21, 0x7F	; 127
    6506:	f5 22       	and	r15, r21
    6508:	14 c0       	rjmp	.+40     	; 0x6532 <vfprintf+0x18e>
    650a:	f5 01       	movw	r30, r10
    650c:	c0 80       	ld	r12, Z
    650e:	d1 80       	ldd	r13, Z+1	; 0x01
    6510:	f6 fc       	sbrc	r15, 6
    6512:	03 c0       	rjmp	.+6      	; 0x651a <vfprintf+0x176>
    6514:	6f ef       	ldi	r22, 0xFF	; 255
    6516:	7f ef       	ldi	r23, 0xFF	; 255
    6518:	02 c0       	rjmp	.+4      	; 0x651e <vfprintf+0x17a>
    651a:	69 2d       	mov	r22, r9
    651c:	70 e0       	ldi	r23, 0x00	; 0
    651e:	42 e0       	ldi	r20, 0x02	; 2
    6520:	50 e0       	ldi	r21, 0x00	; 0
    6522:	a4 0e       	add	r10, r20
    6524:	b5 1e       	adc	r11, r21
    6526:	c6 01       	movw	r24, r12
    6528:	0e 94 af 33 	call	0x675e	; 0x675e <strnlen_P>
    652c:	8c 01       	movw	r16, r24
    652e:	50 e8       	ldi	r21, 0x80	; 128
    6530:	f5 2a       	or	r15, r21
    6532:	f3 fe       	sbrs	r15, 3
    6534:	07 c0       	rjmp	.+14     	; 0x6544 <vfprintf+0x1a0>
    6536:	1a c0       	rjmp	.+52     	; 0x656c <vfprintf+0x1c8>
    6538:	80 e2       	ldi	r24, 0x20	; 32
    653a:	90 e0       	ldi	r25, 0x00	; 0
    653c:	b3 01       	movw	r22, r6
    653e:	0e 94 c5 33 	call	0x678a	; 0x678a <fputc>
    6542:	ea 94       	dec	r14
    6544:	8e 2d       	mov	r24, r14
    6546:	90 e0       	ldi	r25, 0x00	; 0
    6548:	08 17       	cp	r16, r24
    654a:	19 07       	cpc	r17, r25
    654c:	a8 f3       	brcs	.-22     	; 0x6538 <vfprintf+0x194>
    654e:	0e c0       	rjmp	.+28     	; 0x656c <vfprintf+0x1c8>
    6550:	f6 01       	movw	r30, r12
    6552:	f7 fc       	sbrc	r15, 7
    6554:	85 91       	lpm	r24, Z+
    6556:	f7 fe       	sbrs	r15, 7
    6558:	81 91       	ld	r24, Z+
    655a:	6f 01       	movw	r12, r30
    655c:	90 e0       	ldi	r25, 0x00	; 0
    655e:	b3 01       	movw	r22, r6
    6560:	0e 94 c5 33 	call	0x678a	; 0x678a <fputc>
    6564:	e1 10       	cpse	r14, r1
    6566:	ea 94       	dec	r14
    6568:	01 50       	subi	r16, 0x01	; 1
    656a:	10 40       	sbci	r17, 0x00	; 0
    656c:	01 15       	cp	r16, r1
    656e:	11 05       	cpc	r17, r1
    6570:	79 f7       	brne	.-34     	; 0x6550 <vfprintf+0x1ac>
    6572:	ea c0       	rjmp	.+468    	; 0x6748 <vfprintf+0x3a4>
    6574:	94 36       	cpi	r25, 0x64	; 100
    6576:	11 f0       	breq	.+4      	; 0x657c <vfprintf+0x1d8>
    6578:	99 36       	cpi	r25, 0x69	; 105
    657a:	69 f5       	brne	.+90     	; 0x65d6 <vfprintf+0x232>
    657c:	f7 fe       	sbrs	r15, 7
    657e:	08 c0       	rjmp	.+16     	; 0x6590 <vfprintf+0x1ec>
    6580:	f5 01       	movw	r30, r10
    6582:	20 81       	ld	r18, Z
    6584:	31 81       	ldd	r19, Z+1	; 0x01
    6586:	42 81       	ldd	r20, Z+2	; 0x02
    6588:	53 81       	ldd	r21, Z+3	; 0x03
    658a:	84 e0       	ldi	r24, 0x04	; 4
    658c:	90 e0       	ldi	r25, 0x00	; 0
    658e:	0a c0       	rjmp	.+20     	; 0x65a4 <vfprintf+0x200>
    6590:	f5 01       	movw	r30, r10
    6592:	80 81       	ld	r24, Z
    6594:	91 81       	ldd	r25, Z+1	; 0x01
    6596:	9c 01       	movw	r18, r24
    6598:	44 27       	eor	r20, r20
    659a:	37 fd       	sbrc	r19, 7
    659c:	40 95       	com	r20
    659e:	54 2f       	mov	r21, r20
    65a0:	82 e0       	ldi	r24, 0x02	; 2
    65a2:	90 e0       	ldi	r25, 0x00	; 0
    65a4:	a8 0e       	add	r10, r24
    65a6:	b9 1e       	adc	r11, r25
    65a8:	9f e6       	ldi	r25, 0x6F	; 111
    65aa:	f9 22       	and	r15, r25
    65ac:	57 ff       	sbrs	r21, 7
    65ae:	09 c0       	rjmp	.+18     	; 0x65c2 <vfprintf+0x21e>
    65b0:	50 95       	com	r21
    65b2:	40 95       	com	r20
    65b4:	30 95       	com	r19
    65b6:	21 95       	neg	r18
    65b8:	3f 4f       	sbci	r19, 0xFF	; 255
    65ba:	4f 4f       	sbci	r20, 0xFF	; 255
    65bc:	5f 4f       	sbci	r21, 0xFF	; 255
    65be:	e0 e8       	ldi	r30, 0x80	; 128
    65c0:	fe 2a       	or	r15, r30
    65c2:	ca 01       	movw	r24, r20
    65c4:	b9 01       	movw	r22, r18
    65c6:	a1 01       	movw	r20, r2
    65c8:	2a e0       	ldi	r18, 0x0A	; 10
    65ca:	30 e0       	ldi	r19, 0x00	; 0
    65cc:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <__ultoa_invert>
    65d0:	d8 2e       	mov	r13, r24
    65d2:	d2 18       	sub	r13, r2
    65d4:	40 c0       	rjmp	.+128    	; 0x6656 <vfprintf+0x2b2>
    65d6:	95 37       	cpi	r25, 0x75	; 117
    65d8:	29 f4       	brne	.+10     	; 0x65e4 <vfprintf+0x240>
    65da:	1f 2d       	mov	r17, r15
    65dc:	1f 7e       	andi	r17, 0xEF	; 239
    65de:	2a e0       	ldi	r18, 0x0A	; 10
    65e0:	30 e0       	ldi	r19, 0x00	; 0
    65e2:	1d c0       	rjmp	.+58     	; 0x661e <vfprintf+0x27a>
    65e4:	1f 2d       	mov	r17, r15
    65e6:	19 7f       	andi	r17, 0xF9	; 249
    65e8:	9f 36       	cpi	r25, 0x6F	; 111
    65ea:	61 f0       	breq	.+24     	; 0x6604 <vfprintf+0x260>
    65ec:	90 37       	cpi	r25, 0x70	; 112
    65ee:	20 f4       	brcc	.+8      	; 0x65f8 <vfprintf+0x254>
    65f0:	98 35       	cpi	r25, 0x58	; 88
    65f2:	09 f0       	breq	.+2      	; 0x65f6 <vfprintf+0x252>
    65f4:	ac c0       	rjmp	.+344    	; 0x674e <vfprintf+0x3aa>
    65f6:	0f c0       	rjmp	.+30     	; 0x6616 <vfprintf+0x272>
    65f8:	90 37       	cpi	r25, 0x70	; 112
    65fa:	39 f0       	breq	.+14     	; 0x660a <vfprintf+0x266>
    65fc:	98 37       	cpi	r25, 0x78	; 120
    65fe:	09 f0       	breq	.+2      	; 0x6602 <vfprintf+0x25e>
    6600:	a6 c0       	rjmp	.+332    	; 0x674e <vfprintf+0x3aa>
    6602:	04 c0       	rjmp	.+8      	; 0x660c <vfprintf+0x268>
    6604:	28 e0       	ldi	r18, 0x08	; 8
    6606:	30 e0       	ldi	r19, 0x00	; 0
    6608:	0a c0       	rjmp	.+20     	; 0x661e <vfprintf+0x27a>
    660a:	10 61       	ori	r17, 0x10	; 16
    660c:	14 fd       	sbrc	r17, 4
    660e:	14 60       	ori	r17, 0x04	; 4
    6610:	20 e1       	ldi	r18, 0x10	; 16
    6612:	30 e0       	ldi	r19, 0x00	; 0
    6614:	04 c0       	rjmp	.+8      	; 0x661e <vfprintf+0x27a>
    6616:	14 fd       	sbrc	r17, 4
    6618:	16 60       	ori	r17, 0x06	; 6
    661a:	20 e1       	ldi	r18, 0x10	; 16
    661c:	32 e0       	ldi	r19, 0x02	; 2
    661e:	17 ff       	sbrs	r17, 7
    6620:	08 c0       	rjmp	.+16     	; 0x6632 <vfprintf+0x28e>
    6622:	f5 01       	movw	r30, r10
    6624:	60 81       	ld	r22, Z
    6626:	71 81       	ldd	r23, Z+1	; 0x01
    6628:	82 81       	ldd	r24, Z+2	; 0x02
    662a:	93 81       	ldd	r25, Z+3	; 0x03
    662c:	44 e0       	ldi	r20, 0x04	; 4
    662e:	50 e0       	ldi	r21, 0x00	; 0
    6630:	08 c0       	rjmp	.+16     	; 0x6642 <vfprintf+0x29e>
    6632:	f5 01       	movw	r30, r10
    6634:	80 81       	ld	r24, Z
    6636:	91 81       	ldd	r25, Z+1	; 0x01
    6638:	bc 01       	movw	r22, r24
    663a:	80 e0       	ldi	r24, 0x00	; 0
    663c:	90 e0       	ldi	r25, 0x00	; 0
    663e:	42 e0       	ldi	r20, 0x02	; 2
    6640:	50 e0       	ldi	r21, 0x00	; 0
    6642:	a4 0e       	add	r10, r20
    6644:	b5 1e       	adc	r11, r21
    6646:	a1 01       	movw	r20, r2
    6648:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <__ultoa_invert>
    664c:	d8 2e       	mov	r13, r24
    664e:	d2 18       	sub	r13, r2
    6650:	8f e7       	ldi	r24, 0x7F	; 127
    6652:	f8 2e       	mov	r15, r24
    6654:	f1 22       	and	r15, r17
    6656:	f6 fe       	sbrs	r15, 6
    6658:	0b c0       	rjmp	.+22     	; 0x6670 <vfprintf+0x2cc>
    665a:	5e ef       	ldi	r21, 0xFE	; 254
    665c:	f5 22       	and	r15, r21
    665e:	d9 14       	cp	r13, r9
    6660:	38 f4       	brcc	.+14     	; 0x6670 <vfprintf+0x2cc>
    6662:	f4 fe       	sbrs	r15, 4
    6664:	07 c0       	rjmp	.+14     	; 0x6674 <vfprintf+0x2d0>
    6666:	f2 fc       	sbrc	r15, 2
    6668:	05 c0       	rjmp	.+10     	; 0x6674 <vfprintf+0x2d0>
    666a:	8f ee       	ldi	r24, 0xEF	; 239
    666c:	f8 22       	and	r15, r24
    666e:	02 c0       	rjmp	.+4      	; 0x6674 <vfprintf+0x2d0>
    6670:	1d 2d       	mov	r17, r13
    6672:	01 c0       	rjmp	.+2      	; 0x6676 <vfprintf+0x2d2>
    6674:	19 2d       	mov	r17, r9
    6676:	f4 fe       	sbrs	r15, 4
    6678:	0d c0       	rjmp	.+26     	; 0x6694 <vfprintf+0x2f0>
    667a:	fe 01       	movw	r30, r28
    667c:	ed 0d       	add	r30, r13
    667e:	f1 1d       	adc	r31, r1
    6680:	80 81       	ld	r24, Z
    6682:	80 33       	cpi	r24, 0x30	; 48
    6684:	19 f4       	brne	.+6      	; 0x668c <vfprintf+0x2e8>
    6686:	99 ee       	ldi	r25, 0xE9	; 233
    6688:	f9 22       	and	r15, r25
    668a:	08 c0       	rjmp	.+16     	; 0x669c <vfprintf+0x2f8>
    668c:	1f 5f       	subi	r17, 0xFF	; 255
    668e:	f2 fe       	sbrs	r15, 2
    6690:	05 c0       	rjmp	.+10     	; 0x669c <vfprintf+0x2f8>
    6692:	03 c0       	rjmp	.+6      	; 0x669a <vfprintf+0x2f6>
    6694:	8f 2d       	mov	r24, r15
    6696:	86 78       	andi	r24, 0x86	; 134
    6698:	09 f0       	breq	.+2      	; 0x669c <vfprintf+0x2f8>
    669a:	1f 5f       	subi	r17, 0xFF	; 255
    669c:	0f 2d       	mov	r16, r15
    669e:	f3 fc       	sbrc	r15, 3
    66a0:	14 c0       	rjmp	.+40     	; 0x66ca <vfprintf+0x326>
    66a2:	f0 fe       	sbrs	r15, 0
    66a4:	0f c0       	rjmp	.+30     	; 0x66c4 <vfprintf+0x320>
    66a6:	1e 15       	cp	r17, r14
    66a8:	10 f0       	brcs	.+4      	; 0x66ae <vfprintf+0x30a>
    66aa:	9d 2c       	mov	r9, r13
    66ac:	0b c0       	rjmp	.+22     	; 0x66c4 <vfprintf+0x320>
    66ae:	9d 2c       	mov	r9, r13
    66b0:	9e 0c       	add	r9, r14
    66b2:	91 1a       	sub	r9, r17
    66b4:	1e 2d       	mov	r17, r14
    66b6:	06 c0       	rjmp	.+12     	; 0x66c4 <vfprintf+0x320>
    66b8:	80 e2       	ldi	r24, 0x20	; 32
    66ba:	90 e0       	ldi	r25, 0x00	; 0
    66bc:	b3 01       	movw	r22, r6
    66be:	0e 94 c5 33 	call	0x678a	; 0x678a <fputc>
    66c2:	1f 5f       	subi	r17, 0xFF	; 255
    66c4:	1e 15       	cp	r17, r14
    66c6:	c0 f3       	brcs	.-16     	; 0x66b8 <vfprintf+0x314>
    66c8:	04 c0       	rjmp	.+8      	; 0x66d2 <vfprintf+0x32e>
    66ca:	1e 15       	cp	r17, r14
    66cc:	10 f4       	brcc	.+4      	; 0x66d2 <vfprintf+0x32e>
    66ce:	e1 1a       	sub	r14, r17
    66d0:	01 c0       	rjmp	.+2      	; 0x66d4 <vfprintf+0x330>
    66d2:	ee 24       	eor	r14, r14
    66d4:	04 ff       	sbrs	r16, 4
    66d6:	0f c0       	rjmp	.+30     	; 0x66f6 <vfprintf+0x352>
    66d8:	80 e3       	ldi	r24, 0x30	; 48
    66da:	90 e0       	ldi	r25, 0x00	; 0
    66dc:	b3 01       	movw	r22, r6
    66de:	0e 94 c5 33 	call	0x678a	; 0x678a <fputc>
    66e2:	02 ff       	sbrs	r16, 2
    66e4:	1d c0       	rjmp	.+58     	; 0x6720 <vfprintf+0x37c>
    66e6:	01 fd       	sbrc	r16, 1
    66e8:	03 c0       	rjmp	.+6      	; 0x66f0 <vfprintf+0x34c>
    66ea:	88 e7       	ldi	r24, 0x78	; 120
    66ec:	90 e0       	ldi	r25, 0x00	; 0
    66ee:	0e c0       	rjmp	.+28     	; 0x670c <vfprintf+0x368>
    66f0:	88 e5       	ldi	r24, 0x58	; 88
    66f2:	90 e0       	ldi	r25, 0x00	; 0
    66f4:	0b c0       	rjmp	.+22     	; 0x670c <vfprintf+0x368>
    66f6:	80 2f       	mov	r24, r16
    66f8:	86 78       	andi	r24, 0x86	; 134
    66fa:	91 f0       	breq	.+36     	; 0x6720 <vfprintf+0x37c>
    66fc:	01 ff       	sbrs	r16, 1
    66fe:	02 c0       	rjmp	.+4      	; 0x6704 <vfprintf+0x360>
    6700:	8b e2       	ldi	r24, 0x2B	; 43
    6702:	01 c0       	rjmp	.+2      	; 0x6706 <vfprintf+0x362>
    6704:	80 e2       	ldi	r24, 0x20	; 32
    6706:	f7 fc       	sbrc	r15, 7
    6708:	8d e2       	ldi	r24, 0x2D	; 45
    670a:	90 e0       	ldi	r25, 0x00	; 0
    670c:	b3 01       	movw	r22, r6
    670e:	0e 94 c5 33 	call	0x678a	; 0x678a <fputc>
    6712:	06 c0       	rjmp	.+12     	; 0x6720 <vfprintf+0x37c>
    6714:	80 e3       	ldi	r24, 0x30	; 48
    6716:	90 e0       	ldi	r25, 0x00	; 0
    6718:	b3 01       	movw	r22, r6
    671a:	0e 94 c5 33 	call	0x678a	; 0x678a <fputc>
    671e:	9a 94       	dec	r9
    6720:	d9 14       	cp	r13, r9
    6722:	c0 f3       	brcs	.-16     	; 0x6714 <vfprintf+0x370>
    6724:	da 94       	dec	r13
    6726:	f1 01       	movw	r30, r2
    6728:	ed 0d       	add	r30, r13
    672a:	f1 1d       	adc	r31, r1
    672c:	80 81       	ld	r24, Z
    672e:	90 e0       	ldi	r25, 0x00	; 0
    6730:	b3 01       	movw	r22, r6
    6732:	0e 94 c5 33 	call	0x678a	; 0x678a <fputc>
    6736:	dd 20       	and	r13, r13
    6738:	a9 f7       	brne	.-22     	; 0x6724 <vfprintf+0x380>
    673a:	06 c0       	rjmp	.+12     	; 0x6748 <vfprintf+0x3a4>
    673c:	80 e2       	ldi	r24, 0x20	; 32
    673e:	90 e0       	ldi	r25, 0x00	; 0
    6740:	b3 01       	movw	r22, r6
    6742:	0e 94 c5 33 	call	0x678a	; 0x678a <fputc>
    6746:	ea 94       	dec	r14
    6748:	ee 20       	and	r14, r14
    674a:	c1 f7       	brne	.-16     	; 0x673c <vfprintf+0x398>
    674c:	43 ce       	rjmp	.-890    	; 0x63d4 <vfprintf+0x30>
    674e:	f3 01       	movw	r30, r6
    6750:	66 81       	ldd	r22, Z+6	; 0x06
    6752:	77 81       	ldd	r23, Z+7	; 0x07
    6754:	cb 01       	movw	r24, r22
    6756:	2b 96       	adiw	r28, 0x0b	; 11
    6758:	e2 e1       	ldi	r30, 0x12	; 18
    675a:	0c 94 8a 31 	jmp	0x6314	; 0x6314 <__epilogue_restores__>

0000675e <strnlen_P>:
    675e:	fc 01       	movw	r30, r24
    6760:	05 90       	lpm	r0, Z+
    6762:	61 50       	subi	r22, 0x01	; 1
    6764:	70 40       	sbci	r23, 0x00	; 0
    6766:	01 10       	cpse	r0, r1
    6768:	d8 f7       	brcc	.-10     	; 0x6760 <strnlen_P+0x2>
    676a:	80 95       	com	r24
    676c:	90 95       	com	r25
    676e:	8e 0f       	add	r24, r30
    6770:	9f 1f       	adc	r25, r31
    6772:	08 95       	ret

00006774 <strnlen>:
    6774:	fc 01       	movw	r30, r24
    6776:	61 50       	subi	r22, 0x01	; 1
    6778:	70 40       	sbci	r23, 0x00	; 0
    677a:	01 90       	ld	r0, Z+
    677c:	01 10       	cpse	r0, r1
    677e:	d8 f7       	brcc	.-10     	; 0x6776 <strnlen+0x2>
    6780:	80 95       	com	r24
    6782:	90 95       	com	r25
    6784:	8e 0f       	add	r24, r30
    6786:	9f 1f       	adc	r25, r31
    6788:	08 95       	ret

0000678a <fputc>:
    678a:	0f 93       	push	r16
    678c:	1f 93       	push	r17
    678e:	cf 93       	push	r28
    6790:	df 93       	push	r29
    6792:	8c 01       	movw	r16, r24
    6794:	eb 01       	movw	r28, r22
    6796:	8b 81       	ldd	r24, Y+3	; 0x03
    6798:	81 ff       	sbrs	r24, 1
    679a:	1b c0       	rjmp	.+54     	; 0x67d2 <fputc+0x48>
    679c:	82 ff       	sbrs	r24, 2
    679e:	0d c0       	rjmp	.+26     	; 0x67ba <fputc+0x30>
    67a0:	2e 81       	ldd	r18, Y+6	; 0x06
    67a2:	3f 81       	ldd	r19, Y+7	; 0x07
    67a4:	8c 81       	ldd	r24, Y+4	; 0x04
    67a6:	9d 81       	ldd	r25, Y+5	; 0x05
    67a8:	28 17       	cp	r18, r24
    67aa:	39 07       	cpc	r19, r25
    67ac:	64 f4       	brge	.+24     	; 0x67c6 <fputc+0x3c>
    67ae:	e8 81       	ld	r30, Y
    67b0:	f9 81       	ldd	r31, Y+1	; 0x01
    67b2:	01 93       	st	Z+, r16
    67b4:	f9 83       	std	Y+1, r31	; 0x01
    67b6:	e8 83       	st	Y, r30
    67b8:	06 c0       	rjmp	.+12     	; 0x67c6 <fputc+0x3c>
    67ba:	e8 85       	ldd	r30, Y+8	; 0x08
    67bc:	f9 85       	ldd	r31, Y+9	; 0x09
    67be:	80 2f       	mov	r24, r16
    67c0:	09 95       	icall
    67c2:	89 2b       	or	r24, r25
    67c4:	31 f4       	brne	.+12     	; 0x67d2 <fputc+0x48>
    67c6:	8e 81       	ldd	r24, Y+6	; 0x06
    67c8:	9f 81       	ldd	r25, Y+7	; 0x07
    67ca:	01 96       	adiw	r24, 0x01	; 1
    67cc:	9f 83       	std	Y+7, r25	; 0x07
    67ce:	8e 83       	std	Y+6, r24	; 0x06
    67d0:	02 c0       	rjmp	.+4      	; 0x67d6 <fputc+0x4c>
    67d2:	0f ef       	ldi	r16, 0xFF	; 255
    67d4:	1f ef       	ldi	r17, 0xFF	; 255
    67d6:	c8 01       	movw	r24, r16
    67d8:	df 91       	pop	r29
    67da:	cf 91       	pop	r28
    67dc:	1f 91       	pop	r17
    67de:	0f 91       	pop	r16
    67e0:	08 95       	ret

000067e2 <__ultoa_invert>:
    67e2:	fa 01       	movw	r30, r20
    67e4:	aa 27       	eor	r26, r26
    67e6:	28 30       	cpi	r18, 0x08	; 8
    67e8:	51 f1       	breq	.+84     	; 0x683e <__ultoa_invert+0x5c>
    67ea:	20 31       	cpi	r18, 0x10	; 16
    67ec:	81 f1       	breq	.+96     	; 0x684e <__ultoa_invert+0x6c>
    67ee:	e8 94       	clt
    67f0:	6f 93       	push	r22
    67f2:	6e 7f       	andi	r22, 0xFE	; 254
    67f4:	6e 5f       	subi	r22, 0xFE	; 254
    67f6:	7f 4f       	sbci	r23, 0xFF	; 255
    67f8:	8f 4f       	sbci	r24, 0xFF	; 255
    67fa:	9f 4f       	sbci	r25, 0xFF	; 255
    67fc:	af 4f       	sbci	r26, 0xFF	; 255
    67fe:	b1 e0       	ldi	r27, 0x01	; 1
    6800:	3e d0       	rcall	.+124    	; 0x687e <__ultoa_invert+0x9c>
    6802:	b4 e0       	ldi	r27, 0x04	; 4
    6804:	3c d0       	rcall	.+120    	; 0x687e <__ultoa_invert+0x9c>
    6806:	67 0f       	add	r22, r23
    6808:	78 1f       	adc	r23, r24
    680a:	89 1f       	adc	r24, r25
    680c:	9a 1f       	adc	r25, r26
    680e:	a1 1d       	adc	r26, r1
    6810:	68 0f       	add	r22, r24
    6812:	79 1f       	adc	r23, r25
    6814:	8a 1f       	adc	r24, r26
    6816:	91 1d       	adc	r25, r1
    6818:	a1 1d       	adc	r26, r1
    681a:	6a 0f       	add	r22, r26
    681c:	71 1d       	adc	r23, r1
    681e:	81 1d       	adc	r24, r1
    6820:	91 1d       	adc	r25, r1
    6822:	a1 1d       	adc	r26, r1
    6824:	20 d0       	rcall	.+64     	; 0x6866 <__ultoa_invert+0x84>
    6826:	09 f4       	brne	.+2      	; 0x682a <__ultoa_invert+0x48>
    6828:	68 94       	set
    682a:	3f 91       	pop	r19
    682c:	2a e0       	ldi	r18, 0x0A	; 10
    682e:	26 9f       	mul	r18, r22
    6830:	11 24       	eor	r1, r1
    6832:	30 19       	sub	r19, r0
    6834:	30 5d       	subi	r19, 0xD0	; 208
    6836:	31 93       	st	Z+, r19
    6838:	de f6       	brtc	.-74     	; 0x67f0 <__ultoa_invert+0xe>
    683a:	cf 01       	movw	r24, r30
    683c:	08 95       	ret
    683e:	46 2f       	mov	r20, r22
    6840:	47 70       	andi	r20, 0x07	; 7
    6842:	40 5d       	subi	r20, 0xD0	; 208
    6844:	41 93       	st	Z+, r20
    6846:	b3 e0       	ldi	r27, 0x03	; 3
    6848:	0f d0       	rcall	.+30     	; 0x6868 <__ultoa_invert+0x86>
    684a:	c9 f7       	brne	.-14     	; 0x683e <__ultoa_invert+0x5c>
    684c:	f6 cf       	rjmp	.-20     	; 0x683a <__ultoa_invert+0x58>
    684e:	46 2f       	mov	r20, r22
    6850:	4f 70       	andi	r20, 0x0F	; 15
    6852:	40 5d       	subi	r20, 0xD0	; 208
    6854:	4a 33       	cpi	r20, 0x3A	; 58
    6856:	18 f0       	brcs	.+6      	; 0x685e <__ultoa_invert+0x7c>
    6858:	49 5d       	subi	r20, 0xD9	; 217
    685a:	31 fd       	sbrc	r19, 1
    685c:	40 52       	subi	r20, 0x20	; 32
    685e:	41 93       	st	Z+, r20
    6860:	02 d0       	rcall	.+4      	; 0x6866 <__ultoa_invert+0x84>
    6862:	a9 f7       	brne	.-22     	; 0x684e <__ultoa_invert+0x6c>
    6864:	ea cf       	rjmp	.-44     	; 0x683a <__ultoa_invert+0x58>
    6866:	b4 e0       	ldi	r27, 0x04	; 4
    6868:	a6 95       	lsr	r26
    686a:	97 95       	ror	r25
    686c:	87 95       	ror	r24
    686e:	77 95       	ror	r23
    6870:	67 95       	ror	r22
    6872:	ba 95       	dec	r27
    6874:	c9 f7       	brne	.-14     	; 0x6868 <__ultoa_invert+0x86>
    6876:	00 97       	sbiw	r24, 0x00	; 0
    6878:	61 05       	cpc	r22, r1
    687a:	71 05       	cpc	r23, r1
    687c:	08 95       	ret
    687e:	9b 01       	movw	r18, r22
    6880:	ac 01       	movw	r20, r24
    6882:	0a 2e       	mov	r0, r26
    6884:	06 94       	lsr	r0
    6886:	57 95       	ror	r21
    6888:	47 95       	ror	r20
    688a:	37 95       	ror	r19
    688c:	27 95       	ror	r18
    688e:	ba 95       	dec	r27
    6890:	c9 f7       	brne	.-14     	; 0x6884 <__ultoa_invert+0xa2>
    6892:	62 0f       	add	r22, r18
    6894:	73 1f       	adc	r23, r19
    6896:	84 1f       	adc	r24, r20
    6898:	95 1f       	adc	r25, r21
    689a:	a0 1d       	adc	r26, r0
    689c:	08 95       	ret

0000689e <_exit>:
    689e:	f8 94       	cli

000068a0 <__stop_program>:
    68a0:	ff cf       	rjmp	.-2      	; 0x68a0 <__stop_program>
